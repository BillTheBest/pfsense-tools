Index: sys/modules/if_bridge/Makefile
===================================================================
RCS file: /home/ncvs/src/sys/modules/if_bridge/Makefile,v
retrieving revision 1.2.2.1
diff -u -p -r1.2.2.1 Makefile
--- sys/modules/if_bridge/Makefile	10 Feb 2006 00:38:01 -0000	1.2.2.1
+++ sys/modules/if_bridge/Makefile	9 Jun 2006 01:00:09 -0000
@@ -2,7 +2,7 @@
 
 .PATH:	${.CURDIR}/../../net
 KMOD=	if_bridge
-SRCS=	if_bridge.c bridgestp.c opt_inet.h opt_inet6.h
+SRCS=	if_bridge.c bridgestp.c opt_inet.h opt_inet6.h opt_carp.h
 
 .if !defined(KERNBUILDDIR)
 opt_inet.h:
Index: sys/net/if_bridge.c
===================================================================
RCS file: /home/ncvs/src/sys/net/if_bridge.c,v
retrieving revision 1.11.2.28
diff -u -p -r1.11.2.28 if_bridge.c
--- sys/net/if_bridge.c	2 Apr 2006 04:41:53 -0000	1.11.2.28
+++ sys/net/if_bridge.c	4 Nov 2006 18:26:34 -0000
@@ -84,6 +84,7 @@ __FBSDID("$FreeBSD$");
 
 #include "opt_inet.h"
 #include "opt_inet6.h"
+#include "opt_carp.h"
 
 #include <sys/param.h>
 #include <sys/mbuf.h>
@@ -120,6 +121,9 @@ __FBSDID("$FreeBSD$");
 #include <netinet/ip6.h>
 #include <netinet6/ip6_var.h>
 #endif
+#ifdef DEV_CARP
+#include <netinet/ip_carp.h>
+#endif
 #include <machine/in_cksum.h>
 #include <netinet/if_ether.h> /* for struct arpcom */
 #include <net/if_bridgevar.h>
@@ -263,6 +267,8 @@ static int	bridge_ip_checkbasic(struct m
 # ifdef INET6
 static int	bridge_ip6_checkbasic(struct mbuf **mp);
 # endif /* INET6 */
+static int	bridge_fragment(struct ifnet *, struct mbuf *,
+		    struct ether_header *, int, struct llc *);
 
 SYSCTL_DECL(_net_link);
 SYSCTL_NODE(_net_link, IFT_BRIDGE, bridge, CTLFLAG_RW, 0, "Bridge");
@@ -1484,13 +1490,22 @@ bridge_stop(struct ifnet *ifp, int disab
 __inline void
 bridge_enqueue(struct bridge_softc *sc, struct ifnet *dst_ifp, struct mbuf *m)
 {
-	int len, err;
+	int len, err = 0;
 	short mflags;
+	struct mbuf *m0;
 
 	len = m->m_pkthdr.len;
 	mflags = m->m_flags;
 
-	IFQ_ENQUEUE(&dst_ifp->if_snd, m, err);
+	/* We may be sending a framgment so traverse the mbuf */
+	for (; m; m = m0) {
+		m0 = m->m_nextpkt;
+		m->m_nextpkt = NULL;
+		
+		if (err == 0)
+			IFQ_ENQUEUE(&dst_ifp->if_snd, m, err);
+	}
+
 	if (err == 0) {
 
 		sc->sc_ifp->if_opackets++;
@@ -1914,6 +1929,11 @@ bridge_input(struct ifnet *ifp, struct m
 		 * BPF_MTAP(&m->m_pkthdr.rcvif, m);
 		 */
 
+		/* Note where to send the reply to */
+		if (bif->bif_flags & IFBIF_LEARNING)
+			(void) bridge_rtupdate(sc,
+			    eh->ether_shost, ifp, 0, IFBAF_DYNAMIC);
+
 		/* Mark the packet as arriving on the bridge interface */
 		m->m_pkthdr.rcvif = bifp;
 		BPF_MTAP(bifp, m);
@@ -2007,7 +2027,12 @@ bridge_input(struct ifnet *ifp, struct m
 			continue;
 		/* It is destined for us. */
 		if (memcmp(IF_LLADDR(bif->bif_ifp), eh->ether_dhost,
-		    ETHER_ADDR_LEN) == 0) {
+		    ETHER_ADDR_LEN) == 0
+#ifdef DEV_CARP
+		    || (bif->bif_ifp->if_carp 
+			&& carp_forus(bif->bif_ifp->if_carp, eh->ether_dhost))
+#endif
+		    ) {
 			if (bif->bif_flags & IFBIF_LEARNING)
 				(void) bridge_rtupdate(sc,
 				    eh->ether_shost, ifp, 0, IFBAF_DYNAMIC);
@@ -2018,7 +2043,12 @@ bridge_input(struct ifnet *ifp, struct m
 
 		/* We just received a packet that we sent out. */
 		if (memcmp(IF_LLADDR(bif->bif_ifp), eh->ether_shost,
-		    ETHER_ADDR_LEN) == 0) {
+		    ETHER_ADDR_LEN) == 0
+#ifdef DEV_CARP
+		    || (bif->bif_ifp->if_carp 
+			&& carp_forus(bif->bif_ifp->if_carp, eh->ether_shost))
+#endif
+		    ) {
 			BRIDGE_UNLOCK(sc);
 			m_freem(m);
 			return (NULL);
@@ -2550,7 +2580,7 @@ bridge_rtnode_destroy(struct bridge_soft
 static int
 bridge_pfil(struct mbuf **mp, struct ifnet *bifp, struct ifnet *ifp, int dir)
 {
-	int snap, error, i;
+	int snap, error, i, hlen;
 	struct ether_header *eh1, eh2;
 	struct ip_fw_args args;
 	struct ip *ip;
@@ -2732,13 +2762,39 @@ ipfwpass:
 			error = pfil_run_hooks(&inet_pfil_hook, mp, bifp,
 					dir, NULL);
 
-		/* Restore ip and the fields ntohs()'d. */
-		if (*mp != NULL && error == 0) {
-			ip = mtod(*mp, struct ip *);
-			ip->ip_len = htons(ip->ip_len);
-			ip->ip_off = htons(ip->ip_off);
+		if (*mp == NULL || error != 0) /* filter may consume */
+			break;
+
+		/* check if we need to fragment the packet */
+		if (pfil_member && ifp != NULL && dir == PFIL_OUT) {
+			i = (*mp)->m_pkthdr.len;
+			if (i > ifp->if_mtu) {
+				error = bridge_fragment(ifp, *mp, &eh2, snap,
+					    &llc1);
+				return (error);
+			}
 		}
 
+		/* Recalculate the ip checksum and restore byte ordering */
+		ip = mtod(*mp, struct ip *);
+		hlen = ip->ip_hl << 2;
+ 		if (hlen < sizeof(struct ip))
+ 			goto bad;
+ 		if (hlen > (*mp)->m_len) {
+ 			if ((*mp = m_pullup(*mp, hlen)) == 0)
+ 				goto bad;
+ 			ip = mtod(*mp, struct ip *);
+ 			if (ip == NULL)
+ 				goto bad;
+ 		}
+		ip->ip_len = htons(ip->ip_len);
+		ip->ip_off = htons(ip->ip_off);
+ 		ip->ip_sum = 0;
+ 		if (hlen == sizeof(struct ip))
+ 			ip->ip_sum = in_cksum_hdr(ip);
+ 		else
+ 			ip->ip_sum = in_cksum(*mp, hlen);
+
 		break;
 # ifdef INET6
 	case ETHERTYPE_IPV6 :
@@ -2950,3 +3006,59 @@ bad:
 	return -1;
 }
 # endif /* INET6 */
+
+/*
+ * bridge_fragment:
+ *
+ *	Return a fragmented mbuf chain.
+ */
+static int
+bridge_fragment(struct ifnet *ifp, struct mbuf *m, struct ether_header *eh,
+    int snap, struct llc *llc)
+{
+	struct mbuf *m0;
+	struct ip *ip;
+	int error = -1;
+
+	if (m->m_len < sizeof(struct ip) &&
+	    (m = m_pullup(m, sizeof(struct ip))) == NULL)
+		goto out;
+	ip = mtod(m, struct ip *);
+
+	error = ip_fragment(ip, &m, ifp->if_mtu, ifp->if_hwassist,
+		    CSUM_DELAY_IP);
+	if (error)
+		goto out;
+
+	/* walk the chain and re-add the Ethernet header */
+	for (m0 = m; m0; m0 = m0->m_nextpkt) {
+		if (error == 0) {
+			if (snap) {
+				M_PREPEND(m0, sizeof(struct llc), M_DONTWAIT);
+				if (m0 == NULL) {
+					error = ENOBUFS;
+					continue;
+				}
+				bcopy(llc, mtod(m0, caddr_t),
+				    sizeof(struct llc));
+			}
+			M_PREPEND(m0, ETHER_HDR_LEN, M_DONTWAIT);
+			if (m0 == NULL) {
+				error = ENOBUFS;
+				continue;
+			}
+			bcopy(eh, mtod(m0, caddr_t), ETHER_HDR_LEN);
+		} else 
+			m_freem(m);
+	}
+
+	if (error == 0)
+		ipstat.ips_fragmented++;
+
+	return (error);
+
+out:
+	if (m != NULL)
+		m_freem(m);
+	return (error);
+}
Index: sys/netinet/if_ether.c
===================================================================
RCS file: /home/ncvs/src/sys/netinet/if_ether.c,v
retrieving revision 1.137.2.12
diff -u -p -r1.137.2.12 if_ether.c
--- sys/netinet/if_ether.c	22 Mar 2006 07:48:31 -0000	1.137.2.12
+++ sys/netinet/if_ether.c	9 Jun 2006 01:08:35 -0000
@@ -865,10 +865,13 @@ reply:
 		} else {
 			/*
 			 * Return proxied ARP replies only on the interface
-			 * where this network resides. Otherwise we may
-			 * conflict with the host we are proxying for.
+			 * or bridge cluster where this network resides.
+			 * Otherwise we may conflict with the host we are
+			 * proxying for.
 			 */
-			if (rt->rt_ifp != ifp) {
+			if (rt->rt_ifp != ifp &&
+				(rt->rt_ifp->if_bridge != ifp->if_bridge ||
+				ifp->if_bridge == NULL)) {
 				RT_UNLOCK(rt);
 				goto drop;
 			}
