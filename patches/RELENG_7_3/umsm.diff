? sys/modules/umsm/Makefile
Index: sys/conf/files
===================================================================
RCS file: /home/ncvs/src/sys/conf/files,v
retrieving revision 1.1243.2.21
diff -u -r1.1243.2.21 files
--- sys/conf/files	8 May 2008 17:25:22 -0000	1.1243.2.21
+++ sys/conf/files	10 May 2008 16:55:29 -0000
@@ -1148,6 +1148,7 @@
 dev/usb/umct.c			optional umct
 dev/usb/umodem.c		optional umodem
 dev/usb/ums.c			optional ums
+dev/usb/umsm.c			optional umsm
 dev/usb/uplcom.c		optional uplcom
 dev/usb/urio.c			optional urio
 dev/usb/usb.c			optional usb
Index: sys/dev/usb/umsm.c
===================================================================
RCS file: sys/dev/usb/umsm.c
diff -N sys/dev/usb/umsm.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sys/dev/usb/umsm.c	10 May 2008 16:55:29 -0000
@@ -0,0 +1,412 @@
+/*	$OpenBSD: umsm.c,v 1.24 2008/05/09 13:31:47 jsg Exp $	*/
+
+/*
+ * Copyright (c) 2006 Jonathan Gray <jsg@openbsd.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/* Driver for Qualcomm MSM EVDO and UMTS communication devices */
+
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/kernel.h>
+#include <sys/malloc.h>
+#include <sys/module.h>
+#include <sys/bus.h>
+#include <sys/ioccom.h>
+#include <sys/fcntl.h>
+#include <sys/taskqueue.h>
+#include <sys/conf.h>
+#include <sys/tty.h>
+#include <sys/file.h>
+#include <sys/selinfo.h>
+#include <sys/proc.h>
+#include <sys/sysctl.h>
+
+#include <dev/usb/usb.h>
+#include <dev/usb/usbcdc.h>
+#include <dev/usb/usbdi.h>
+#include <dev/usb/usbdi_util.h>
+#include "usbdevs.h"
+#include <dev/usb/usb_quirks.h>
+
+#include <dev/usb/ucomvar.h>
+
+#ifdef USB_DEBUG
+static int      umsmdebug = 0;
+SYSCTL_NODE(_hw_usb, OID_AUTO, umsm, CTLFLAG_RW, 0, "USB umsm");
+SYSCTL_INT(_hw_usb_umsm, OID_AUTO, debug, CTLFLAG_RW,
+           &umsmdebug, 0, "umsm debug level");
+
+#define DPRINTFN(n, x)  do { \
+                                if (umsmdebug > (n)) \
+                                        printf x; \
+                        } while (0)
+#else
+#define DPRINTFN(n, x)
+#endif
+#define DPRINTF(x) DPRINTFN(0, x)
+
+#define UMSMBUFSZ	4096
+#define	UMSM_INTR_INTERVAL	100	/* ms */
+
+#define UMSM_MODVER             1       /* module version */
+
+int umsm_open(void *, int);
+void umsm_close(void *, int);
+void umsm_intr(usbd_xfer_handle, usbd_private_handle, usbd_status);
+void umsm_get_status(void *, int, u_char *, u_char *);
+
+struct umsm_softc {
+	struct ucom_softc	 sc_ucom;
+	int			 sc_iface_number;
+	usbd_interface_handle	 sc_intr_iface;
+	
+	/* interrupt ep */
+	int			 sc_intr_number;
+	usbd_pipe_handle	 sc_intr_pipe;
+	u_char			*sc_intr_buf;
+	int			 sc_isize;
+
+	u_char			 sc_lsr;	/* Local status register */
+	u_char			 sc_msr;	/* status register */
+};
+
+struct ucom_callback umsm_methods = {
+	umsm_get_status,
+	NULL,
+	NULL,
+	NULL,
+	umsm_open,
+	umsm_close,
+	NULL,
+	NULL,
+};
+
+
+static const struct usb_umsm {
+	uint16_t vendor;
+	uint16_t product;
+} umsm_devs[] = {
+	{ USB_VENDOR_AIRPRIME,	USB_PRODUCT_AIRPRIME_PC5220 },
+	{ USB_VENDOR_ANYDATA,	USB_PRODUCT_ANYDATA_A2502 },
+	{ USB_VENDOR_ANYDATA,	USB_PRODUCT_ANYDATA_ADU_500A },
+	{ USB_VENDOR_DELL,	USB_PRODUCT_DELL_W5500 },
+	{ USB_VENDOR_HUAWEI,	USB_PRODUCT_HUAWEI_E220 },
+	{ USB_VENDOR_KYOCERA2,	USB_PRODUCT_KYOCERA2_CDMA_MSM_K },
+	{ USB_VENDOR_NOVATEL2,	USB_PRODUCT_NOVATEL2_FLEXPACKGPS },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_EXPRESSCARD },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_CDMA_MODEM },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_S720 },
+	{ USB_VENDOR_NOVATEL,   USB_PRODUCT_NOVATEL_U720 },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_U740 },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_XU870 },
+	{ USB_VENDOR_NOVATEL,	USB_PRODUCT_NOVATEL_ES620 },
+	{ USB_VENDOR_QUALCOMM,	USB_PRODUCT_QUALCOMM_MSM_DRIVER },
+	{ USB_VENDOR_QUALCOMM,	USB_PRODUCT_QUALCOMM_MSM_HSDPA },
+	{ USB_VENDOR_QUALCOMM,	USB_PRODUCT_QUALCOMM_CDMA_MSM },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_EM5625 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_AIRCARD580 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_AIRCARD_595 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_AC875U },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC5720_2 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC5725 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC8755 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC8755_2 },
+	{ USB_VENDOR_SIERRA,    USB_PRODUCT_SIERRA_MC8755_3 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC8765 },
+	{ USB_VENDOR_SIERRA,	USB_PRODUCT_SIERRA_MC8775 },
+};
+
+static device_probe_t umsm_match;
+static device_attach_t umsm_attach;
+static device_detach_t umsm_detach;
+
+static device_method_t umsm_method[] = {
+        /* Device interface */
+      	DEVMETHOD(device_probe, umsm_match),
+        DEVMETHOD(device_attach, umsm_attach),
+        DEVMETHOD(device_detach, umsm_detach),
+        { 0, 0 }
+};
+
+static driver_t umsm_driver = {
+        "umsm",
+        umsm_method,
+        sizeof (struct umsm_softc)
+};
+
+DRIVER_MODULE(umsm, uhub, umsm_driver, ucom_devclass, usbd_driver_load, 0);
+MODULE_DEPEND(umsm, usb, 1, 1, 1);
+MODULE_DEPEND(umsm, ucom, UCOM_MINVER, UCOM_PREFVER, UCOM_MAXVER);
+MODULE_VERSION(umsm, UMSM_MODVER);
+
+int
+umsm_match(device_t self)
+{
+	struct usb_attach_arg *uaa = device_get_ivars(self);
+	usb_interface_descriptor_t *id;
+	int i;
+
+	if (uaa->iface == NULL)
+		return UMATCH_NONE;
+
+	/*
+	 * Some devices(eg Huawei E220) have multiple interfaces and some
+	 * of them are of class umass. Don't claim ownership in such case.
+	 */
+	id = usbd_get_interface_descriptor(uaa->iface);
+	if (id == NULL || id->bInterfaceClass == UICLASS_MASS)
+		return UMATCH_NONE;
+
+         for (i = 0; umsm_devs[i].vendor != 0; i++) {
+                if (umsm_devs[i].vendor == uaa->vendor &&
+                    umsm_devs[i].product == uaa->product) {
+                        return (UMATCH_VENDOR_PRODUCT);
+                }
+         }
+	return  UMATCH_NONE;
+}
+
+static int
+umsm_attach(device_t self)
+{
+	struct umsm_softc *sc = device_get_softc(self);
+	struct usb_attach_arg *uaa = device_get_ivars(self);
+	usbd_device_handle dev;
+	struct ucom_softc *ucom;
+	usb_config_descriptor_t *cdesc;
+	usb_interface_descriptor_t *id;
+	usb_endpoint_descriptor_t *ed;
+#if 0
+	usbd_status err;
+#endif
+	int i;
+
+	dev = uaa->device;
+	ucom = &sc->sc_ucom;
+
+	ucom->sc_dev = self;
+	ucom->sc_udev = dev;
+	ucom->sc_iface = uaa->iface;
+
+        ucom->sc_bulkin_no = ucom->sc_bulkout_no = -1;
+        sc->sc_intr_number = -1;
+        sc->sc_intr_pipe = NULL;
+
+#if 0
+        /* Move the device into the configured state. */
+        err = usbd_set_config_index(dev, UBSA_CONFIG_INDEX, 1);
+        if (err) {
+                device_printf(ucom->sc_dev, "failed to set configuration: %s\n",
+                    usbd_errstr(err));
+                ucom->sc_dying = 1;
+                goto error;
+         }
+#endif
+
+	cdesc = usbd_get_config_descriptor(ucom->sc_udev);
+        if (cdesc == NULL) {
+                device_printf(ucom->sc_dev,
+                    "failed to get configuration descriptor\n");
+                ucom->sc_dying = 1;
+                goto error;
+        }
+
+	id = usbd_get_interface_descriptor(ucom->sc_iface);
+	sc->sc_iface_number = id->bInterfaceNumber;
+
+	for (i = 0; i < id->bNumEndpoints; i++) {
+		ed = usbd_interface2endpoint_descriptor(ucom->sc_iface, i);
+		if (ed == NULL) {
+			device_printf(ucom->sc_dev, "no endpoint descriptor found for %d\n", i);
+			ucom->sc_dying = 1;
+			goto error;
+		}
+
+		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
+		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_INTERRUPT) {
+			sc->sc_intr_number = ed->bEndpointAddress;
+			sc->sc_isize = UGETW(ed->wMaxPacketSize);
+			device_printf(ucom->sc_dev, "find interrupt endpoint for %s\n", 
+				__func__);
+		} else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
+		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
+			ucom->sc_bulkin_no = ed->bEndpointAddress;
+		else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_OUT &&
+		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
+			ucom->sc_bulkout_no = ed->bEndpointAddress;
+	}
+
+        if (sc->sc_intr_number == -1) {
+                device_printf(ucom->sc_dev, "Could not find interrupt in\n");
+                ucom->sc_dying = 1;
+                goto error;
+        }
+
+        /* keep interface for interrupt */
+        sc->sc_intr_iface = ucom->sc_iface;
+
+	if (ucom->sc_bulkin_no == -1 || ucom->sc_bulkout_no == -1) {
+		device_printf(ucom->sc_dev, "missing endpoint");
+		ucom->sc_dying = 1;
+		goto error;
+	}
+
+	/* We need to force size as some devices lie */
+	ucom->sc_ibufsize = UMSMBUFSZ;
+	ucom->sc_obufsize = UMSMBUFSZ;
+	ucom->sc_ibufsizepad = UMSMBUFSZ;
+	ucom->sc_opkthdrlen = 0;
+	ucom->sc_parent = sc;
+	ucom->sc_callback = &umsm_methods;
+
+	DPRINTF(("ubsa: in = 0x%x, out = 0x%x, intr = 0x%x\n",
+            ucom->sc_bulkin_no, ucom->sc_bulkout_no, sc->sc_intr_number));
+
+	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, ucom->sc_udev,
+	    ucom->sc_dev);
+	
+	ucom_attach(ucom);
+	return (0);
+
+error:
+        return ENXIO;
+}
+
+static int
+umsm_detach(device_t self)
+{
+	struct umsm_softc *sc = device_get_softc(self);
+	struct ucom_softc *ucom = &sc->sc_ucom;
+	int rv = 0;
+
+
+        DPRINTF(("ubsa_detach: sc = %p\n", sc));
+
+        if (sc->sc_intr_pipe != NULL) {
+                usbd_abort_pipe(sc->sc_intr_pipe);
+                usbd_close_pipe(sc->sc_intr_pipe);
+                free(sc->sc_intr_buf, M_USBDEV);
+                sc->sc_intr_pipe = NULL;
+        }
+
+        sc->sc_ucom.sc_dying = 1;
+
+	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, ucom->sc_udev,
+			   ucom->sc_dev);
+
+	rv = ucom_detach(&sc->sc_ucom);
+
+	return (rv);
+}
+
+int
+umsm_open(void *addr, int portno)
+{
+	struct umsm_softc *sc = addr;
+	int err;
+
+	if (sc->sc_ucom.sc_dying)
+		return (ENXIO);
+
+	DPRINTF(("umsm_open: sc = %p\n", sc));
+
+	if (sc->sc_intr_number != -1 && sc->sc_intr_pipe == NULL) {
+		sc->sc_intr_buf = malloc(sc->sc_isize, M_USBDEV, M_WAITOK);
+		err = usbd_open_pipe_intr(sc->sc_intr_iface,
+		    sc->sc_intr_number,
+		    USBD_SHORT_XFER_OK,
+		    &sc->sc_intr_pipe,
+		    sc,
+		    sc->sc_intr_buf,
+		    sc->sc_isize,
+		    umsm_intr,
+		    UMSM_INTR_INTERVAL);
+		if (err) {
+			device_printf(sc->sc_ucom.sc_dev, "cannot open interrupt pipe (addr %d)\n",
+			    sc->sc_intr_number);
+			return (EIO);
+		}
+	}
+
+	return (0);
+}
+
+void
+umsm_close(void *addr, int portno)
+{
+	struct umsm_softc *sc = addr;
+	int err;
+
+	if (sc->sc_ucom.sc_dying)
+		return;
+
+	DPRINTF(("umsm_close: close\n"));
+
+	if (sc->sc_intr_pipe != NULL) {
+		err = usbd_abort_pipe(sc->sc_intr_pipe);
+       		if (err)
+			device_printf(sc->sc_ucom.sc_dev, "abort interrupt pipe failed: %s\n",
+			    usbd_errstr(err));
+		err = usbd_close_pipe(sc->sc_intr_pipe);
+		if (err)
+			device_printf(sc->sc_ucom.sc_dev, "close interrupt pipe failed: %s\n",
+			    usbd_errstr(err));
+		free(sc->sc_intr_buf, M_USBDEV);
+		sc->sc_intr_pipe = NULL;
+	}
+
+}
+
+void
+umsm_intr(usbd_xfer_handle xfer, usbd_private_handle priv,
+	usbd_status status)
+{
+	struct umsm_softc *sc = priv;
+	u_char *buf;
+
+	buf = sc->sc_intr_buf;
+	if (sc->sc_ucom.sc_dying)
+		return;
+
+	if (status != USBD_NORMAL_COMPLETION) {
+		if (status == USBD_NOT_STARTED || status == USBD_CANCELLED)
+			return;
+
+		device_printf(sc->sc_ucom.sc_dev, "umsm_intr: abnormal status: %s\n",
+			usbd_errstr(status));
+		usbd_clear_endpoint_stall_async(sc->sc_intr_pipe);
+		return;
+	}
+
+	/* XXX */
+	sc->sc_lsr = buf[2];
+	sc->sc_msr = buf[3];
+
+	ucom_status_change((struct ucom_softc *)&sc->sc_ucom);
+}
+
+void
+umsm_get_status(void *addr, int portno, u_char *lsr, u_char *msr)
+{
+	struct umsm_softc *sc = addr;
+
+	DPRINTF(("umsm_get_status\n"));
+
+	if (lsr != NULL)
+		*lsr = sc->sc_lsr;
+	if (msr != NULL)
+		*msr = sc->sc_msr;
+}
Index: sys/dev/usb/usbdevs
===================================================================
RCS file: /home/ncvs/src/sys/dev/usb/usbdevs,v
retrieving revision 1.328.2.9
diff -u -r1.328.2.9 usbdevs
--- sys/dev/usb/usbdevs	25 Apr 2008 16:40:18 -0000	1.328.2.9
+++ sys/dev/usb/usbdevs	10 May 2008 16:55:31 -0000
@@ -827,6 +827,8 @@
 
 /* AnyData products */
 product ANYDATA ADU_E100X	0x6501	CDMA 2000 1xRTT/EV-DO USB Modem
+product ANYDATA A2502          0x6202  NTT DoCoMo A2502
+product ANYDATA ADU_500A       0x6502  ADU-500A
 
 /* AOX, Inc. products */
 product AOX USB101		0x0008	Ethernet
@@ -1081,6 +1083,7 @@
 product DELL PORT		0x0058	Port Replicator
 product DELL BC02		0x8000	BC02 Bluetooth USB Adapter
 product DELL TM350		0x8103	TrueMobile 350 Bluetooth USB Adapter
+product DELL W5500             	0x8115  W5500 HSDPA
 
 /* Delorme Paublishing products */
 product DELORME EARTHMATE	0x0100	Earthmate GPS
@@ -1388,6 +1391,7 @@
 
 /* HUAWEI products */
 product HUAWEI MOBILE		0x1001	Huawei Mobile
+product HUAWEI E220            	0x1003  HUAWEI Mobile E220
 
 /* HUAWEI 3com products */
 product HUAWEI3COM WUB320G	0x0009	Aolynk WUB320g
@@ -1779,6 +1783,10 @@
 product NOVATEL U720		0x2110	Merlin U720
 product NOVATEL U727		0x4100	Merlin U727 CDMA
 product NOVATEL2 FLEXPACKGPS	0x0100	NovAtel FlexPack GPS receiver
+product NOVATEL EXPRESSCARD    	0x1100  ExpressCard 3G
+product NOVATEL S720           	0x1130  S720
+product NOVATEL ES620          	0x2100  ES620 CDMA
+product NOVATEL XU870          	0x1430  XU870
 
 /* Merlin products */
 product	MERLIN V620		0x1110	Merlin V620
@@ -1929,6 +1937,8 @@
 product QUALCOMM2 RWT_FCT	0x3100	RWT FCT-CDMA 2000 1xRTT modem
 product QUALCOMM2 CDMA_MSM	0x3196	CDMA Technologies MSM modem
 product QUALCOMMINC CDMA_MSM	0x0001	CDMA Technologies MSM modem
+product QUALCOMM MSM_DRIVER    	0x1000  MSM driver
+product QUALCOMM MSM_HSDPA     	0x6613  HSDPA MSM
 
 /* Qtronix products */
 product QTRONIX 980N		0x2011	Scorpion-980N keyboard
@@ -2041,6 +2051,15 @@
 product SIERRA AIRCARD580	0x0112	Sierra Wireless AirCard 580
 product SIERRA MC5720		0x0218	MC5720 Wireless Modem
 product SIERRA AC875U		0x6812	AC875U HSDPA USB Modem
+product SIERRA EM5625          	0x0017  EM5625
+product SIERRA MC5720_2         0x0018  MC5720
+product SIERRA AIRCARD_595      0x0019  AirCard 595
+product SIERRA MC5725          	0x0020  MC5725
+product SIERRA MC8755_2         0x6802  MC8755
+product SIERRA MC8765          	0x6803  MC8765
+product SIERRA MC8755          	0x6804  MC8755 HSDPA
+product SIERRA MC8755_3         0x6813  MC8755 HSDPA
+product SIERRA AIRCARD_875      0x6820  Aircard 875 HSDPA
 
 /* Sigmatel products */
 product SIGMATEL I_BEAD100	0x8008	i-Bead 100 MP3 Player
