Index: contrib/pf/pfctl/parse.y
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/parse.y,v
retrieving revision 1.6
diff -u -r1.6 parse.y
--- contrib/pf/pfctl/parse.y	27 Sep 2011 07:47:30 -0000	1.6
+++ contrib/pf/pfctl/parse.y	27 Sep 2011 14:04:50 -0000
@@ -237,6 +237,7 @@
 	int			 fragment;
 	int			 allowopts;
 	char			*label;
+	char 			*schedule;
 	struct node_qassign	 queues;
 	u_int16_t		 divert;
 	char			*tag;
@@ -346,6 +347,7 @@
 int	 check_rulestate(int);
 int	 getservice(char *);
 int	 rule_label(struct pf_rule *, char *);
+int	 rule_schedule(struct pf_rule *, char *);
 
 void	 mv_rules(struct pf_ruleset *, struct pf_ruleset *);
 void	 decide_address_family(struct node_host *, sa_family_t *);
@@ -448,7 +450,7 @@
 %token	PASS BLOCK SCRUB RETURN IN OS OUT LOG QUICK ON FROM TO FLAGS
 %token	RETURNRST RETURNICMP RETURNICMP6 PROTO INET INET6 ALL ANY ICMPTYPE
 %token	ICMP6TYPE CODE KEEP MODULATE STATE PORT RDR NAT BINAT ARROW NODF
-%token	MINTTL ERROR ALLOWOPTS FASTROUTE FILENAME ROUTETO DUPTO REPLYTO NO LABEL
+%token	MINTTL ERROR ALLOWOPTS FASTROUTE FILENAME ROUTETO DUPTO REPLYTO NO LABEL SCHEDULE
 %token	NOROUTE URPFFAILED FRAGMENT USER GROUP MAXMSS MAXIMUM TTL TOS DSCP DROP TABLE
 %token	REASSEMBLE FRAGDROP FRAGCROP ANCHOR NATANCHOR RDRANCHOR BINATANCHOR
 %token	SET OPTIMIZATION TIMEOUT LIMIT LOGINTERFACE BLOCKPOLICY RANDOMID
@@ -493,7 +495,7 @@
 %type	<v.gid>			gids gid_list gid_item
 %type	<v.route>		route
 %type	<v.redirection>		redirection redirpool
-%type	<v.string>		label stringall tag anchorname
+%type	<v.string>		label schedule stringall tag anchorname
 %type	<v.string>		string varstring numberstring
 %type	<v.number>		divert
 %type	<v.keep_state>		keep
@@ -1983,6 +1985,9 @@
 			if (rule_label(&r, $9.label))
 				YYERROR;
 			free($9.label);
+			if  (rule_schedule(&r, $9.schedule))
+				YYERROR;
+			free($9.schedule);
 			r.flags = $9.flags.b1;
 			r.flagset = $9.flags.b2;
 			if (($9.flags.b1 & $9.flags.b2) != $9.flags.b1) {
@@ -2455,6 +2460,13 @@
 			}
 			filter_opts.label = $1;
 		}
+		| schedule {
+			if (filter_opts.schedule) {
+				yyerror("schedule label cannot be redefined");
+				YYERROR;
+			}
+			filter_opts.schedule = $1;
+		}
 		| qname	{
 			if (filter_opts.queues.qname) {
 				yyerror("queue cannot be redefined");
@@ -3837,6 +3849,11 @@
 		}
 		;
 
+schedule	: SCHEDULE STRING 		{
+			$$ = $2;
+		}
+		;
+
 qname		: QUEUE STRING				{
 			$$.qname = $2;
 			$$.pqname = NULL;
@@ -5241,6 +5258,7 @@
 	int			 added = 0, error = 0;
 	char			 ifname[IF_NAMESIZE];
 	char			 label[PF_RULE_LABEL_SIZE];
+	char			 schedule[PF_RULE_LABEL_SIZE];
 	char			 tagname[PF_TAG_NAME_SIZE];
 	char			 match_tagname[PF_TAG_NAME_SIZE];
 	struct pf_pooladdr	*pa;
@@ -5249,6 +5267,8 @@
 
 	if (strlcpy(label, r->label, sizeof(label)) >= sizeof(label))
 		errx(1, "expand_rule: strlcpy");
+	if (strlcpy(schedule, r->schedule, sizeof(schedule)) > sizeof(schedule))
+		errx(1, "expand_rule: strlcpy");
 	if (strlcpy(tagname, r->tagname, sizeof(tagname)) >= sizeof(tagname))
 		errx(1, "expand_rule: strlcpy");
 	if (strlcpy(match_tagname, r->match_tagname, sizeof(match_tagname)) >=
@@ -5300,6 +5320,9 @@
 		if (strlcpy(r->label, label, sizeof(r->label)) >=
 		    sizeof(r->label))
 			errx(1, "expand_rule: strlcpy");
+		if (strlcpy(r->schedule, schedule, sizeof(r->schedule)) >=
+			sizeof(r->schedule))
+			errx(1, "expand_rule: strlcpy");
 		if (strlcpy(r->tagname, tagname, sizeof(r->tagname)) >=
 		    sizeof(r->tagname))
 			errx(1, "expand_rule: strlcpy");
@@ -5308,6 +5331,8 @@
 			errx(1, "expand_rule: strlcpy");
 		expand_label(r->label, PF_RULE_LABEL_SIZE, r->ifname, r->af,
 		    src_host, src_port, dst_host, dst_port, proto->proto);
+		expand_label(r->schedule, PF_RULE_LABEL_SIZE, r->ifname, r->af,
+			src_host, src_port, dst_host, dst_port, proto->proto);
 		expand_label(r->tagname, PF_TAG_NAME_SIZE, r->ifname, r->af,
 		    src_host, src_port, dst_host, dst_port, proto->proto);
 		expand_label(r->match_tagname, PF_TAG_NAME_SIZE, r->ifname,
@@ -5577,6 +5602,7 @@
 		{ "rtable",		RTABLE},
 		{ "rule",		RULE},
 		{ "ruleset-optimization",	RULESET_OPTIMIZATION},
+		{ "schedule",		SCHEDULE},
 		{ "scrub",		SCRUB},
 		{ "set",		SET},
 		{ "set-tos",		SETTOS},
@@ -6208,6 +6234,20 @@
 	return (0);
 }
 
+int 
+rule_schedule(struct pf_rule *r, char *s)
+{
+	if (s) {
+		if (strlcpy(r->schedule, s, sizeof(r->label)) >=
+		   sizeof(r->label)) {
+			yyerror("rule schedule label too long (max %d chars)",
+				sizeof(r->label)-1);
+			return (-1);
+		}
+	}
+	return (0);
+}
+
 u_int16_t
 parseicmpspec(char *w, sa_family_t af)
 {
Index: contrib/pf/pfctl/pfctl.c
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/pfctl.c,v
retrieving revision 1.2
diff -u -r1.2 pfctl.c
--- contrib/pf/pfctl/pfctl.c	27 Sep 2011 05:24:30 -0000	1.2
+++ contrib/pf/pfctl/pfctl.c	27 Sep 2011 14:05:46 -0000
@@ -79,6 +79,7 @@
 int	 pfctl_label_kill_states(int, const char *, int);
 int	 pfctl_id_kill_states(int, const char *, int);
 int	 pfctl_kill_ifstates(int, const char *, int);
+int      pfctl_kill_schedule(int, const char *, int);
 void	 pfctl_init_options(struct pfctl *);
 int	 pfctl_load_options(struct pfctl *);
 int	 pfctl_load_limit(struct pfctl *, unsigned int, unsigned int);
@@ -117,6 +118,7 @@
 char		*pf_device = "/dev/pf";
 char		*ifaceopt;
 char		*tableopt;
+char		*schedule = NULL;
 const char	*tblcmdopt;
 int		 src_node_killers;
 char		*src_node_kill[2];
@@ -551,6 +553,25 @@
 }
 
 int
+pfctl_kill_schedule(int dev, const char *sched, int opts)
+{
+	struct pfioc_schedule_kill psk;
+
+       memset(&psk, 0, sizeof(psk));
+       if (sched != NULL && strlcpy(psk.schedule, sched,
+           sizeof(psk.schedule)) >= sizeof(psk.schedule))
+               errx(1, "invalid schedule label: %s", sched);
+
+	if (ioctl(dev, DIOCKILLSCHEDULE, &psk))
+		err(1, "DIOCKILLSCHEDULE");
+
+	if ((opts & PF_OPT_QUIET) == 0)
+		fprintf(stderr, "killed %d states from %s schedule label\n",
+			psk.numberkilled, sched);
+       return (0);
+}
+
+int
 pfctl_kill_ifstates(int dev, const char *iface, int opts)
 {
 	struct pfioc_state_kill psk;
@@ -2132,7 +2153,7 @@
 		usage();
 
 	while ((ch = getopt(argc, argv,
-	    "a:AdD:eqf:F:ghi:b:k:K:mnNOo:Pp:rRs:t:T:vx:z")) != -1) {
+	    "a:AdD:eqf:F:ghi:b:k:K:mnNOo:Pp:rRs:t:T:vx:y:z")) != -1) {
 		switch (ch) {
 		case 'a':
 			anchoropt = optarg;
@@ -2256,6 +2277,12 @@
 				opts |= PF_OPT_VERBOSE2;
 			opts |= PF_OPT_VERBOSE;
 			break;
+		case 'y':
+			if (schedule != NULL && strlen(schedule) > 64)
+				errx(1, "Schedule label cannot be more than 64 characters\n");
+			schedule = optarg;
+			mode = O_RDWR;
+			break;
 		case 'x':
 			debugopt = pfctl_lookup_option(optarg, debugopt_list);
 			if (debugopt == NULL) {
@@ -2466,6 +2493,9 @@
 
 	if (if_kills)
 		pfctl_kill_ifstates(dev, ifaceopt, opts);
+	
+	if (schedule)
+		pfctl_kill_schedule(dev, schedule, opts);
 
 	if (tblcmdopt != NULL) {
 		error = pfctl_command_tables(argc, argv, tableopt,
Index: sys/contrib/pf/net/pf_ioctl.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf_ioctl.c,v
retrieving revision 1.3
diff -u -r1.3 pf_ioctl.c
--- sys/contrib/pf/net/pf_ioctl.c	27 Sep 2011 07:32:16 -0000	1.3
+++ sys/contrib/pf/net/pf_ioctl.c	27 Sep 2011 14:04:17 -0000
@@ -2344,6 +2344,29 @@
                break;
        }
 
+	case DIOCKILLSCHEDULE: {
+               struct pf_state         *state, *nexts;
+		struct pfioc_schedule_kill *psk = (struct pfioc_schedule_kill *)addr;
+               int                      killed = 0;
+                    
+               for (state = RB_MIN(pf_state_tree_id, &tree_id); state;
+                   state = nexts) {
+                       nexts = RB_NEXT(pf_state_tree_id, &tree_id, state);
+                                
+                       if (!strcmp(psk->schedule, state->rule.ptr->schedule)) {
+#if NPFSYNC > 0
+                               /* send immediate delete of state */
+                               pfsync_delete_state(state);
+                               state->sync_flags |= PFSTATE_NOSYNC;
+#endif
+                               pf_unlink_state(state);
+                               killed++;
+                       }
+               }
+               psk->numberkilled = killed;
+               break;
+       }
+
 	case DIOCADDSTATE: {
 		struct pfioc_state	*ps = (struct pfioc_state *)addr;
 		struct pfsync_state	*sp = &ps->state;
Index: sys/contrib/pf/net/pfvar.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pfvar.h,v
retrieving revision 1.7
diff -u -r1.7 pfvar.h
--- sys/contrib/pf/net/pfvar.h	27 Sep 2011 07:32:16 -0000	1.7
+++ sys/contrib/pf/net/pfvar.h	27 Sep 2011 14:04:17 -0000
@@ -616,6 +616,7 @@
 	union pf_rule_ptr	 skip[PF_SKIP_COUNT];
 #define PF_RULE_LABEL_SIZE	 64
 	char			 label[PF_RULE_LABEL_SIZE];
+	char                     schedule[PF_RULE_LABEL_SIZE];
 #define PF_QNAME_SIZE		 64
 	char			 ifname[IFNAMSIZ];
 	char			 qname[PF_QNAME_SIZE];
@@ -1661,6 +1662,11 @@
 	u_int			psk_killed;
 };
 
+struct pfioc_schedule_kill {
+	int		numberkilled;
+	char		schedule[PF_RULE_LABEL_SIZE];
+};
+
 struct pfioc_states {
 	int	ps_len;
 	union {
@@ -1742,6 +1748,7 @@
 #define DIOCKILLIFSTATES  	_IOWR('D', 93, struct pfioc_state_kill)
 #define DIOCGETNAMEDALTQ        _IOWR('D', 94, struct pfioc_ruleset)
 #define DIOCGETNAMEDTAG         _IOR('D', 95, u_int32_t)
+#define DIOCKILLSCHEDULE	_IOWR('D', 96, struct pfioc_schedule_kill)
 
 struct pfioc_table {
 	struct pfr_table	 pfrio_table;
