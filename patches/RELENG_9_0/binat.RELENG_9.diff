Index: contrib/pf/pfctl/parse.y
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/parse.y,v
retrieving revision 1.5
diff -u -r1.5 parse.y
--- contrib/pf/pfctl/parse.y	27 Sep 2011 07:30:40 -0000	1.5
+++ contrib/pf/pfctl/parse.y	27 Sep 2011 07:47:00 -0000
@@ -4212,7 +4212,7 @@
 		}
 		;
 
-binatrule	: no BINAT natpasslog interface af proto FROM host toipspec tag
+binatrule	: no BINAT natpasslog interface af proto FROM ipportspec TO ipportspec tag
 		    tagged rtable redirection
 		{
 			struct pf_rule		binat;
@@ -4220,7 +4220,7 @@
 
 			if (check_rulestate(PFCTL_STATE_NAT))
 				YYERROR;
-			if (disallow_urpf_failed($9, "\"urpf-failed\" is not "
+			if (disallow_urpf_failed($10.host, "\"urpf-failed\" is not "
 			    "permitted as a binat destination"))
 				YYERROR;
 
@@ -4238,13 +4238,13 @@
 			binat.log = $3.b2;
 			binat.logif = $3.w2;
 			binat.af = $5;
-			if (!binat.af && $8 != NULL && $8->af)
-				binat.af = $8->af;
-			if (!binat.af && $9 != NULL && $9->af)
-				binat.af = $9->af;
+			if (!binat.af && $8 != NULL && $8.host->af)
+				binat.af = $8.host->af;
+			if (!binat.af && $10 != NULL && $10.host->af)
+				binat.af = $10.host->af;
 
-			if (!binat.af && $13 != NULL && $13->host)
-				binat.af = $13->host->af;
+			if (!binat.af && $14 != NULL && $14->host)
+				binat.af = $14->host->af;
 			if (!binat.af) {
 				yyerror("address family (inet/inet6) "
 				    "undefined");
@@ -4258,106 +4258,117 @@
 				free($4);
 			}
 
-			if ($10 != NULL)
-				if (strlcpy(binat.tagname, $10,
+			if ($11 != NULL)
+				if (strlcpy(binat.tagname, $11,
 				    PF_TAG_NAME_SIZE) >= PF_TAG_NAME_SIZE) {
 					yyerror("tag too long, max %u chars",
 					    PF_TAG_NAME_SIZE - 1);
 					YYERROR;
 				}
-			if ($11.name)
-				if (strlcpy(binat.match_tagname, $11.name,
+			if ($12.name)
+				if (strlcpy(binat.match_tagname, $12.name,
 				    PF_TAG_NAME_SIZE) >= PF_TAG_NAME_SIZE) {
 					yyerror("tag too long, max %u chars",
 					    PF_TAG_NAME_SIZE - 1);
 					YYERROR;
 				}
-			binat.match_tag_not = $11.neg;
-			binat.rtableid = $12;
+			binat.match_tag_not = $12.neg;
+			binat.rtableid = $13;
 
 			if ($6 != NULL) {
 				binat.proto = $6->proto;
 				free($6);
 			}
 
-			if ($8 != NULL && disallow_table($8, "invalid use of "
+			if ($8.host != NULL && disallow_table($8.host, "invalid use of "
 			    "table <%s> as the source address of a binat rule"))
 				YYERROR;
-			if ($8 != NULL && disallow_alias($8, "invalid use of "
+			if ($8.host != NULL && disallow_alias($8.host, "invalid use of "
 			    "interface (%s) as the source address of a binat "
 			    "rule"))
 				YYERROR;
-			if ($13 != NULL && $13->host != NULL && disallow_table(
-			    $13->host, "invalid use of table <%s> as the "
+			if ($14 != NULL && $14->host != NULL && disallow_table(
+			    $14->host, "invalid use of table <%s> as the "
 			    "redirect address of a binat rule"))
 				YYERROR;
-			if ($13 != NULL && $13->host != NULL && disallow_alias(
-			    $13->host, "invalid use of interface (%s) as the "
+			if ($14 != NULL && $14->host != NULL && disallow_alias(
+			    $14->host, "invalid use of interface (%s) as the "
 			    "redirect address of a binat rule"))
 				YYERROR;
 
-			if ($8 != NULL) {
-				if ($8->next) {
+			if ($8.host != NULL) {
+				if ($8.host->next) {
 					yyerror("multiple binat ip addresses");
 					YYERROR;
 				}
-				if ($8->addr.type == PF_ADDR_DYNIFTL)
-					$8->af = binat.af;
-				if ($8->af != binat.af) {
+				if ($8host.->addr.type == PF_ADDR_DYNIFTL)
+					$8.host->af = binat.af;
+				if ($8.host->af != binat.af) {
 					yyerror("binat ip versions must match");
 					YYERROR;
 				}
-				if (check_netmask($8, binat.af))
+				if (check_netmask($8.host, binat.af))
 					YYERROR;
-				memcpy(&binat.src.addr, &$8->addr,
+				memcpy(&binat.src.addr, &$8.host->addr,
 				    sizeof(binat.src.addr));
-				free($8);
+				free($8.host);
 			}
-			if ($9 != NULL) {
-				if ($9->next) {
+			if ($8.port != NULL) {
+				binat.src.port[0] = $8.port->port[0];
+				binat.src.port[1] = $8.port->port[1];
+				binat.src.port_op = $8.port->op;
+				free($8.port);
+			}
+			if ($10.host != NULL) {
+				if ($10.host->next) {
 					yyerror("multiple binat ip addresses");
 					YYERROR;
 				}
-				if ($9->af != binat.af && $9->af) {
+				if ($10.host->af != binat.af && $10.host->af) {
 					yyerror("binat ip versions must match");
 					YYERROR;
 				}
-				if (check_netmask($9, binat.af))
+				if (check_netmask($10.host, binat.af))
 					YYERROR;
-				memcpy(&binat.dst.addr, &$9->addr,
+				memcpy(&binat.dst.addr, &$10.host->addr,
 				    sizeof(binat.dst.addr));
-				binat.dst.neg = $9->not;
-				free($9);
+				binat.dst.neg = $10.host->not;
+				free($10.host);
+			}
+			if ($10.port != NULL) {
+				binat.dst.port[0] = $10.port->port[0];
+				binat.dst.port[1] = $10.port->port[1];
+				binat.dst.port_op = $10.port->op;
+				free($10.port);
 			}
-
 			if (binat.action == PF_NOBINAT) {
-				if ($13 != NULL) {
+				if ($14 != NULL) {
 					yyerror("'no binat' rule does not need"
 					    " '->'");
 					YYERROR;
 				}
 			} else {
-				if ($13 == NULL || $13->host == NULL) {
+				if ($14 == NULL || $14->host == NULL) {
 					yyerror("'binat' rule requires"
 					    " '-> address'");
 					YYERROR;
 				}
 
-				remove_invalid_hosts(&$13->host, &binat.af);
-				if (invalid_redirect($13->host, binat.af))
+				remove_invalid_hosts(&$14->host, &binat.af);
+				if (invalid_redirect($14->host, binat.af))
 					YYERROR;
-				if ($13->host->next != NULL) {
+				if ($14->host->next != NULL) {
 					yyerror("binat rule must redirect to "
 					    "a single address");
 					YYERROR;
 				}
-				if (check_netmask($13->host, binat.af))
+				if (check_netmask($14->host, binat.af))
 					YYERROR;
 
 				if (!PF_AZERO(&binat.src.addr.v.a.mask,
 				    binat.af) &&
 				    !PF_AEQ(&binat.src.addr.v.a.mask,
-				    &$13->host->addr.v.a.mask, binat.af)) {
+				    &$14->host->addr.v.a.mask, binat.af)) {
 					yyerror("'binat' source mask and "
 					    "redirect mask must be the same");
 					YYERROR;
@@ -4367,12 +4378,12 @@
 				pa = calloc(1, sizeof(struct pf_pooladdr));
 				if (pa == NULL)
 					err(1, "binat: calloc");
-				pa->addr = $13->host->addr;
+				pa->addr = $14->host->addr;
 				pa->ifname[0] = 0;
 				TAILQ_INSERT_TAIL(&binat.rpool.list,
 				    pa, entries);
 
-				free($13);
+				free($14);
 			}
 
 			pfctl_add_rule(pf, &binat, "");
