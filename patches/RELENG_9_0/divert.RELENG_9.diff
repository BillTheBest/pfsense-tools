Index: contrib/pf/pfctl/parse.y
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/parse.y,v
retrieving revision 1.3
diff -u -r1.3 parse.y
--- contrib/pf/pfctl/parse.y	17 Jan 2012 11:44:42 -0000	1.3
+++ contrib/pf/pfctl/parse.y	17 Jan 2012 13:46:52 -0000
@@ -157,6 +157,7 @@
 enum	{ PF_STATE_OPT_MAX, PF_STATE_OPT_NOSYNC, PF_STATE_OPT_SRCTRACK,
 	    PF_STATE_OPT_MAX_SRC_STATES, PF_STATE_OPT_MAX_SRC_CONN,
 	    PF_STATE_OPT_MAX_SRC_CONN_RATE, PF_STATE_OPT_MAX_SRC_NODES,
+	    PF_STATE_OPT_MAX_PACKETS, 
 	    PF_STATE_OPT_OVERLOAD, PF_STATE_OPT_STATELOCK,
 	    PF_STATE_OPT_TIMEOUT, PF_STATE_OPT_SLOPPY, 
 	    PF_STATE_OPT_PFLOW };
@@ -169,6 +170,7 @@
 		u_int32_t	 max_states;
 		u_int32_t	 max_src_states;
 		u_int32_t	 max_src_conn;
+		u_int32_t	 max_packets;
 		struct {
 			u_int32_t	limit;
 			u_int32_t	seconds;
@@ -236,6 +238,7 @@
 	int			 allowopts;
 	char			*label;
 	struct node_qassign	 queues;
+	u_int16_t		 divert;
 	char			*tag;
 	char			*match_tag;
 	u_int8_t		 match_tag_not;
@@ -243,10 +246,12 @@
 	u_int32_t                pdnpipe;
 	u_int32_t                free_flags;
 	u_int			 rtableid;
+#if 0
 	struct {
 		struct node_host	*addr;
 		u_int16_t		port;
 	}			 divert;
+#endif
 } filter_opts;
 
 struct antispoof_opts {
@@ -458,8 +463,8 @@
 %token	LOAD RULESET_OPTIMIZATION
 %token	STICKYADDRESS MAXSRCSTATES MAXSRCNODES SOURCETRACK GLOBAL RULE
 %token	MAXSRCCONN MAXSRCCONNRATE OVERLOAD FLUSH SLOPPY PFLOW
-%token	TAGGED TAG IFBOUND FLOATING STATEPOLICY STATEDEFAULTS ROUTE SETTOS
-%token	DIVERTTO DIVERTREPLY
+%token	TAGGED TAG IFBOUND FLOATING STATEPOLICY STATEDEFAULTS ROUTE SETTOS MAXPCKT
+%token	DIVERTTO DIVERTREPLY DIVERT
 %token	<v.string>		STRING
 %token	<v.number>		NUMBER
 %token	<v.i>			PORTBINARY
@@ -492,6 +497,7 @@
 %type	<v.redirection>		redirection redirpool
 %type	<v.string>		label stringall tag anchorname
 %type	<v.string>		string varstring numberstring
+%type	<v.number>		divert
 %type	<v.keep_state>		keep
 %type	<v.state_opt>		state_opt_spec state_opt_list state_opt_item
 %type	<v.logquick>		logquick quick log logopts logopt
@@ -1959,6 +1965,8 @@
 			r.rtableid = $9.rtableid;
 
 			r.af = $6;
+			if ($9.divert)
+				r.divert = $9.divert;
 			if ($9.tag)
 				if (strlcpy(r.tagname, $9.tag,
 				    PF_TAG_NAME_SIZE) >= PF_TAG_NAME_SIZE) {
@@ -2047,6 +2055,14 @@
 					}
 					r.rule_flag |= PFRULE_NOSYNC;
 					break;
+				case PF_STATE_OPT_MAX_PACKETS:
+					if (o->data.max_packets == 0) {
+						yyerror("max_packets must be"
+							"greater than 0");
+						YYERROR;
+					}
+					r.spare1 = o->data.max_packets;
+					break;
 				case PF_STATE_OPT_SRCTRACK:
 					if (srctrack) {
 						yyerror("state option "
@@ -2313,6 +2329,7 @@
 				}
 				free($9.queues.pqname);
 			}
+#if 0
 #ifdef __FreeBSD__
 			r.divert.port = $9.divert.port;
 #else
@@ -2341,6 +2358,7 @@
 				}
 			}
 #endif
+#endif
 
 			if ($9.dnpipe) {
                                 r.dnpipe = $9.dnpipe;
@@ -2474,6 +2492,9 @@
 			filter_opts.dnpipe = $3;
 			filter_opts.free_flags |= PFRULE_DN_IS_QUEUE;
 		}
+		| DIVERT number				{
+			filter_opts.divert = $2;
+		}
 		| TAG string				{
 			filter_opts.tag = $2;
 		}
@@ -2501,7 +2522,7 @@
 			filter_opts.rtableid = $2;
 		}
 		| DIVERTTO portplain {
-#ifdef __FreeBSD__
+#ifndef __FreeBSD__
 			filter_opts.divert.port = $2.a;
 			if (!filter_opts.divert.port) {
 				yyerror("invalid divert port: %u", ntohs($2.a));
@@ -2510,6 +2531,7 @@
 #endif
 		}
 		| DIVERTTO STRING PORT portplain {
+#if 0
 #ifndef __FreeBSD__
 			if ((filter_opts.divert.addr = host($2)) == NULL) {
 				yyerror("could not parse divert address: %s",
@@ -2526,6 +2548,7 @@
 				yyerror("invalid divert port: %u", ntohs($4.a));
 				YYERROR;
 			}
+#endif
 		}
 		| DIVERTREPLY {
 #ifdef __FreeBSD__
@@ -3681,6 +3704,15 @@
 			$$->next = NULL;
 			$$->tail = $$;
 		}
+		| MAXPCKT number                        {
+			$$ = calloc(1, sizeof(struct node_state_opt));
+			if ($$ == NULL)
+			err(1, "state_opt_item: calloc");
+			$$->type = PF_STATE_OPT_MAX_PACKETS;
+			$$->data.max_src_states = $2;
+			$$->next = NULL;
+			$$->tail = $$;
+		}
 		| MAXSRCCONN NUMBER			{
 			if ($2 < 0 || $2 > UINT_MAX) {
 				yyerror("only positive values permitted");
@@ -4353,6 +4385,10 @@
 		}
 		;
 
+divert		: /* empty */		{ $$ = 0; }
+		| DIVERT number		{ $$ = $2;   }
+		;
+
 tag		: /* empty */		{ $$ = NULL; }
 		| TAG STRING		{ $$ = $2; }
 		;
@@ -5448,8 +5484,11 @@
 		{ "code",		CODE},
 		{ "crop",		FRAGCROP},
 		{ "debug",		DEBUG},
+		{ "divert",		DIVERT},
+#ifdef __FreeBSD__
 		{ "divert-reply",	DIVERTREPLY},
 		{ "divert-to",		DIVERTTO},
+#endif
 		{ "dnpipe",             DNPIPE},
 		{ "dnqueue",            DNQUEUE},
 		{ "drop",		DROP},
@@ -5487,6 +5526,7 @@
 		{ "loginterface",	LOGINTERFACE},
 		{ "max",		MAXIMUM},
 		{ "max-mss",		MAXMSS},
+		{ "max-packets",	MAXPCKT},
 		{ "max-src-conn",	MAXSRCCONN},
 		{ "max-src-conn-rate",	MAXSRCCONNRATE},
 		{ "max-src-nodes",	MAXSRCNODES},
Index: contrib/pf/pfctl/pfctl_parser.c
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/pfctl_parser.c,v
retrieving revision 1.3
diff -u -r1.3 pfctl_parser.c
--- contrib/pf/pfctl/pfctl_parser.c	17 Jan 2012 11:44:42 -0000	1.3
+++ contrib/pf/pfctl/pfctl_parser.c	17 Jan 2012 13:41:45 -0000
@@ -922,6 +922,12 @@
 			printf("max-src-conn %u", r->max_src_conn);
 			opts = 0;
 		}
+		if (r->spare1) {
+                        if (!opts)
+                                printf(", ");
+                        printf("max-packets %u", r->spare1);
+                        opts = 0;
+		}
 		if (r->max_src_conn_rate.limit) {
 			if (!opts)
 				printf(", ");
@@ -1019,6 +1025,8 @@
 		printf(" queue(%s, %s)", r->qname, r->pqname);
 	else if (r->qname[0])
 		printf(" queue %s", r->qname);
+	if (r->divert)
+		printf(" divert %u", r->divert);
 	if (r->tagname[0])
 		printf(" tag %s", r->tagname);
 	if (r->match_tagname[0]) {
@@ -1028,6 +1036,7 @@
 	}
 	if (r->rtableid != -1)
 		printf(" rtable %u", r->rtableid);
+#if 0
 	if (r->divert.port) {
 #ifdef __FreeBSD__
 		printf(" divert-to %u", ntohs(r->divert.port));
@@ -1048,6 +1057,7 @@
 		}
 #endif
 	}
+#endif
 	if (!anchor_call[0] && (r->action == PF_NAT ||
 	    r->action == PF_BINAT || r->action == PF_RDR)) {
 		printf(" -> ");
Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf.c,v
retrieving revision 1.3
diff -u -r1.3 pf.c
--- sys/contrib/pf/net/pf.c	17 Jan 2012 11:44:42 -0000	1.3
+++ sys/contrib/pf/net/pf.c	17 Jan 2012 13:49:26 -0000
@@ -158,6 +158,7 @@
 #include <netinet/ip_fw.h>
 #include <netinet/ipfw/ip_fw_private.h>
 #include <netinet/ip_dummynet.h>
+#include <netinet/ip_divert.h>
 
 #include <netinet6/ip6_var.h>
 #include <netinet6/in6_pcb.h>
@@ -508,6 +509,14 @@
 	} \
 } while(0)
 
+#define	PF_DIVERT_MAXPACKETS_REACHED()				\
+do {                                                            \
+	if (r->spare1 &&                                        \
+	    s->packets[dir == PF_OUT] > r->spare1)              \
+		/* fake that divert already happened */         \
+		pd.pf_mtag->flags |= PF_PACKET_LOOPED;          \
+} while(0)
+
 #define	STATE_LOOKUP(i, k, d, s, m, pt)					\
 	do {								\
 		s = pf_find_state(i, k, d, m, pt);			\
@@ -6775,6 +6784,8 @@
 #ifdef __FreeBSD__
 	struct m_tag *dn_tag;
 	struct ip_fw_args	 dnflow;
+	u_int16_t		 divertcookie = 0;
+        u_int8_t		 divflags = 0;
 	int			 loopedfrom = 0;
 
 	PF_LOCK();
@@ -6852,10 +6863,13 @@
 	if ((ip_divert_ptr != NULL || ip_dn_io_ptr != NULL) &&
 	    ((ipfwtag = m_tag_locate(m, MTAG_IPFW_RULE, 0, NULL)) != NULL)) {
 		struct ipfw_rule_ref *rr = (struct ipfw_rule_ref *)(ipfwtag+1);
+		pd.pf_mtag->flags |= PF_PACKET_LOOPED;
 		if (rr->info & IPFW_IS_DUMMYNET)
 			loopedfrom = 1;
 		if (rr->info & IPFW_IS_DIVERT && rr->rulenum == 0) {
-			pd.pf_mtag->flags |= PF_PACKET_LOOPED;
+			divertcookie = rr->rulenum;
+			divflags = (u_int8_t)(divertcookie >> 8);
+			divertcookie &= ~PFSTATE_DIVERT_MASK;
 		}
 		if (pd.pf_mtag->flags & PF_FASTFWD_OURS_PRESENT) {
 			m->m_flags |= M_FASTFWD_OURS;
@@ -7070,6 +7084,19 @@
 		    ("pf: dropping packet with ip options\n"));
 	}
 
+#ifdef __FreeBSD__
+        if (s) {
+                PF_DIVERT_MAXPACKETS_REACHED();
+
+                if (divflags) {
+                        s->divert_cookie = divertcookie;
+                        s->local_flags |= divflags;
+                } else {
+                        divertcookie = s->divert_cookie;
+                        divflags = s->local_flags;
+                }
+        }
+#endif
 	if ((s && s->tag) || r->rtableid)
 #ifdef __FreeBSD__
 		pf_tag_packet(m, s ? s->tag : 0, r->rtableid, pd.pf_mtag);
@@ -7108,9 +7135,62 @@
 #endif /* ALTQ */
 
 #ifdef __FreeBSD__
-       	if (r->dnpipe && ip_dn_io_ptr != NULL && loopedfrom != 1) {
+	if (divflags & PFSTATE_DIVERT_TAG)
+		pd.pf_mtag->tag = divertcookie;
+	else if (divflags & PFSTATE_DIVERT_ALTQ)
+		pd.pf_mtag->qid = divertcookie;
+	else if (divflags & PFSTATE_DIVERT_ACTION) {
+		struct pf_rule *dlr;
+		action = PF_DROP;
+		if (s)
+			pf_unlink_state(s);
+		REASON_SET(&reason, PFRES_DIVERT);
+		log = 1;
+		DPFPRINTF(PF_DEBUG_MISC,
+		    ("pf: changing action to with overload from divert.\n"));
+		dlr = r;
+		PFLOG_PACKET(kif, h, m, AF_INET, dir, reason, dlr, a,
+		    ruleset, &pd);
+		PF_UNLOCK();
+		m_freem(*m0);
+                *m0 = NULL;
+		/* NOTE: Fake this to avoid divert giving errors to the application. */
+		return (PF_PASS);
+	}
+
+	if (r->divert && ip_divert_ptr != NULL && !PACKET_LOOPED(pd.pf_mtag)) {
+		if (!r->spare1 ||
+		    (s && s->packets[dir == PF_OUT] <= r->spare1)) {
+
+			dn_tag = m_tag_alloc(MTAG_IPFW_RULE, 0,
+			    sizeof(struct ipfw_rule_ref), M_NOWAIT | M_ZERO);
+			if (dn_tag != NULL) {
+				((struct ipfw_rule_ref *)(dn_tag+1))->info = r->divert;
+				((struct ipfw_rule_ref *)(dn_tag+1))->rulenum = dir;
+
+				m_tag_prepend(m, dn_tag);
 
-                        if (dir != r->direction && r->pdnpipe) {
+				if (s != NULL && s->nat_rule.ptr)
+					PACKET_UNDO_NAT(m, pd, s, dir);
+				PF_UNLOCK();
+			
+				if (m->m_flags & M_FASTFWD_OURS) {
+                                	pd.pf_mtag->flags |= PF_FASTFWD_OURS_PRESENT;
+                                	m->m_flags &= ~M_FASTFWD_OURS;
+                        	}
+
+				ip_divert_ptr(*m0,
+				    dir ==  PF_IN ? DIR_IN : DIR_OUT);
+				*m0 = NULL;
+				return (action);
+			}
+		}
+       	} else if ((r->dnpipe || (divflags & PFSTATE_DIVERT_DNCOOKIE)) &&
+	    ip_dn_io_ptr != NULL && loopedfrom != 1) {
+
+			if (divflags & PFSTATE_DIVERT_DNCOOKIE) {
+				dnflow.rule.info = divertcookie;
+                        } else if (dir != r->direction && r->pdnpipe) {
                                 dnflow.rule.info = r->pdnpipe;
                         } else if (dir == r->direction) {
                                 dnflow.rule.info = r->dnpipe;
@@ -7151,8 +7231,7 @@
                         	*m0 = NULL;
                         	return (action);
 			}
-        } else
-		pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
+        }
 continueprocessing:
 #endif
 
@@ -7167,7 +7246,12 @@
 	    s->nat_rule.ptr->action == PF_BINAT) &&
 	    (ntohl(pd.dst->v4.s_addr) >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET)
 #ifdef __FreeBSD__
-		m->m_flags |= M_SKIP_FIREWALL;
+		{
+			m->m_flags |= M_SKIP_FIREWALL;
+			if (PACKET_LOOPED(pd.pf_mtag) && !loopedfrom)
+				m->m_flags |= M_FASTFWD_OURS;
+		}
+	pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
 #else
 		m->m_pkthdr.pf.flags |= PF_TAG_TRANSLATE_LOCALHOST;
 #endif
Index: sys/contrib/pf/net/pfvar.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pfvar.h,v
retrieving revision 1.3
diff -u -r1.3 pfvar.h
--- sys/contrib/pf/net/pfvar.h	17 Jan 2012 11:44:42 -0000	1.3
+++ sys/contrib/pf/net/pfvar.h	17 Jan 2012 13:25:42 -0000
@@ -720,10 +720,14 @@
 #define PF_FLUSH_GLOBAL		0x02
 	u_int8_t		 flush;
 
+#ifdef __FreeBSD__
+	u_int16_t		divert;
+#else
 	struct {
 		struct pf_addr		addr;
 		u_int16_t		port;
 	}			divert;
+#endif
 };
 
 /* rule flags */
@@ -871,6 +875,11 @@
 	u_int8_t		 pad[2];
 	u_int8_t		 local_flags;
 #define	PFSTATE_EXPIRING 0x01
+#define PFSTATE_DIVERT_ALTQ     0x10
+#define PFSTATE_DIVERT_DNCOOKIE 0x20
+#define PFSTATE_DIVERT_ACTION   0x40
+#define PFSTATE_DIVERT_TAG      0x80
+#define PFSTATE_DIVERT_MASK   0xFF00
 #else
 	u_int8_t		 pad[3];
 #endif
@@ -895,6 +904,7 @@
 	u_int32_t	 	 expire;
 	u_int32_t		 pfsync_time;
 	u_int16_t		 tag;
+	u_int16_t		divert_cookie;
 	u_int8_t		 log;
 	u_int8_t		 state_flags;
 #define	PFSTATE_ALLOWOPTS	0x01
@@ -1351,7 +1361,8 @@
 #define PFRES_MAXSTATES	12		/* State limit */
 #define PFRES_SRCLIMIT	13		/* Source node/conn limit */
 #define PFRES_SYNPROXY	14		/* SYN proxy */
-#define PFRES_MAX	15		/* total+1 */
+#define	PFRES_DIVERT	15		/* Divert override */
+#define PFRES_MAX	16		/* total+1 */
 
 #define PFRES_NAMES { \
 	"match", \
@@ -1369,6 +1380,7 @@
 	"state-limit", \
 	"src-limit", \
 	"synproxy", \
+	"divert", \
 	NULL \
 }
 
Index: sys/netinet/ip_divert.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_divert.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_divert.c
--- sys/netinet/ip_divert.c	17 Jan 2012 08:56:17 -0000	1.1.1.1
+++ sys/netinet/ip_divert.c	17 Jan 2012 13:25:42 -0000
@@ -273,8 +273,7 @@
 		 * this iface name will come along for the ride.
 		 * (see div_output for the other half of this.)
 		 */ 
-		strlcpy(divsrc.sin_zero, m->m_pkthdr.rcvif->if_xname,
-		    sizeof(divsrc.sin_zero));
+		*((u_short *)divsrc.sin_zero) = m->m_pkthdr.rcvif->if_index;
 	}
 
 	/* Put packet on socket queue, if any */
@@ -348,7 +347,7 @@
 
 	/* Loopback avoidance and state recovery */
 	if (sin) {
-		int i;
+		u_short idx;
 
 		/* set the starting point. We provide a non-zero slot,
 		 * but a non_matching chain_id to skip that info and use
@@ -356,7 +355,7 @@
 		 */
 		dt->slot = 1; /* dummy, chain_id is invalid */
 		dt->chain_id = 0;
-		dt->rulenum = sin->sin_port+1; /* host format ? */
+		dt->rulenum = sin->sin_port; /* host format ? */
 		dt->rule_id = 0;
 		/*
 		 * Find receive interface with the given name, stuffed
@@ -364,10 +363,9 @@
 		 * The name is user supplied data so don't trust its size
 		 * or that it is zero terminated.
 		 */
-		for (i = 0; i < sizeof(sin->sin_zero) && sin->sin_zero[i]; i++)
-			;
-		if ( i > 0 && i < sizeof(sin->sin_zero))
-			m->m_pkthdr.rcvif = ifunit(sin->sin_zero);
+		idx = *((u_short *)sin->sin_zero);
+		if ( idx > 0 )
+			m->m_pkthdr.rcvif = ifnet_byindex(idx);
 	}
 
 	/* Reinject packet into the system as incoming or outgoing */
@@ -843,5 +841,4 @@
 };
 
 DECLARE_MODULE(ipdivert, ipdivertmod, SI_SUB_PROTO_IFATTACHDOMAIN, SI_ORDER_ANY);
-MODULE_DEPEND(ipdivert, ipfw, 2, 2, 2);
 MODULE_VERSION(ipdivert, 1);
