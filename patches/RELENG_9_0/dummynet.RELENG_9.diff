Index: contrib/pf/pfctl/parse.y
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/parse.y,v
retrieving revision 1.2
diff -u -r1.2 parse.y
--- contrib/pf/pfctl/parse.y	28 Sep 2011 16:05:45 -0000	1.2
+++ contrib/pf/pfctl/parse.y	28 Sep 2011 16:16:29 -0000
@@ -32,6 +32,7 @@
 
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/sysctl.h>
 #include <sys/stat.h>
 #include <net/if.h>
 #include <netinet/in.h>
@@ -238,6 +239,9 @@
 	char			*tag;
 	char			*match_tag;
 	u_int8_t		 match_tag_not;
+	u_int32_t                dnpipe;
+	u_int32_t                pdnpipe;
+	u_int32_t                free_flags;
 	u_int			 rtableid;
 	struct {
 		struct node_host	*addr;
@@ -450,6 +454,7 @@
 %token	BITMASK RANDOM SOURCEHASH ROUNDROBIN STATICPORT PROBABILITY
 %token	ALTQ CBQ PRIQ HFSC FAIRQ BANDWIDTH TBRSIZE LINKSHARE REALTIME UPPERLIMIT
 %token	QUEUE PRIORITY QLIMIT HOGS BUCKETS RTABLE
+%token  DNPIPE DNQUEUE 
 %token	LOAD RULESET_OPTIMIZATION
 %token	STICKYADDRESS MAXSRCSTATES MAXSRCNODES SOURCETRACK GLOBAL RULE
 %token	MAXSRCCONN MAXSRCCONNRATE OVERLOAD FLUSH SLOPPY PFLOW
@@ -1601,14 +1606,22 @@
 
 			bps = strtod($1, &cp);
 			if (cp != NULL) {
-				if (!strcmp(cp, "b"))
+				if (!strcmp(cp, "b") || !strcmp(cp, "bit"))
 					; /* nothing */
-				else if (!strcmp(cp, "Kb"))
+				else if (!strcmp(cp, "Kb") || !strcmp(cp, "Kbit"))
 					bps *= 1000;
-				else if (!strcmp(cp, "Mb"))
+				else if (!strcmp(cp, "Mb") || !strcmp(cp, "Mbit"))
 					bps *= 1000 * 1000;
-				else if (!strcmp(cp, "Gb"))
+				else if (!strcmp(cp, "Gb") || !strcmp(cp, "Gbit"))
 					bps *= 1000 * 1000 * 1000;
+				else if (!strcmp(cp, "B") || !strcmp(cp, "Byte"))
+					; /* nothing */
+				else if (!strcmp(cp, "KB") || !strcmp(cp, "Kbyte"))
+					bps *= 1024;
+				else if (!strcmp(cp, "MB") || !strcmp(cp, "Mbyte"))
+					bps *= 1024 * 1024;
+				else if (!strcmp(cp, "GB") || !strcmp(cp, "Gbyte"))
+					bps *= 1024 * 1024 * 1024;
 				else if (!strcmp(cp, "%")) {
 					if (bps < 0 || bps > 100) {
 						yyerror("bandwidth spec "
@@ -2329,6 +2342,15 @@
 			}
 #endif
 
+			if ($9.dnpipe) {
+                                r.dnpipe = $9.dnpipe;
+				if ($9.free_flags & PFRULE_DN_IS_PIPE)
+					r.free_flags |= PFRULE_DN_IS_PIPE;
+				else
+					r.free_flags |= PFRULE_DN_IS_QUEUE;
+				r.pdnpipe = $9.pdnpipe;
+			}
+
 			expand_rule(&r, $4, $5.host, $7, $8.src_os,
 			    $8.src.host, $8.src.port, $8.dst.host, $8.dst.port,
 			    $9.uid, $9.gid, $9.icmpspec, "");
@@ -2426,6 +2448,32 @@
 			}
 			filter_opts.queues = $1;
 		}
+		| DNPIPE number			        {
+			filter_opts.dnpipe = $2;
+			filter_opts.free_flags |= PFRULE_DN_IS_PIPE;
+		}
+		| DNPIPE '(' number ')'			{
+			filter_opts.dnpipe = $3;
+			filter_opts.free_flags |= PFRULE_DN_IS_PIPE;
+		}
+		| DNPIPE '(' number comma number ')' {
+			filter_opts.pdnpipe = $5;
+			filter_opts.dnpipe = $3;
+			filter_opts.free_flags |= PFRULE_DN_IS_PIPE;
+		}
+		| DNQUEUE number			{
+			filter_opts.dnpipe = $2;
+			filter_opts.free_flags |= PFRULE_DN_IS_QUEUE;
+		}
+		| DNQUEUE '(' number comma number ')'	{
+			filter_opts.pdnpipe = $5;
+			filter_opts.dnpipe = $3;
+			filter_opts.free_flags |= PFRULE_DN_IS_QUEUE;
+		}
+		| DNQUEUE '(' number ')'		{
+			filter_opts.dnpipe = $3;
+			filter_opts.free_flags |= PFRULE_DN_IS_QUEUE;
+		}
 		| TAG string				{
 			filter_opts.tag = $2;
 		}
@@ -4603,6 +4651,11 @@
 		yyerror("tos and dscp cannot be used together");
 		problems++;
 	}
+	if (r->dnpipe && r->pdnpipe && !r->direction) {
+		yyerror("dummynet cannot be specified without direction");
+		problems++;
+	}
+
 	return (-problems);
 }
 
@@ -5397,6 +5450,8 @@
 		{ "debug",		DEBUG},
 		{ "divert-reply",	DIVERTREPLY},
 		{ "divert-to",		DIVERTTO},
+		{ "dnpipe",             DNPIPE},
+		{ "dnqueue",            DNQUEUE},
 		{ "drop",		DROP},
 		{ "drop-ovl",		FRAGDROP},
 		{ "dscp",		DSCP},
Index: contrib/pf/pfctl/pfctl_parser.c
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/pfctl_parser.c,v
retrieving revision 1.2
diff -u -r1.2 pfctl_parser.c
--- contrib/pf/pfctl/pfctl_parser.c	28 Sep 2011 16:05:45 -0000	1.2
+++ contrib/pf/pfctl/pfctl_parser.c	28 Sep 2011 16:16:29 -0000
@@ -1007,6 +1007,14 @@
 	}
 	if (r->label[0])
 		printf(" label \"%s\"", r->label);
+	if (r->dnpipe && r->pdnpipe)
+	       printf(" %s(%d, %d)", 
+			r->free_flags & PFRULE_DN_IS_PIPE ? "dnpipe" : "dnqueue",
+			r->dnpipe, r->pdnpipe);
+	else if (r->dnpipe)	
+		printf(" %s %d", 
+			r->free_flags & PFRULE_DN_IS_PIPE ? "dnpipe" : "dnqueue",
+			r->dnpipe);
 	if (r->qname[0] && r->pqname[0])
 		printf(" queue(%s, %s)", r->qname, r->pqname);
 	else if (r->qname[0])
Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf.c,v
retrieving revision 1.2
diff -u -r1.2 pf.c
--- sys/contrib/pf/net/pf.c	28 Sep 2011 16:05:45 -0000	1.2
+++ sys/contrib/pf/net/pf.c	28 Sep 2011 16:30:39 -0000
@@ -155,6 +155,10 @@
 #include <netinet/icmp6.h>
 #include <netinet6/nd6.h>
 #ifdef __FreeBSD__
+#include <netinet/ip_fw.h>
+#include <netinet/ipfw/ip_fw_private.h>
+#include <netinet/ip_dummynet.h>
+
 #include <netinet6/ip6_var.h>
 #include <netinet6/in6_pcb.h>
 #endif
@@ -321,7 +325,7 @@
 			    struct pfi_kif *, struct mbuf *, int,
 			    void *, struct pf_pdesc *, u_short *);
 int			 pf_test_state_other(struct pf_state **, int,
-			    struct pfi_kif *, struct mbuf *, struct pf_pdesc *);
+			    struct pfi_kif *, struct mbuf *, struct pf_pdesc *, int);
 void			 pf_route(struct mbuf **, struct pf_rule *, int,
 			    struct ifnet *, struct pf_state *,
 			    struct pf_pdesc *);
@@ -381,19 +385,140 @@
 #endif
 
 #ifdef __FreeBSD__
-#define	PPACKET_LOOPED()						\
-	(pd->pf_mtag->flags & PF_PACKET_LOOPED)
+#define PACKET_LOOPED(mtag)                                           \
+	((mtag)->flags & PF_PACKET_LOOPED)
 
-#define	PACKET_LOOPED()							\
-	(pd.pf_mtag->flags & PF_PACKET_LOOPED)
+#define PACKET_UNDO_NAT(n, pdt, state, direction)                             \
+do {                          \
+	struct pf_state_key *nk = (state)->key[(pdt).didx];		\
+	switch ((pdt).proto) { \
+	case IPPROTO_TCP: { \
+		struct tcphdr *th = (pdt).hdr.tcp; \
+		if (direction == PF_OUT) \
+			pf_change_ap((pdt).src, &th->th_sport, (pdt).ip_sum, \
+				&th->th_sum, &nk->addr[(pdt).sidx], \
+				nk->port[(pdt).sidx], 0, (pdt).af); \
+		else \
+			pf_change_ap((pdt).dst, &th->th_dport, (pdt).ip_sum, \
+				&th->th_sum, &nk->addr[(pdt).didx], \
+				nk->port[(pdt).didx], 0, (pdt).af); \
+		m_copyback(n, off, sizeof(*th), (caddr_t)th); \
+	} \
+	break; \
+	case IPPROTO_UDP: { \
+		struct udphdr *uh = (pdt).hdr.udp; \
+		if (direction == PF_OUT) \
+			pf_change_ap((pdt).src, &uh->uh_sport, (pdt).ip_sum, \
+				&uh->uh_sum, &nk->addr[(pdt).sidx], \
+				nk->port[(pdt).sidx], 1, (pdt).af); \
+		else \
+			pf_change_ap((pdt).dst, &uh->uh_sport, (pdt).ip_sum, \
+				&uh->uh_sum, &nk->addr[(pdt).didx], \
+				nk->port[(pdt).didx], 1, (pdt).af); \
+		m_copyback(n, off, sizeof(*uh), (caddr_t)uh); \
+	} \
+	break; \
+	case IPPROTO_ICMP: \
+		/* XXX: If we want to do this for icmp is probably wrong!?! */ \
+	break; \
+	default: \
+		if (direction == PF_OUT) \
+			switch ((pdt).af) { \
+			case AF_INET: \
+				pf_change_a(&(pdt).src->v4.s_addr, \
+					(pdt).ip_sum, nk->addr[(pdt).sidx].v4.s_addr, \
+					0); \
+			break; \
+			case AF_INET6: \
+				PF_ACPY((pdt).src, &nk->addr[(pdt).sidx], (pdt).af); \
+			break; \
+			} \
+		else \
+			switch ((pdt).af) { \
+			case AF_INET: \
+				pf_change_a(&(pdt).dst->v4.s_addr, \
+					(pdt).ip_sum, nk->addr[(pdt).didx].v4.s_addr, \
+					0); \
+			break; \
+			case AF_INET6: \
+				PF_ACPY((pdt).dst, &nk->addr[(pdt).didx], (pdt).af); \
+			break; \
+		} \
+		break; \
+	} \
+} while(0)
+
+#define PACKET_REDO_NAT(pdt, state, direction)                        \
+do {          \
+	struct pf_state_key *nk = (state)->key[(pdt).didx];		\
+	switch ((pdt).proto) {                  \
+	case IPPROTO_TCP: {                     \
+		struct tcphdr *th = (pdt).hdr.tcp; \
+		if (direction == PF_OUT)                \
+			pf_change_ap((pdt).src, &th->th_sport, (pdt).ip_sum, \
+				&th->th_sum, &nk->addr[(pdt).sidx], \
+				nk->port[(pdt).sidx], 0, (pdt).af); \
+		else                    \
+			pf_change_ap((pdt).dst, &th->th_dport, (pdt).ip_sum, \
+				&th->th_sum, &nk->addr[(pdt).didx],            \
+				nk->port[(pdt).didx], 0, (pdt).af);            \
+		m_copyback(m, off, sizeof(*th), (caddr_t)th); \
+	}                               \
+	break;                  \
+	case IPPROTO_UDP: {             \
+		struct udphdr *uh = (pdt).hdr.udp; \
+		if (direction == PF_OUT)                        \
+			pf_change_ap((pdt).src, &uh->uh_sport, (pdt).ip_sum, \
+				&uh->uh_sum, &nk->addr[(pdt).sidx],            \
+				nk->port[(pdt).sidx], 1, (pdt).af);            \
+		else                    \
+			pf_change_ap((pdt).dst, &uh->uh_dport, (pdt).ip_sum, \
+				&uh->uh_sum, &nk->addr[(pdt).didx],            \
+				nk->port[(pdt).didx], 1, (pdt).af);            \
+		m_copyback(m, off, sizeof(*uh), (caddr_t)uh);   \
+	}                               \
+	break;                  \
+	case IPPROTO_ICMP:              \
+		/* XXX: If we want to do this for icmp is probably wrong!?! */ \
+	break;                  \
+	default:                        \
+		if (direction == PF_OUT)        \
+		switch ((pdt).af) {     \
+		case AF_INET:   \
+			pf_change_a(&(pdt).src->v4.s_addr,      \
+				(pdt).ip_sum, nk->addr[(pdt).didx].v4.s_addr, \
+				0); \
+		break;  \
+		case AF_INET6:  \
+			PF_ACPY((pdt).src, &nk->addr[(pdt).sidx], (pdt).af); \
+		break;  \
+		}               \
+	else                    \
+		switch ((pdt).af) {     \
+		case AF_INET:   \
+			pf_change_a(&(pdt).dst->v4.s_addr,      \
+				(pdt).ip_sum, nk->addr[(pdt).didx].v4.s_addr, \
+				0); \
+		break;  \
+		case AF_INET6:  \
+			PF_ACPY((pdt).dst, &nk->addr[(pdt).sidx], (pdt).af); \
+		break;  \
+	}               \
+	break;                  \
+	} \
+} while(0)
 
 #define	STATE_LOOKUP(i, k, d, s, m, pt)					\
 	do {								\
 		s = pf_find_state(i, k, d, m, pt);			\
 		if (s == NULL || (s)->timeout == PFTM_PURGE)		\
 			return (PF_DROP);				\
-		if (PPACKET_LOOPED())					\
-			return (PF_PASS);				\
+		if (PACKET_LOOPED(pt)) {                       \
+			if ((s)->key[PF_SK_WIRE] != (s)->key[PF_SK_STACK]) { \
+				PACKET_REDO_NAT((*pd), s, direction);      \
+			}                                               \
+			return (PF_PASS);                               \
+		}                                                       \
 		if (d == PF_OUT &&					\
 		    (((s)->rule.ptr->rt == PF_ROUTETO &&		\
 		    (s)->rule.ptr->direction == PF_OUT) ||		\
@@ -5572,7 +5697,7 @@
 
 int
 pf_test_state_other(struct pf_state **state, int direction, struct pfi_kif *kif,
-    struct mbuf *m, struct pf_pdesc *pd)
+    struct mbuf *m, struct pf_pdesc *pd, int off)
 {
 	struct pf_state_peer	*src, *dst;
 	struct pf_state_key_cmp	 key;
@@ -6645,9 +6770,13 @@
 	struct pf_state		*s = NULL;
 	struct pf_ruleset	*ruleset = NULL;
 	struct pf_pdesc		 pd;
-	int			 off, dirndx, pqid = 0;
+	int			 off = 0, dirndx, pqid = 0;
 
 #ifdef __FreeBSD__
+	struct m_tag *dn_tag;
+	struct ip_fw_args	 dnflow;
+	int			 loopedfrom = 0;
+
 	PF_LOCK();
 	if (!V_pf_status.running)
 	{
@@ -6720,17 +6849,19 @@
 #endif
 	
 #ifdef __FreeBSD__
-	if (ip_divert_ptr != NULL &&
+	if ((ip_divert_ptr != NULL || ip_dn_io_ptr != NULL) &&
 	    ((ipfwtag = m_tag_locate(m, MTAG_IPFW_RULE, 0, NULL)) != NULL)) {
 		struct ipfw_rule_ref *rr = (struct ipfw_rule_ref *)(ipfwtag+1);
+		if (rr->info & IPFW_IS_DUMMYNET)
+			loopedfrom = 1;
 		if (rr->info & IPFW_IS_DIVERT && rr->rulenum == 0) {
 			pd.pf_mtag->flags |= PF_PACKET_LOOPED;
-			m_tag_delete(m, ipfwtag);
 		}
 		if (pd.pf_mtag->flags & PF_FASTFWD_OURS_PRESENT) {
 			m->m_flags |= M_FASTFWD_OURS;
 			pd.pf_mtag->flags &= ~PF_FASTFWD_OURS_PRESENT;
 		}
+		m_tag_delete(m, ipfwtag);
 	} else
 #endif
 	/* We do IP header normalization and packet reassembly here */
@@ -6776,6 +6907,11 @@
 		struct tcphdr	th;
 
 		pd.hdr.tcp = &th;
+#ifdef __FreeBSD__
+                dnflow.f_id._flags = th.th_flags;
+                dnflow.f_id.dst_port = ntohs(th.th_dport);
+                dnflow.f_id.src_port = ntohs(th.th_sport);
+#endif
 		if (!pf_pull_hdr(m, off, &th, sizeof(th),
 		    &action, &reason, AF_INET)) {
 			log = action != PF_PASS;
@@ -6816,6 +6952,10 @@
 		struct udphdr	uh;
 
 		pd.hdr.udp = &uh;
+#ifdef __FreeBSD__
+                dnflow.f_id.dst_port = ntohs(uh.uh_dport);
+                dnflow.f_id.src_port = ntohs(uh.uh_sport);
+#endif
 		if (!pf_pull_hdr(m, off, &uh, sizeof(uh),
 		    &action, &reason, AF_INET)) {
 			log = action != PF_PASS;
@@ -6896,7 +7036,7 @@
 #endif
 
 	default:
-		action = pf_test_state_other(&s, dir, kif, m, &pd);
+		action = pf_test_state_other(&s, dir, kif, m, &pd, off);
 		if (action == PF_PASS) {
 #if NPFSYNC > 0
 #ifdef __FreeBSD__
@@ -6967,6 +7107,55 @@
 	}
 #endif /* ALTQ */
 
+#ifdef __FreeBSD__
+       	if (r->dnpipe && ip_dn_io_ptr != NULL && loopedfrom != 1) {
+
+                        if (dir != r->direction && r->pdnpipe) {
+                                dnflow.rule.info = r->pdnpipe;
+                        } else if (dir == r->direction) {
+                                dnflow.rule.info = r->dnpipe;
+                        } else
+                                goto continueprocessing;
+
+			if (r->free_flags & PFRULE_DN_IS_PIPE)
+				dnflow.rule.info |= IPFW_IS_PIPE;
+                        dnflow.f_id.addr_type = 4; /* IPv4 type */
+                        dnflow.f_id.proto = pd.proto;
+			if (dir == PF_OUT && s != NULL && s->nat_rule.ptr != NULL &&
+			    s->nat_rule.ptr->action == PF_NAT)
+				dnflow.f_id.src_ip = ntohl(pd.src->v4.s_addr); /* XXX */
+			else
+				dnflow.f_id.src_ip = ntohl(h->ip_src.s_addr);
+			dnflow.f_id.dst_ip = ntohl(h->ip_dst.s_addr);
+			dnflow.f_id.extra = dnflow.rule.info;
+
+			if (m->m_flags & M_FASTFWD_OURS) {
+                                pd.pf_mtag->flags |= PF_FASTFWD_OURS_PRESENT;
+                                m->m_flags &= ~M_FASTFWD_OURS;
+                        }
+
+			if (s != NULL && s->nat_rule.ptr)
+				PACKET_UNDO_NAT(m, pd, s, dir);
+                        PF_UNLOCK();
+
+                        ip_dn_io_ptr(m0,
+				(dir == PF_IN) ? DIR_IN : DIR_OUT,
+                                &dnflow);
+			if (*m0 != NULL) {
+				m_tag_delete(*m0, m_tag_first(*m0));
+				PF_LOCK();
+				pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
+				if (s != NULL && s->nat_rule.ptr)
+					PACKET_REDO_NAT(pd, s, dir);
+			} else {
+                        	*m0 = NULL;
+                        	return (action);
+			}
+        } else
+		pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
+continueprocessing:
+#endif
+
 	/*
 	 * connections redirected to loopback should not match sockets
 	 * bound specifically to loopback due to security implications,
@@ -6983,6 +7172,7 @@
 		m->m_pkthdr.pf.flags |= PF_TAG_TRANSLATE_LOCALHOST;
 #endif
 
+#if 0
 #ifdef __FreeBSD__
 	if (action == PF_PASS && r->divert.port &&
 	    ip_divert_ptr != NULL && !PACKET_LOOPED()) {
@@ -7027,6 +7217,7 @@
 		}
 	}
 #endif
+#endif
 
 	if (log) {
 		struct pf_rule *lr;
@@ -7138,6 +7329,9 @@
 	int			 off, terminal = 0, dirndx, rh_cnt = 0;
 
 #ifdef __FreeBSD__
+	struct m_tag *dn_tag;
+	struct ip_fw_args	 dnflow;
+
 	PF_LOCK();
 	if (!V_pf_status.running) {
 		PF_UNLOCK();
@@ -7205,6 +7399,13 @@
 #endif
 		return (PF_PASS);
 
+#ifdef __FreeBSD__
+	if (ip_dn_io_ptr != NULL &&
+	    ((dn_tag = m_tag_find(m, MTAG_IPFW_RULE, NULL)) != NULL)) {
+		pd.pf_mtag->flags |= PF_PACKET_LOOPED;
+		m_tag_delete(m, dn_tag);
+	} else
+#endif
 	/* We do IP header normalization and packet reassembly here */
 	if (pf_normalize_ip6(m0, dir, kif, &reason, &pd) != PF_PASS) {
 		action = PF_DROP;
@@ -7316,6 +7517,11 @@
 		struct tcphdr	th;
 
 		pd.hdr.tcp = &th;
+#ifdef __FreeBSD__
+                dnflow.f_id._flags = th.th_flags;
+                dnflow.f_id.dst_port = th.th_dport;
+                dnflow.f_id.src_port = th.th_sport;
+#endif
 		if (!pf_pull_hdr(m, off, &th, sizeof(th),
 		    &action, &reason, AF_INET6)) {
 			log = action != PF_PASS;
@@ -7354,6 +7560,10 @@
 		struct udphdr	uh;
 
 		pd.hdr.udp = &uh;
+#ifdef __FreeBSD__
+                dnflow.f_id.dst_port = uh.uh_dport;
+                dnflow.f_id.src_port = uh.uh_sport;
+#endif
 		if (!pf_pull_hdr(m, off, &uh, sizeof(uh),
 		    &action, &reason, AF_INET6)) {
 			log = action != PF_PASS;
@@ -7432,7 +7642,7 @@
 	}
 
 	default:
-		action = pf_test_state_other(&s, dir, kif, m, &pd);
+		action = pf_test_state_other(&s, dir, kif, m, &pd, off);
 		if (action == PF_PASS) {
 #if NPFSYNC > 0
 #ifdef __FreeBSD__
@@ -7508,6 +7718,45 @@
 	}
 #endif /* ALTQ */
 
+#ifdef __FreeBSD__
+        if (r->dnpipe && ip_dn_io_ptr != NULL && !PACKET_LOOPED(pd.pf_mtag)) {
+
+			if (dir != r->direction && r->pdnpipe) {
+                                dnflow.rule.info = r->pdnpipe;
+                        } else if (dir == r->direction) {
+                                dnflow.rule.info = r->dnpipe;
+                        } else
+                                goto continueprocessing;
+
+                        if (r->free_flags & PFRULE_DN_IS_PIPE)
+                                dnflow.rule.info |= IPFW_IS_PIPE;
+                        dnflow.f_id.addr_type = 6; /* IPv4 type */
+                        dnflow.f_id.proto = pd.proto;
+			dnflow.f_id.src_ip6 = h->ip6_src;
+                        dnflow.f_id.dst_ip6 = h->ip6_dst;
+			dnflow.f_id.src_ip = 0;
+			dnflow.f_id.dst_ip = 0;
+			dnflow.f_id.flow_id6 = ntohl(h->ip6_flow);
+			dnflow.f_id.extra = dnflow.rule.info;
+
+                        PF_UNLOCK();
+
+                        ip_dn_io_ptr(m0,
+                                dir == PF_IN ? DIR_IN : DIR_OUT,
+                                &dnflow);
+			if (*m0 != NULL) {
+				m_tag_delete(*m0, m_tag_first(*m0));
+				PF_LOCK();
+				pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
+			} else {
+                        	*m0 = NULL;
+                        	return (action);
+			}
+        } else
+		pd.pf_mtag->flags &= ~PF_PACKET_LOOPED;
+continueprocessing:
+#endif
+
 	if (dir == PF_IN && action == PF_PASS && (pd.proto == IPPROTO_TCP ||
 	    pd.proto == IPPROTO_UDP) && s != NULL && s->nat_rule.ptr != NULL &&
 	    (s->nat_rule.ptr->action == PF_RDR ||
@@ -7521,7 +7770,7 @@
 
 #ifdef __FreeBSD__
 	/* XXX: Anybody working on it?! */
-	if (r->divert.port)
+	if (r->divert)
 		printf("pf: divert(9) is not supported for IPv6\n");
 #else
 	if (dir == PF_IN && action == PF_PASS && r->divert.port) {
Index: sys/contrib/pf/net/pfvar.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pfvar.h,v
retrieving revision 1.3
diff -u -r1.3 pfvar.h
--- sys/contrib/pf/net/pfvar.h	28 Sep 2011 16:16:21 -0000	1.3
+++ sys/contrib/pf/net/pfvar.h	28 Sep 2011 16:16:29 -0000
@@ -655,6 +655,11 @@
 	}			 max_src_conn_rate;
 	u_int32_t		 qid;
 	u_int32_t		 pqid;
+	u_int32_t                dnpipe;
+        u_int32_t                pdnpipe;
+#define	PFRULE_DN_IS_PIPE	0x00000010
+#define	PFRULE_DN_IS_QUEUE	0x00000020	
+	u_int32_t                free_flags;
 	u_int32_t		 rt_listid;
 	u_int32_t		 nr;
 	u_int32_t		 prob;
Index: sys/netinet/ipfw/ip_dn_io.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ipfw/ip_dn_io.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_dn_io.c
--- sys/netinet/ipfw/ip_dn_io.c	28 Sep 2011 16:02:17 -0000	1.1.1.1
+++ sys/netinet/ipfw/ip_dn_io.c	28 Sep 2011 16:16:29 -0000
@@ -645,6 +645,7 @@
 			 * to carry reinject info.
 			 */
 			dst = pkt->dn_dir;
+			pkt->rule.info |= IPFW_IS_DUMMYNET;
 			ifp = pkt->ifp;
 			tag->m_tag_cookie = MTAG_IPFW_RULE;
 			tag->m_tag_id = 0;
