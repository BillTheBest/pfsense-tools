Index: sys/netinet/ip_output.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_output.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_output.c
--- sys/netinet/ip_output.c	27 Sep 2011 04:25:20 -0000	1.1.1.1
+++ sys/netinet/ip_output.c	27 Sep 2011 17:06:23 -0000
@@ -126,12 +126,10 @@
 	struct route iproute;
 	struct rtentry *rte;	/* cache for ro->ro_rt */
 	struct in_addr odst;
+	int no_route_but_check = 0;
 #ifdef IPFIREWALL_FORWARD
 	struct m_tag *fwd_tag = NULL;
 #endif
-#ifdef IPSEC
-	int no_route_but_check_spd = 0;
-#endif
 	M_ASSERTPKTHDR(m);
 
 	if (inp != NULL) {
@@ -286,10 +284,11 @@
 			 * There is no route for this packet, but it is
 			 * possible that a matching SPD entry exists.
 			 */
-			no_route_but_check_spd = 1;
 			mtu = 0; /* Silence GCC warning. */
-			goto sendit;
 #endif
+			no_route_but_check = 1;
+			goto sendit;
+
 			IPSTAT_INC(ips_noroute);
 			error = EHOSTUNREACH;
 			goto bad;
@@ -486,28 +485,34 @@
 	default:
 		break;	/* Continue with packet processing. */
 	}
-	/*
-	 * Check if there was a route for this packet; return error if not.
-	 */
-	if (no_route_but_check_spd) {
-		IPSTAT_INC(ips_noroute);
-		error = EHOSTUNREACH;
-		goto bad;
-	}
 	/* Update variables that are affected by ipsec4_output(). */
 	ip = mtod(m, struct ip *);
 	hlen = ip->ip_hl << 2;
 #endif /* IPSEC */
 
 	/* Jump over all PFIL processing if hooks are not active. */
-	if (!PFIL_HOOKED(&V_inet_pfil_hook))
+	if (!PFIL_HOOKED(&V_inet_pfil_hook)) {
+		if (no_route_but_check) {
+			IPSTAT_INC(ips_noroute);
+			error = EHOSTUNREACH;
+			goto bad;
+		}
 		goto passout;
+	}
+
+	if (ifp == NULL)
+		ifp = V_loif;
 
 	/* Run through list of hooks for output packets. */
 	odst.s_addr = ip->ip_dst.s_addr;
 	error = pfil_run_hooks(&V_inet_pfil_hook, &m, ifp, PFIL_OUT, inp);
 	if (error != 0 || m == NULL)
 		goto done;
+	if (no_route_but_check) {
+		IPSTAT_INC(ips_noroute);
+                error = EHOSTUNREACH;
+                goto bad;
+	}
 
 	ip = mtod(m, struct ip *);
 
