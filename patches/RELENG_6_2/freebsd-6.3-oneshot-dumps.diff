--- kern/uipc_socket2.c	12 Mar 2007 12:13:52 -0000	1.147.2.8
+++ kern/uipc_socket2.c	5 Jan 2008 16:35:33 -0000
@@ -657,15 +657,18 @@
 }
 #endif /* SOCKBUF_DEBUG */
 
-#define SBLINKRECORD(sb, m0) do {					\
+#define SBLINKRECORDCHAIN(sb, m0, mlast) do {					\
 	SOCKBUF_LOCK_ASSERT(sb);					\
 	if ((sb)->sb_lastrecord != NULL)				\
 		(sb)->sb_lastrecord->m_nextpkt = (m0);			\
 	else								\
 		(sb)->sb_mb = (m0);					\
-	(sb)->sb_lastrecord = (m0);					\
+	(sb)->sb_lastrecord = (mlast);					\
 } while (/*CONSTCOND*/0)
 
+#define SBLINKRECORD(sb, m0) \
+	SBLINKRECORDCHAIN(sb, m0, m0)
+
 /*
  * Append mbuf chain m to the last record in the
  * socket buffer sb.  The additional space associated
@@ -922,6 +925,74 @@
 
 	SOCKBUF_LOCK(sb);
 	retval = sbappendaddr_locked(sb, asa, m0, control);
+	SOCKBUF_UNLOCK(sb);
+	return (retval);
+}
+
+int
+sbappendaddrchain_locked(sb, asa, m0)
+	struct sockbuf *sb;
+	const struct sockaddr *asa;
+	struct mbuf *m0;
+{
+	struct mbuf *m, *n, *n0, *nlast, *np;
+
+	SOCKBUF_LOCK_ASSERT(sb);
+
+#if MSIZE <= 256
+	if (asa->sa_len > MLEN)
+		return (0);
+#endif
+
+	n0 = np = nlast = NULL;
+	for (m = m0; m; m = m->m_nextpkt) {
+		MGET(n, M_DONTWAIT, MT_SONAME);
+		if (n == NULL)
+			goto outofmem;
+		n->m_len = asa->sa_len;
+		bcopy(asa, mtod(n, caddr_t), asa->sa_len);
+		n->m_next = m;
+
+		if (n0 == NULL)
+			n0 = n;
+		else
+			nlast->m_nextpkt = n;
+		nlast = n;
+
+		for (np = n; np->m_next; np = np->m_next)
+			sballoc(sb, np);
+		sballoc(sb, np);
+	}
+
+	SBLINKRECORDCHAIN(sb, n0, nlast);
+
+	sb->sb_mbtail = np;
+	SBLASTMBUFCHK(sb);
+
+	SBLASTRECORDCHK(sb);
+	return (1);
+
+outofmem:
+	while ((n = n0) != NULL) {
+		for (np = n; np; np = np->m_next)
+			sbfree(sb, np);
+
+		n0 = n->m_nextpkt;
+		m_free(n);
+	}
+	return (0);
+}
+
+int
+sbappendaddrchain(sb, asa, m0)
+	struct sockbuf *sb;
+	const struct sockaddr *asa;
+	struct mbuf *m0;
+{
+	int retval;
+
+	SOCKBUF_LOCK(sb);
+	retval = sbappendaddrchain_locked(sb, asa, m0);
 	SOCKBUF_UNLOCK(sb);
 	return (retval);
 }
--- netipsec/key.c	4 Sep 2006 15:17:50 -0000	1.20.2.1
+++ netipsec/key.c	5 Jan 2008 16:35:34 -0000
@@ -2375,7 +2375,7 @@
 	struct secpolicy *sp;
 	int cnt;
 	u_int dir;
-	struct mbuf *n;
+	struct mbuf *n, *rh, *rt;
 
 	IPSEC_ASSERT(so != NULL, ("null socket"));
 	IPSEC_ASSERT(m != NULL, ("null mbuf"));
@@ -2393,19 +2393,27 @@
 	if (cnt == 0)
 		return key_senderror(so, m, ENOENT);
 
+	rh = rt = NULL;
 	for (dir = 0; dir < IPSEC_DIR_MAX; dir++) {
 		LIST_FOREACH(sp, &sptree[dir], chain) {
 			--cnt;
 			n = key_setdumpsp(sp, SADB_X_SPDDUMP, cnt,
 			    mhp->msg->sadb_msg_pid);
+			if (!n) {
+				m_freem(rh);
+				return key_senderror(so, m, ENOBUFS);
+			}
 
-			if (n)
-				key_sendup_mbuf(so, n, KEY_SENDUP_ONE);
+			if (rt)
+				rt->m_nextpkt = n;
+			else
+				rh = n;
+			rt = n;
 		}
 	}
 
 	m_freem(m);
-	return 0;
+	return key_sendup_mbuf(so, rh, KEY_SENDUP_ONESHOT);
 }
 
 static struct mbuf *
@@ -3283,7 +3291,7 @@
 	u_int8_t type, satype;
 	u_int32_t seq, pid;
 {
-	struct mbuf *result = NULL, *tres = NULL, *m;
+	struct mbuf *result = NULL, *m;
 	int l = 0;
 	int i;
 	void *p;
@@ -3301,7 +3309,7 @@
 		goto fail;
 	result = m;
 
-	for (i = sizeof(dumporder)/sizeof(dumporder[0]) - 1; i >= 0; i--) {
+	for (i = 0; i < sizeof(dumporder)/sizeof(dumporder[0]); i++) {
 		m = NULL;
 		p = NULL;
 		switch (dumporder[i]) {
@@ -3379,15 +3387,6 @@
 			continue;
 		}
 
-		if ((!m && !p) || (m && p))
-			goto fail;
-		if (p && tres) {
-			M_PREPEND(tres, l, M_DONTWAIT);
-			if (!tres)
-				goto fail;
-			bcopy(p, mtod(tres, caddr_t), l);
-			continue;
-		}
 		if (p) {
 			m = key_alloc_mbuf(l);
 			if (!m)
@@ -3395,13 +3394,9 @@
 			m_copyback(m, 0, l, p);
 		}
 
-		if (tres)
-			m_cat(m, tres);
-		tres = m;
+		m_cat(result, m);
 	}
 
-	m_cat(result, tres);
-
 	if (result->m_len < sizeof(struct sadb_msg)) {
 		result = m_pullup(result, sizeof(struct sadb_msg));
 		if (result == NULL)
@@ -3419,7 +3414,6 @@
 
 fail:
 	m_freem(result);
-	m_freem(tres);
 	return NULL;
 }
 
@@ -6442,7 +6436,7 @@
 	u_int8_t state;
 	int cnt;
 	struct sadb_msg *newmsg;
-	struct mbuf *n;
+	struct mbuf *rh, *rt, *n;
 
 	IPSEC_ASSERT(so != NULL, ("null socket"));
 	IPSEC_ASSERT(m != NULL, ("null mbuf"));
@@ -6481,6 +6475,7 @@
 
 	/* send this to the userland, one at a time. */
 	newmsg = NULL;
+	rh = rt = NULL;
 	LIST_FOREACH(sah, &sahtree, chain) {
 		if (mhp->msg->sadb_msg_satype != SADB_SATYPE_UNSPEC
 		 && proto != sah->saidx.proto)
@@ -6489,6 +6484,7 @@
 		/* map proto to satype */
 		if ((satype = key_proto2satype(sah->saidx.proto)) == 0) {
 			SAHTREE_UNLOCK();
+			m_freem(rh);
 			ipseclog((LOG_DEBUG, "%s: there was invalid proto in "
 				"SAD.\n", __func__));
 			return key_senderror(so, m, EINVAL);
@@ -6503,16 +6499,21 @@
 				    --cnt, mhp->msg->sadb_msg_pid);
 				if (!n) {
 					SAHTREE_UNLOCK();
+					m_freem(rh);
 					return key_senderror(so, m, ENOBUFS);
 				}
-				key_sendup_mbuf(so, n, KEY_SENDUP_ONE);
+				if (rt)
+					rt->m_nextpkt = n;
+				else
+					rh = n;
+				rt = n;
 			}
 		}
 	}
 	SAHTREE_UNLOCK();
 
 	m_freem(m);
-	return 0;
+	return key_sendup_mbuf(so, rh, KEY_SENDUP_ONESHOT);
 }
 
 /*
@@ -7195,7 +7196,7 @@
 	int l;
 {
 	struct mbuf *m = NULL, *n;
-	int len, t;
+	int len;
 
 	len = l;
 	while (len > 0) {
@@ -7210,12 +7211,8 @@
 		n->m_next = NULL;
 		n->m_len = 0;
 		n->m_len = M_TRAILINGSPACE(n);
-		/* use the bottom of mbuf, hoping we can prepend afterwards */
-		if (n->m_len > len) {
-			t = (n->m_len - len) & ~(sizeof(long) - 1);
-			n->m_data += t;
+		if (n->m_len > len)
 			n->m_len = len;
-		}
 
 		len -= n->m_len;
 
--- netipsec/keysock.c	27 Jan 2006 21:50:11 -0000	1.10.2.2
+++ netipsec/keysock.c	5 Jan 2008 16:35:34 -0000
@@ -294,6 +294,17 @@
 		pfkeystat.in_msgtype[msg->sadb_msg_type]++;
 	}
 
+	if (target == KEY_SENDUP_ONESHOT) {
+		rp = sotorawcb(so);
+		if (!sbappendaddrchain(&rp->rcb_socket->so_rcv,
+				       (struct sockaddr *) &key_src, m)) {
+			m_freem(m);
+			error = ENOBUFS;
+		}
+		sorwakeup(rp->rcb_socket);
+		return error;
+	}
+
 	LIST_FOREACH(rp, &rawcb_list, list)
 	{
 		if (rp->rcb_proto.sp_family != PF_KEY)
--- netipsec/keysock.h	27 Jan 2006 21:50:11 -0000	1.2.2.1
+++ netipsec/keysock.h	5 Jan 2008 16:35:34 -0000
@@ -61,6 +61,7 @@
 #define KEY_SENDUP_ONE		0
 #define KEY_SENDUP_ALL		1
 #define KEY_SENDUP_REGISTERED	2
+#define KEY_SENDUP_ONESHOT	3
 
 #ifdef _KERNEL
 struct keycb {
--- sys/socketvar.h	3 Jul 2007 10:14:13 -0000	1.141.2.3
+++ sys/socketvar.h	5 Jan 2008 16:35:34 -0000
@@ -461,6 +461,10 @@
 	    struct mbuf *m0, struct mbuf *control);
 int	sbappendaddr_locked(struct sockbuf *sb, const struct sockaddr *asa,
 	    struct mbuf *m0, struct mbuf *control);
+int	sbappendaddrchain(struct sockbuf *sb, const struct sockaddr *asa,
+	    struct mbuf *m0);
+int	sbappendaddrchain_locked(struct sockbuf *sb, const struct sockaddr *asa,
+	    struct mbuf *m0);
 int	sbappendcontrol(struct sockbuf *sb, struct mbuf *m0,
 	    struct mbuf *control);
 int	sbappendcontrol_locked(struct sockbuf *sb, struct mbuf *m0,
