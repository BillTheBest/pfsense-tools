Index: contrib/pf/pfctl/parse.y
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/parse.y,v
retrieving revision 1.3
diff -u -r1.3 parse.y
--- contrib/pf/pfctl/parse.y	10 Feb 2011 00:27:32 -0000	1.3
+++ contrib/pf/pfctl/parse.y	10 Feb 2011 00:28:55 -0000
@@ -423,7 +423,7 @@
 
 %}
 
-%token	PASS BLOCK SCRUB RETURN IN OS OUT LOG QUICK ON FROM TO FLAGS
+%token	PASS BLOCK MATCH SCRUB RETURN IN OS OUT LOG QUICK ON FROM TO FLAGS
 %token	RETURNRST RETURNICMP RETURNICMP6 PROTO INET INET6 ALL ANY ICMPTYPE
 %token	ICMP6TYPE CODE KEEP MODULATE STATE PORT RDR NAT BINAT ARROW NODF
 %token	MINTTL ERROR ALLOWOPTS FASTROUTE FILENAME ROUTETO DUPTO REPLYTO NO LABEL SCHEDULE
@@ -2328,6 +2328,7 @@
 		;
 
 action		: PASS			{ $$.b1 = PF_PASS; $$.b2 = $$.w = 0; }
+		| MATCH			{ $$.b1 = PF_MATCH; $$.b2 = $$.w = 0; }
 		| BLOCK blockspec	{ $$ = $2; $$.b1 = PF_DROP; }
 		;
 
@@ -5201,6 +5202,7 @@
 		{ "load",		LOAD},
 		{ "log",		LOG},
 		{ "loginterface",	LOGINTERFACE},
+		{ "match",		MATCH},
 		{ "max",		MAXIMUM},
 		{ "max-mss",		MAXMSS},
 		{ "max-packets",	MAXPCKT},
Index: contrib/pf/pfctl/pfctl_parser.c
===================================================================
RCS file: /root/freebsd/repo/src/contrib/pf/pfctl/pfctl_parser.c,v
retrieving revision 1.2
diff -u -r1.2 pfctl_parser.c
--- contrib/pf/pfctl/pfctl_parser.c	10 Feb 2011 00:26:35 -0000	1.2
+++ contrib/pf/pfctl/pfctl_parser.c	10 Feb 2011 16:14:52 -0000
@@ -684,7 +684,9 @@
 
 	if (verbose)
 		printf("@%d ", r->nr);
-	if (r->action > PF_NORDR)
+	if (r->action == PF_MATCH)
+		printf("match");
+	else if (r->action > PF_NORDR)
 		printf("action(%d)", r->action);
 	else if (anchor_call[0]) {
 		if (anchor_call[0] == '_') {
Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf.c,v
retrieving revision 1.7
diff -u -r1.7 pf.c
--- sys/contrib/pf/net/pf.c	10 Feb 2011 00:28:40 -0000	1.7
+++ sys/contrib/pf/net/pf.c	10 Feb 2011 16:12:29 -0000
@@ -235,6 +235,8 @@
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t *);
+void			 pf_rule_to_actions(struct pf_rule *,
+			    struct pf_rule_actions *);
 int			 pf_test_tcp(struct pf_rule **, struct pf_state **,
 			    int, struct pfi_kif *, struct mbuf *, int,
 			    void *, struct pf_pdesc *, struct pf_rule **,
@@ -3561,6 +3563,15 @@
 	}
 }
 
+void
+pf_rule_to_actions(struct pf_rule *r, struct pf_rule_actions *a)
+{
+	if (r->qid)
+		a->qid = r->qid;
+	if (r->pqid)
+		a->pqid = r->pqid;
+}
+
 int
 pf_test_tcp(struct pf_rule **rm, struct pf_state **sm, int direction,
     struct pfi_kif *kif, struct mbuf *m, int off, void *h,
@@ -3579,6 +3590,7 @@
 	sa_family_t		 af = pd->af;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions	 act;
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	int			 rewrite = 0;
@@ -3697,10 +3709,20 @@
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+					r->packets[direction == PF_OUT]++;
+					r->bytes[direction == PF_OUT] += pd->tot_len;
+					pf_rule_to_actions(r, &act);
+					if (r->log)
+						PFLOG_PACKET(kif, h, m, af,
+						    direction, PFRES_MATCH, r,
+						    a, ruleset, pd);
+				} else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -3716,6 +3738,9 @@
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+	pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -3840,6 +3865,8 @@
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = IPPROTO_TCP;
+		s->qid = act.qid;
+		s->pqid = act.pqid;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4009,6 +4036,7 @@
 	sa_family_t		 af = pd->af;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act;
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	int			 rewrite = 0;
@@ -4123,10 +4151,20 @@
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4142,6 +4180,9 @@
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -4244,6 +4285,8 @@
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = IPPROTO_UDP;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4318,6 +4361,7 @@
 	struct pf_addr		*saddr = pd->src, *daddr = pd->dst;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act;
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	u_int16_t		 icmpid = 0, bport, nport = 0;
@@ -4467,10 +4511,20 @@
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4486,6 +4540,9 @@
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -4564,6 +4621,8 @@
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = pd->proto;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4637,6 +4696,7 @@
 	struct pf_rule		*nr = NULL;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act;
 	struct pf_src_node	*nsn = NULL;
 	struct pf_addr		*saddr = pd->src, *daddr = pd->dst;
 	struct pf_grehdr	 gr;
@@ -4734,10 +4794,20 @@
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4753,6 +4823,9 @@
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log))
@@ -4859,6 +4932,8 @@
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = pd->proto;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
 		s->direction = direction;
 		s->af = af;
 		if (pd->proto == IPPROTO_GRE &&
@@ -4925,6 +5000,7 @@
 {
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act;
 	sa_family_t		 af = pd->af;
 	u_short			 reason;
 	int			 tag = -1;
@@ -4968,10 +5044,20 @@
 			r = TAILQ_NEXT(r, entries);
 		else {
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4987,6 +5073,9 @@
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log)
@@ -7741,6 +7830,12 @@
 		pd.pf_mtag->af = AF_INET;
 		pd.pf_mtag->hdr = h;
 	}
+	if (s) {
+		if ((pqid || (pd.tos & IPTOS_LOWDELAY)) && s->pqid)
+			pd.pf_mtag->qid = s->pqid;
+		else if (s->qid)
+			pd.pf_mtag->qid = s->qid;
+	}
 #endif /* ALTQ */
 
 #ifdef __FreeBSD__
Index: sys/contrib/pf/net/pf_ruleset.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf_ruleset.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 pf_ruleset.c
--- sys/contrib/pf/net/pf_ruleset.c	10 Feb 2011 00:24:32 -0000	1.1.1.1
+++ sys/contrib/pf/net/pf_ruleset.c	10 Feb 2011 00:29:46 -0000
@@ -127,6 +127,7 @@
 		return (PF_RULESET_SCRUB);
 		break;
 	case PF_PASS:
+	case PF_MATCH:
 	case PF_DROP:
 		return (PF_RULESET_FILTER);
 		break;
Index: sys/contrib/pf/net/pfvar.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pfvar.h,v
retrieving revision 1.4
diff -u -r1.4 pfvar.h
--- sys/contrib/pf/net/pfvar.h	10 Feb 2011 00:28:26 -0000	1.4
+++ sys/contrib/pf/net/pfvar.h	10 Feb 2011 00:40:15 -0000
@@ -80,7 +80,8 @@
 enum	{ PF_INOUT, PF_IN, PF_OUT };
 enum	{ PF_LAN_EXT, PF_EXT_GWY, PF_ID };
 enum	{ PF_PASS, PF_DROP, PF_SCRUB, PF_NOSCRUB, PF_NAT, PF_NONAT,
-	  PF_BINAT, PF_NOBINAT, PF_RDR, PF_NORDR, PF_SYNPROXY_DROP };
+	  PF_BINAT, PF_NOBINAT, PF_RDR, PF_NORDR, PF_SYNPROXY_DROP, 
+	  PF_MATCH };
 enum	{ PF_RULESET_SCRUB, PF_RULESET_FILTER, PF_RULESET_NAT,
 	  PF_RULESET_BINAT, PF_RULESET_RDR, PF_RULESET_MAX };
 enum	{ PF_OP_NONE, PF_OP_IRG, PF_OP_EQ, PF_OP_NE, PF_OP_LT,
@@ -570,6 +571,10 @@
 	int			fp_getnum;	/* DIOCOSFPGET number */
 };
 
+struct pf_rule_actions {
+	u_int16_t	qid;
+	u_int16_t	pqid;
+};
 
 union pf_rule_ptr {
 	struct pf_rule		*ptr;
@@ -630,8 +635,8 @@
 		u_int32_t		limit;
 		u_int32_t		seconds;
 	}			 max_src_conn_rate;
-	u_int32_t		 qid;
-	u_int32_t		 pqid;
+	u_int16_t		 qid;
+	u_int16_t		 pqid;
 	u_int32_t                dnpipe;
         u_int32_t                pdnpipe;
 #define	PFRULE_DN_IS_PIPE	0x00000010
@@ -877,6 +882,8 @@
 	u_int32_t	 creation;
 	u_int32_t	 expire;
 	u_int32_t	 pfsync_time;
+	u_int16_t	 qid;
+	u_int16_t	 pqid;
 	u_int16_t	 tag;
 	u_int16_t	 divert_cookie;
 	struct pf_state	*linked_state;
