Index: ipcp.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/ipcp.c,v
retrieving revision 1.125.2.1
diff -u -r1.125.2.1 ipcp.c
--- ipcp.c	3 Aug 2009 08:13:06 -0000	1.125.2.1
+++ ipcp.c	26 Oct 2009 01:38:15 -0000
@@ -101,6 +101,8 @@
 #define issep(ch) ((ch) == ' ' || (ch) == '\t')
 #define isip(ch) (((ch) >= '0' && (ch) <= '9') || (ch) == '.')
 
+#define PATH_RESCONF "/var/etc/ppp_resolv.conf"
+
 struct compreq {
   u_short proto;
   u_char slots;
@@ -188,7 +190,7 @@
   }
   ipcp->ns.resolver = 0;
 
-  if ((fd = open(_PATH_RESCONF, O_RDONLY)) != -1) {
+  if ((fd = open(PATH_RESCONF, O_RDONLY)) != -1) {
     struct stat st;
 
     if (fstat(fd, &st) == 0) {
@@ -200,19 +202,19 @@
        */
       if ((ipcp->ns.resolv_nons = (char *)malloc(st.st_size + 1)) == NULL)
         log_Printf(LogERROR, "Failed to malloc %lu for %s: %s\n",
-                   (unsigned long)st.st_size, _PATH_RESCONF, strerror(errno));
+                   (unsigned long)st.st_size, PATH_RESCONF, strerror(errno));
       else if ((ipcp->ns.resolv = (char *)malloc(st.st_size + 1)) == NULL) {
         log_Printf(LogERROR, "Failed(2) to malloc %lu for %s: %s\n",
-                   (unsigned long)st.st_size, _PATH_RESCONF, strerror(errno));
+                   (unsigned long)st.st_size, PATH_RESCONF, strerror(errno));
         free(ipcp->ns.resolv_nons);
         ipcp->ns.resolv_nons = NULL;
       } else if ((got = read(fd, ipcp->ns.resolv, st.st_size)) != st.st_size) {
         if (got == -1)
           log_Printf(LogERROR, "Failed to read %s: %s\n",
-                     _PATH_RESCONF, strerror(errno));
+                     PATH_RESCONF, strerror(errno));
         else
           log_Printf(LogERROR, "Failed to read %s, got %lu not %lu\n",
-                     _PATH_RESCONF, (unsigned long)got,
+                     PATH_RESCONF, (unsigned long)got,
                      (unsigned long)st.st_size);
         free(ipcp->ns.resolv_nons);
         ipcp->ns.resolv_nons = NULL;
@@ -274,7 +276,7 @@
       }
     } else
       log_Printf(LogERROR, "Failed to stat opened %s: %s\n",
-                 _PATH_RESCONF, strerror(errno));
+                 PATH_RESCONF, strerror(errno));
 
     close(fd);
   }
@@ -290,7 +292,7 @@
   if (ipcp->ns.dns[0].s_addr == INADDR_ANY &&
       ipcp->ns.dns[1].s_addr == INADDR_ANY) {
     log_Printf(LogIPCP, "%s not modified: All nameservers NAKd\n",
-              _PATH_RESCONF);
+              PATH_RESCONF);
     return 0;
   }
 
@@ -300,7 +302,7 @@
   }
 
   mask = umask(022);
-  if ((fp = ID0fopen(_PATH_RESCONF, "w")) != NULL) {
+  if ((fp = ID0fopen(PATH_RESCONF, "w")) != NULL) {
     umask(mask);
     if (ipcp->ns.resolv_nons)
       fputs(ipcp->ns.resolv_nons, fp);
@@ -315,7 +317,7 @@
       fprintf(fp, "nameserver %s\n", paddr);
     }
     if (fclose(fp) == EOF) {
-      log_Printf(LogERROR, "write(): Failed updating %s: %s\n", _PATH_RESCONF,
+      log_Printf(LogERROR, "write(): Failed updating %s: %s\n", PATH_RESCONF,
                  strerror(errno));
       return 0;
     }
@@ -332,22 +334,22 @@
     ssize_t got, len;
     int fd;
 
-    if ((fd = ID0open(_PATH_RESCONF, O_WRONLY|O_TRUNC, 0644)) != -1) {
+    if ((fd = ID0open(PATH_RESCONF, O_WRONLY|O_TRUNC, 0644)) != -1) {
       len = strlen(ipcp->ns.resolv);
       if ((got = write(fd, ipcp->ns.resolv, len)) != len) {
         if (got == -1)
           log_Printf(LogERROR, "Failed rewriting %s: write: %s\n",
-                     _PATH_RESCONF, strerror(errno));
+                     PATH_RESCONF, strerror(errno));
         else
           log_Printf(LogERROR, "Failed rewriting %s: wrote %ld of %ld\n",
-                     _PATH_RESCONF, (long)got, (long)len);
+                     PATH_RESCONF, (long)got, (long)len);
       }
       close(fd);
     } else
-      log_Printf(LogERROR, "Failed rewriting %s: open: %s\n", _PATH_RESCONF,
+      log_Printf(LogERROR, "Failed rewriting %s: open: %s\n", PATH_RESCONF,
                  strerror(errno));
-  } else if (remove(_PATH_RESCONF) == -1)
-    log_Printf(LogERROR, "Failed removing %s: %s\n", _PATH_RESCONF,
+  } else if (remove(PATH_RESCONF) == -1)
+    log_Printf(LogERROR, "Failed removing %s: %s\n", PATH_RESCONF,
                strerror(errno));
 
 }
