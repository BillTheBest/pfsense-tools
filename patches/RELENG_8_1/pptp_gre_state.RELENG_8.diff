Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf.c,v
retrieving revision 1.9
diff -u -r1.9 pf.c
--- sys/contrib/pf/net/pf.c	20 Oct 2010 18:01:59 -0000	1.9
+++ sys/contrib/pf/net/pf.c	20 Oct 2010 20:47:03 -0000
@@ -275,7 +275,8 @@
 			    struct pfi_kif *, struct mbuf *, int,
 			    void *, struct pf_pdesc *, u_short *);
 int			 pf_test_state_other(struct pf_state **, int,
-			    struct pfi_kif *, struct pf_pdesc *);
+			    struct pfi_kif *, struct mbuf *, int,
+			    struct pf_pdesc *);
 int			 pf_match_tag(struct mbuf *, struct pf_rule *,
 			     struct pf_mtag *, int *);
 int			 pf_step_out_of_anchor(int *, struct pf_ruleset **,
@@ -335,6 +336,19 @@
 };
 #endif
 
+/* XXX: This are here until a pluggable framework for NAT is finished */
+struct pf_grehdr {                 /* Enhanced GRE header. */
+        u_int16_t       gh_flags;       /* Flags. */
+        u_int16_t       gh_protocol;    /* Protocol type. */
+        u_int16_t       gh_length;      /* Payload length. */
+        u_int16_t       gh_call_id;     /* Call ID. */
+};
+/* The PPTP protocol ID used in the GRE 'proto' field. */
+#define PPTP_GRE_PROTO          0x880b
+/* Bits that must be set a certain way in all PPTP/GRE packets. */
+#define PPTP_INIT_VALUE         ((0x2001 << 16) | PPTP_GRE_PROTO)
+#define PPTP_INIT_MASK          0xef7fffff
+
 #define PPACKET_LOOPED()						\
 	(pd->pf_mtag->flags & PF_PACKET_LOOPED)
 
@@ -4382,6 +4396,8 @@
 	struct pf_ruleset	*ruleset = NULL;
 	struct pf_src_node	*nsn = NULL;
 	struct pf_addr		*saddr = pd->src, *daddr = pd->dst;
+	struct pf_grehdr	 gr;
+	u_int16_t		 callid = 0;
 	sa_family_t		 af = pd->af;
 	u_short			 reason;
 	int			 tag = -1, rtableid = -1;
@@ -4603,6 +4619,12 @@
 		s->proto = pd->proto;
 		s->direction = direction;
 		s->af = af;
+		if (pd->proto == IPPROTO_GRE &&
+		    pf_pull_hdr(m, off, &gr, sizeof(gr),
+		    NULL, NULL, pd->af)  != NULL &&
+		    ((ntohl(*((u_int32_t *) &gr)) & PPTP_INIT_MASK) ==
+		    PPTP_INIT_VALUE))
+			callid = gr.gh_call_id;
 		if (direction == PF_OUT) {
 			PF_ACPY(&s->gwy.addr, saddr, af);
 			PF_ACPY(&s->ext.addr, daddr, af);
@@ -4610,6 +4632,7 @@
 				PF_ACPY(&s->lan.addr, &pd->baddr, af);
 			else
 				PF_ACPY(&s->lan.addr, &s->gwy.addr, af);
+			s->lan.port = callid;
 		} else {
 			PF_ACPY(&s->lan.addr, daddr, af);
 			PF_ACPY(&s->ext.addr, saddr, af);
@@ -4617,6 +4640,7 @@
 				PF_ACPY(&s->gwy.addr, &pd->baddr, af);
 			else
 				PF_ACPY(&s->gwy.addr, &s->lan.addr, af);
+			s->ext.port = callid;
 		}
 		s->src.state = PFOTHERS_SINGLE;
 		s->dst.state = PFOTHERS_NO_TRAFFIC;
@@ -6124,34 +6148,44 @@
 
 int
 pf_test_state_other(struct pf_state **state, int direction, struct pfi_kif *kif,
-    struct pf_pdesc *pd)
+    struct mbuf *m, int off, struct pf_pdesc *pd)
 {
 	struct pf_state_peer	*src, *dst;
 	struct pf_state_cmp	 key;
+	struct pf_grehdr	 gr;
+	u_int16_t		 callid = 0;
 
 	key.af = pd->af;
 	key.proto = pd->proto;
+
+	if (pd->proto == IPPROTO_GRE &&
+	    pf_pull_hdr(m, off, &gr, sizeof(gr),
+	    NULL, NULL, pd->af)  != NULL &&
+	    ((ntohl(*((u_int32_t *) &gr)) & PPTP_INIT_MASK) ==
+	    PPTP_INIT_VALUE))
+		callid = gr.gh_call_id;
+
 	if (PPACKET_LOOPED()) {
                 if (direction == PF_IN) {
                         PF_ACPY(&key.lan.addr, pd->dst, key.af);
                         PF_ACPY(&key.ext.addr, pd->src, key.af);
-                        key.lan.port = 0;
+                        key.lan.port = callid;
                         key.ext.port = 0;
                 } else {
                         PF_ACPY(&key.ext.addr, pd->dst, key.af);
                         PF_ACPY(&key.gwy.addr, pd->src, key.af);
-                        key.ext.port = 0;
+                        key.ext.port = callid;
                         key.gwy.port = 0;
                 }
         } else if (direction == PF_IN) {
 		PF_ACPY(&key.ext.addr, pd->src, key.af);
 		PF_ACPY(&key.gwy.addr, pd->dst, key.af);
-		key.ext.port = 0;
+		key.ext.port = callid;
 		key.gwy.port = 0;
 	} else {
 		PF_ACPY(&key.lan.addr, pd->src, key.af);
 		PF_ACPY(&key.ext.addr, pd->dst, key.af);
-		key.lan.port = 0;
+		key.lan.port = callid;
 		key.ext.port = 0;
 	}
 
@@ -7435,7 +7469,7 @@
 #endif
 
 	default:
-		action = pf_test_state_other(&s, dir, kif, &pd);
+		action = pf_test_state_other(&s, dir, kif, m, off, &pd);
 		if (action == PF_PASS) {
 #if NPFSYNC
 			pfsync_update_state(s);
@@ -8029,7 +8063,7 @@
 	}
 
 	default:
-		action = pf_test_state_other(&s, dir, kif, &pd);
+		action = pf_test_state_other(&s, dir, kif, m, off, &pd);
 		if (action == PF_PASS) {
 #if NPFSYNC
 			pfsync_update_state(s);
