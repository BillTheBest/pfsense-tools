Index: sys/conf/files
===================================================================
RCS file: /home/ermal/tmprepo/RELENG_7/sys/conf/files,v
retrieving revision 1.2
diff -u -r1.2 files
--- sys/conf/files	11 Feb 2009 23:20:04 -0000	1.2
+++ sys/conf/files	14 Mar 2009 12:44:19 -0000
@@ -334,6 +334,8 @@
 	compile-with "${NORMAL_C} -I$S/contrib/pf"
 contrib/pf/net/pf_table.c	optional pf \
 	compile-with "${NORMAL_C} -I$S/contrib/pf"
+contrib/pf/net/pf_ftp.c		optional pf \
+	compile-with "${NORMAL_C} -I$S/contrib/pf"
 contrib/pf/netinet/in4_cksum.c	optional pf inet
 crypto/blowfish/bf_ecb.c	optional ipsec 
 crypto/blowfish/bf_skey.c	optional crypto | ipsec 
Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /home/ermal/tmprepo/RELENG_7/sys/contrib/pf/net/pf.c,v
retrieving revision 1.4
diff -u -r1.4 pf.c
--- sys/contrib/pf/net/pf.c	14 Mar 2009 11:37:24 -0000	1.4
+++ sys/contrib/pf/net/pf.c	16 Mar 2009 18:46:48 -0000
@@ -300,8 +300,6 @@
 			    sa_family_t);
 u_int16_t		 pf_calc_mss(struct pf_addr *, sa_family_t,
 				u_int16_t);
-void			 pf_set_rt_ifp(struct pf_state *,
-			    struct pf_addr *);
 int			 pf_check_proto_cksum(struct mbuf *, int, int,
 			    u_int8_t, sa_family_t);
 int			 pf_addr_wrap_neq(struct pf_addr_wrap *,
@@ -522,6 +520,8 @@
 
 	if ((diff = a->lan.port - b->lan.port) != 0)
 		return (diff);
+	if (b->ext.pad)
+		return (0);
 	if ((diff = a->ext.port - b->ext.port) != 0)
 		return (diff);
 
@@ -592,10 +592,12 @@
 #endif /* INET6 */
 	}
 
-	if ((diff = a->ext.port - b->ext.port) != 0)
-		return (diff);
 	if ((diff = a->gwy.port - b->gwy.port) != 0)
 		return (diff);
+	if (b->ext.pad)
+		return (0);
+	if ((diff = a->ext.port - b->ext.port) != 0)
+		return (diff);
 
 	return (0);
 }
@@ -4674,11 +4676,12 @@
 	struct tcphdr		*th = pd->hdr.tcp;
 	struct pf_rule		*r = NULL;
 	u_int16_t		 win = ntohs(th->th_win);
-	u_int32_t		 ack, end, seq, orig_seq;
+	u_int32_t		 ack = 0, end, seq, orig_seq;
 	u_int8_t		 sws, dws;
-	int			 ackskew;
+	int			 ackskew, delta1 = 0;
 	int			 copyback = 0;
 	struct pf_state_peer	*src, *dst;
+	struct pf_rule *nat = NULL;
 
 	key.af = pd->af;
 	key.proto = IPPROTO_TCP;
@@ -4706,6 +4709,54 @@
 		dst = &(*state)->src;
 	}
 	
+        if (src->state == TCPS_LISTEN || dst->state == TCPS_LISTEN) {
+                if (direction == PF_IN) {
+                        (*state)->ext.port = th->th_sport;
+                        (*state)->ext.pad = 0;
+                        src->state = TCPS_SYN_SENT;
+                        dst->state = TCPS_CLOSED;
+                } else {
+                        (*state)->ext.port = th->th_dport;
+                        (*state)->ext.pad = 0;
+                        dst->state = TCPS_SYN_SENT;
+                        src->state = TCPS_CLOSED;
+                }
+                (*state)->src.seqlo = ntohl(th->th_seq);
+                (*state)->src.seqhi = (*state)->src.seqlo + pd->tot_len - off - (th->th_off << 2) + 1;
+                if ((th->th_flags & (TH_SYN|TH_ACK)) == TH_SYN &&
+                    r->keep_state == PF_STATE_MODULATE) {
+                        /* Generate sequence number modulator */
+#ifdef __FreeBSD__
+                        while (((*state)->src.seqdiff =
+                            pf_new_isn(*state) - (*state)->src.seqlo) == 0)
+                                ;
+#else
+                        while (((*state)->src.seqdiff =
+                            tcp_rndiss_next() - (*state)->src.seqlo) == 0)
+                                ;
+#endif
+                        pf_change_a(&th->th_seq, &th->th_sum,
+                            htonl((*state)->src.seqlo + (*state)->src.seqdiff), 0);
+                } else
+                        (*state)->src.seqdiff = 0;
+                if (th->th_flags & TH_SYN) {
+                        (*state)->src.seqhi++;
+                        (*state)->src.wscale = pf_get_wscale(m, off, th->th_off, pd->af);
+                }
+                (*state)->src.max_win = MAX(ntohs(th->th_win), 1);
+                if ((*state)->src.wscale & PF_WSCALE_MASK) {
+                        /* Remove scale factor from initial window */
+                        int win = (*state)->src.max_win;
+                        win += 1 << ((*state)->src.wscale & PF_WSCALE_MASK);
+                        (*state)->src.max_win = (win - 1) >>
+                            ((*state)->src.wscale & PF_WSCALE_MASK);
+                }
+                if (th->th_flags & TH_FIN)
+                        (*state)->src.seqhi++;
+
+                goto tcpnat;
+        }
+
 	/*
          * First state is created by the rules checking code and if we reloop
          * the first packet that hit the rule pf will not like it.
@@ -4923,14 +4974,54 @@
 			src->max_win = win;
 
 	} else {
-		ack = ntohl(th->th_ack) - dst->seqdiff;
-		if (src->seqdiff) {
-			/* Modulate sequence numbers */
-			pf_change_a(&th->th_seq, &th->th_sum, htonl(seq +
-			    src->seqdiff), 0);
-			pf_change_a(&th->th_ack, &th->th_sum, htonl(ack), 0);
-			copyback = 1;
-		}
+		/* 
+		 * This allows to track state even when we modify the sequence of one side of the
+		 * connection. pf(4) itself has mechanisms for this but it is not suited when
+		 * a sequence is modified after state establishment.
+		 */
+		nat = (*state)->nat_rule.ptr;
+		if (nat != NULL) {
+			if (src->seqdiffoneway)
+				delta1 = src->seqflags & SEQ_DIFF_NEGATIVE ? -src->seqdiffoneway
+					: src->seqdiffoneway;
+			else if (dst->seqdiffoneway)
+				delta1 = dst->seqflags & SEQ_DIFF_NEGATIVE ? -dst->seqdiffoneway
+					: dst->seqdiffoneway;
+			
+			if (delta1) {
+				switch (nat->action) {
+				case PF_NAT:
+					if (direction == (*state)->direction)
+						seq += delta1;
+					else
+                        			ack = ntohl(th->th_ack) - dst->seqdiff - delta1;
+					break;
+				case PF_RDR:
+					if (direction != (*state)->direction)
+						seq += delta1;
+					else
+                        			ack = ntohl(th->th_ack) - dst->seqdiff - delta1;
+					break;
+				case PF_BINAT:
+					if (direction == PF_OUT)
+						seq += delta1;
+					else 
+                        			ack = ntohl(th->th_ack) - dst->seqdiff - delta1;
+					break;
+				}
+			}
+			if (!ack)
+				ack = ntohl(th->th_ack) - dst->seqdiff;
+		} else
+			ack = ntohl(th->th_ack) - dst->seqdiff;
+
+                if (src->seqdiff || delta1) {
+                        /* Modulate sequence numbers */
+                        pf_change_a(&th->th_seq, &th->th_sum, htonl(seq +
+                            src->seqdiff), 0);
+                        pf_change_a(&th->th_ack, &th->th_sum, htonl(ack), 0);
+                        copyback = 1;
+                }
 		end = seq + pd->p_len;
 		if (th->th_flags & TH_SYN)
 			end++;
@@ -5170,7 +5261,7 @@
 	}
 
 	/* Any packets which have gotten here are to be passed */
-
+tcpnat:
 	/* translate source/destination address, if necessary */
 	if (STATE_TRANSLATE(*state)) {
 		if (direction == PF_OUT)
@@ -6997,6 +7088,10 @@
 			action = pf_test_tcp(&r, &s, dir, kif,
 			    m, off, h, &pd, &a, &ruleset, &ipintrq);
 #endif
+		if (action == PF_PASS && s != NULL && s->nat_rule.ptr != NULL) {
+			if (ntohs(th.th_dport) == 21 || ntohs(th.th_sport) == 21)
+				pf_handle_ftp(&pd, m, s, off, dir);
+		}
 		break;
 	}
 
Index: sys/contrib/pf/net/pf_ftp.c
===================================================================
RCS file: sys/contrib/pf/net/pf_ftp.c
diff -N sys/contrib/pf/net/pf_ftp.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sys/contrib/pf/net/pf_ftp.c	16 Mar 2009 18:47:09 -0000
@@ -0,0 +1,689 @@
+/*-
+ * Copyright (c) 2001 Charles Mott <cm@linktel.net>
+ * Copyright (c) 2009 Ermal Lu√ßi 
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "opt_inet.h"
+#include "opt_inet6.h"
+
+#include <sys/cdefs.h>
+
+/* Includes */
+#include <sys/param.h>
+#include <sys/ctype.h>
+#include <sys/systm.h>
+#include <sys/mbuf.h>
+#include <sys/socket.h>
+#include <sys/socketvar.h>
+#include <sys/kernel.h>
+
+
+#include <net/if.h>
+#include <net/if_types.h>
+#include <net/bpf.h>
+#include <net/route.h>
+
+#include <netinet/in.h>
+#include <netinet/in_var.h>
+#include <netinet/in_systm.h>
+#include <netinet/ip.h>
+#include <netinet/ip_var.h>
+#include <netinet/tcp.h>
+
+#include <machine/in_cksum.h>
+#include <net/pfvar.h>
+
+#define MAX_MESSAGE_SIZE	128
+#define FTP_CONTROL_PORT_NUMBER	21
+
+/* FTP protocol flags. */
+#define WAIT_CRLF		0x01
+
+enum ftp_message_type {
+	FTP_PORT_COMMAND,
+	FTP_EPRT_COMMAND,
+	FTP_227_REPLY,
+	FTP_229_REPLY,
+	FTP_UNKNOWN_MESSAGE
+};
+
+static int	ParseFtpPortCommand(u_int16_t *, char *, int);
+static int	ParseFtpEprtCommand(u_int16_t *, char *, int);
+static int	ParseFtp227Reply(u_int16_t *, char *, int);
+static int	ParseFtp229Reply(u_int16_t *, char *, int);
+static void	NewFtpMessage(struct pf_pdesc *, struct pf_state *, struct mbuf *,
+			int *, int, u_int16_t, int);
+
+#define BOUND_IFACE(r, k) \
+        ((r)->rule_flag & PFRULE_IFBOUND) ? (k) : pfi_all
+
+#define STATE_INC_COUNTERS(s)                           \
+        do {                                            \
+                s->rule.ptr->states++;                  \
+                if (s->anchor.ptr != NULL)              \
+                        s->anchor.ptr->states++;        \
+                if (s->nat_rule.ptr != NULL)            \
+                        s->nat_rule.ptr->states++;      \
+        } while (0)
+
+#define STATE_DEC_COUNTERS(s)                           \
+        do {                                            \
+                if (s->nat_rule.ptr != NULL)            \
+                        s->nat_rule.ptr->states--;      \
+                if (s->anchor.ptr != NULL)              \
+                        s->anchor.ptr->states--;        \
+                s->rule.ptr->states--;                  \
+        } while (0)
+
+void
+pf_handle_ftp(struct pf_pdesc *pd, struct mbuf *m, struct pf_state *state, int off, int dir) 
+{
+	int hlen;
+	char *sptr;
+	struct tcphdr *tc;
+	int ftp_message_type, reason, delta = 0;
+	u_int16_t oport = 0; /* Make compiler happy */
+	struct pf_state *s = NULL;
+	struct pf_rule *r = state->rule.ptr;
+	struct pf_rule *nr = state->nat_rule.ptr;
+
+	hlen = pd->tot_len - pd->p_len;
+	/* Place string pointer and beginning of data */
+	sptr = mtod(m, char *);
+	sptr += hlen;
+	tc = (struct tcphdr *)sptr;
+
+	/*
+ 	 * Check that data length is not too long and previous message was
+ 	 * properly terminated with CRLF.
+ 	*/
+	if (pd->p_len <= MAX_MESSAGE_SIZE ) { 
+		ftp_message_type = FTP_UNKNOWN_MESSAGE;
+
+		if (state->direction == PF_OUT) {
+ 			/* When aliasing a client, check for the PORT/EPRT command. */
+			if (ParseFtpPortCommand(&oport, sptr, pd->p_len))
+				ftp_message_type = FTP_PORT_COMMAND;
+			else if (ParseFtpEprtCommand(&oport, sptr, pd->p_len))
+				ftp_message_type = FTP_EPRT_COMMAND;
+		} else {
+ 			/* When aliasing a server, check for the 227/229 reply. */
+			if (ParseFtp227Reply(&oport, sptr, pd->p_len))
+				ftp_message_type = FTP_227_REPLY;
+			else if (ParseFtp229Reply(&oport, sptr, pd->p_len)) {
+				ftp_message_type = FTP_229_REPLY;
+			}
+		}
+
+		if (ftp_message_type != FTP_UNKNOWN_MESSAGE) 
+			NewFtpMessage(pd, state, m, &delta, off, oport, ftp_message_type);
+
+
+		if (((ftp_message_type == FTP_227_REPLY ||
+			ftp_message_type == FTP_229_REPLY) && nr->action == PF_NAT) ||
+			 ftp_message_type == FTP_UNKNOWN_MESSAGE) 
+			return;
+
+		s = pool_get(&pf_state_pl, PR_NOWAIT);
+                if (s == NULL) {
+                        REASON_SET(&reason, PFRES_MEMORY);
+                        return;
+                }
+                bzero(s, sizeof(*s));
+                s->rule.ptr = r;
+                s->nat_rule.ptr = nr;
+                s->anchor.ptr = state->anchor.ptr;
+                STATE_INC_COUNTERS(s);
+                s->allow_opts = state->allow_opts;
+                s->log = state->log;
+                s->proto = IPPROTO_TCP;
+                s->af = pd->af;
+		if (nr->action == PF_RDR || (state->direction == PF_IN && nr->action == PF_BINAT))
+                	s->direction = state->direction;
+		else
+			s->direction = (state->direction == PF_IN ? PF_OUT : PF_IN);
+		/* This is inverted. */
+                if (s->direction == PF_OUT) {
+                        PF_ACPY(&s->gwy.addr, &state->gwy.addr, pd->af);
+                        s->gwy.port = htons(oport); 
+                        PF_ACPY(&s->ext.addr, &state->lan.addr, pd->af);
+                        s->lan.port = 0; 
+			s->lan.pad = FTP_CONTROL_PORT_NUMBER;
+                        PF_ACPY(&s->lan.addr, &state->ext.addr, pd->af);
+                        s->ext.port = htons(oport);
+                } else {
+                        PF_ACPY(&s->ext.addr, &state->ext.addr, pd->af);
+                        s->ext.port = 0;
+			s->ext.pad = FTP_CONTROL_PORT_NUMBER;
+                        PF_ACPY(&s->lan.addr, &state->lan.addr, pd->af);
+                        s->lan.port = htons(oport);
+                        PF_ACPY(&s->gwy.addr, &state->gwy.addr, pd->af);
+                        s->gwy.port = htons(oport);
+		}
+                s->src.state = TCPS_LISTEN;
+                s->dst.state = TCPS_LISTEN;
+                s->creation = time_second;
+                s->expire = time_second;
+                s->timeout = PFTM_TCP_FIRST_PACKET;
+                pf_set_rt_ifp(s, pd->dst);
+		if (pf_insert_state(BOUND_IFACE(s->rule.ptr, state->rt_kif), s)) {
+                        pf_normalize_tcp_cleanup(s);
+                        REASON_SET(&reason, PFRES_STATEINS);
+                        pf_src_tree_remove_state(s);
+                        STATE_DEC_COUNTERS(s);
+                        pool_put(&pf_state_pl, s);
+			if (state->src.seqdiffoneway)
+				state->src.seqdiffoneway -= delta;
+                } 
+	}
+#if 0
+/* Track the msgs which are CRLF term'd for PORT/PASV FW breach */
+	if (pd->p_len) {		/* only if there's data */
+		if (sptr[pd->tot_len - 2] == '\r' && sptr[pd->tot_len - 1] == '\n')
+			state->ext.pad &= ~WAIT_CRLF;
+		else
+			state->ext.pad |= WAIT_CRLF;
+	}
+#endif
+}
+
+static int
+ParseFtpPortCommand(u_int16_t *oport, char *sptr, int dlen)
+{
+	char ch;
+	int i, state;
+	u_int32_t addr;
+	u_short port;
+	u_int8_t octet;
+
+	/* Format: "PORT A,D,D,R,PO,RT". */
+
+	/* Return if data length is too short. */
+	if (dlen < 18)
+		return (0);
+
+	addr = port = octet = 0;
+	state = -4;
+	for (i = 0; i < dlen; i++) {
+		ch = sptr[i];
+		switch (state) {
+		case -4:
+			if (ch == 'P')
+				state++;
+			else
+				return (0);
+			break;
+		case -3:
+			if (ch == 'O')
+				state++;
+			else
+				return (0);
+			break;
+		case -2:
+			if (ch == 'R')
+				state++;
+			else
+				return (0);
+			break;
+		case -1:
+			if (ch == 'T')
+				state++;
+			else
+				return (0);
+			break;
+
+		case 0:
+			if (isspace(ch))
+				break;
+			else
+				state++;
+		case 1:
+		case 3:
+		case 5:
+		case 7:
+		case 9:
+		case 11:
+			if (isdigit(ch)) {
+				octet = ch - '0';
+				state++;
+			} else
+				return (0);
+			break;
+		case 2:
+		case 4:
+		case 6:
+		case 8:
+			if (isdigit(ch))
+				octet = 10 * octet + ch - '0';
+			else if (ch == ',') {
+				addr = (addr << 8) + octet;
+				state++;
+			} else
+				return (0);
+			break;
+		case 10:
+		case 12:
+			if (isdigit(ch))
+				octet = 10 * octet + ch - '0';
+			else if (ch == ',' || state == 12) {
+				port = (port << 8) + octet;
+				state++;
+			} else
+				return (0);
+			break;
+		}
+	}
+
+	if (state == 13) {
+		*oport = port;
+		return (1);
+	} else
+		return (0);
+}
+
+static int
+ParseFtpEprtCommand(u_int16_t *oport, char *sptr, int dlen)
+{
+	char ch, delim;
+	int i, state;
+	u_int32_t addr;
+	u_short port;
+	u_int8_t octet;
+
+	/* Format: "EPRT |1|A.D.D.R|PORT|". */
+
+	/* Return if data length is too short. */
+	if (dlen < 18)
+		return (0);
+
+	addr = port = octet = 0;
+	delim = '|';		/* XXX gcc -Wuninitialized */
+	state = -4;
+	for (i = 0; i < dlen; i++) {
+		ch = sptr[i];
+		switch (state) {
+		case -4:
+			if (ch == 'E')
+				state++;
+			else
+				return (0);
+			break;
+		case -3:
+			if (ch == 'P')
+				state++;
+			else
+				return (0);
+			break;
+		case -2:
+			if (ch == 'R')
+				state++;
+			else
+				return (0);
+			break;
+		case -1:
+			if (ch == 'T')
+				state++;
+			else
+				return (0);
+			break;
+
+		case 0:
+			if (!isspace(ch)) {
+				delim = ch;
+				state++;
+			}
+			break;
+		case 1:
+			if (ch == '1')	/* IPv4 address */
+				state++;
+			else
+				return (0);
+			break;
+		case 2:
+			if (ch == delim)
+				state++;
+			else
+				return (0);
+			break;
+		case 3:
+		case 5:
+		case 7:
+		case 9:
+			if (isdigit(ch)) {
+				octet = ch - '0';
+				state++;
+			} else
+				return (0);
+			break;
+		case 4:
+		case 6:
+		case 8:
+		case 10:
+			if (isdigit(ch))
+				octet = 10 * octet + ch - '0';
+			else if (ch == '.' || state == 10) {
+				addr = (addr << 8) + octet;
+				state++;
+			} else
+				return (0);
+			break;
+		case 11:
+			if (isdigit(ch)) {
+				port = ch - '0';
+				state++;
+			} else
+				return (0);
+			break;
+		case 12:
+			if (isdigit(ch))
+				port = 10 * port + ch - '0';
+			else if (ch == delim)
+				state++;
+			else
+				return (0);
+			break;
+		}
+	}
+
+	if (state == 13) {
+		*oport = port;
+		return (1);
+	} else
+		return (0);
+}
+
+static int
+ParseFtp227Reply(u_int16_t *oport, char *sptr, int dlen)
+{
+	char ch;
+	int i, state;
+	u_int32_t addr;
+	u_short port;
+	u_int8_t octet;
+
+	/* Format: "227 Entering Passive Mode (A,D,D,R,PO,RT)" */
+
+	/* Return if data length is too short. */
+	if (dlen < 17)
+		return (0);
+
+	addr = port = octet = 0;
+
+	state = -3;
+	for (i = 0; i < dlen; i++) {
+		ch = sptr[i];
+		switch (state) {
+		case -3:
+			if (ch == '2')
+				state++;
+			else
+				return (0);
+			break;
+		case -2:
+			if (ch == '2')
+				state++;
+			else
+				return (0);
+			break;
+		case -1:
+			if (ch == '7')
+				state++;
+			else
+				return (0);
+			break;
+
+		case 0:
+			if (ch == '(')
+				state++;
+			break;
+		case 1:
+		case 3:
+		case 5:
+		case 7:
+		case 9:
+		case 11:
+			if (isdigit(ch)) {
+				octet = ch - '0';
+				state++;
+			} else
+				return (0);
+			break;
+		case 2:
+		case 4:
+		case 6:
+		case 8:
+			if (isdigit(ch))
+				octet = 10 * octet + ch - '0';
+			else if (ch == ',') {
+				addr = (addr << 8) + octet;
+				state++;
+			} else
+				return (0);
+			break;
+		case 10:
+		case 12:
+			if (isdigit(ch))
+				octet = 10 * octet + ch - '0';
+			else if (ch == ',' || (state == 12 && ch == ')')) {
+				port = (port << 8) + octet;
+				state++;
+			} else
+				return (0);
+			break;
+		}
+	}
+
+	if (state == 13) {
+		*oport = port;
+		return (1);
+	} else
+		return (0);
+}
+
+static int
+ParseFtp229Reply(u_int16_t *oport, char *sptr, int dlen)
+{
+	char ch, delim;
+	int i, state;
+	u_short port;
+
+	/* Format: "229 Entering Extended Passive Mode (|||PORT|)" */
+
+	/* Return if data length is too short. */
+	if (dlen < 11)
+		return (0);
+
+	port = 0;
+	delim = '|';		/* XXX gcc -Wuninitialized */
+
+	state = -3;
+	for (i = 0; i < dlen; i++) {
+		ch = sptr[i];
+		switch (state) {
+		case -3:
+			if (ch == '2')
+				state++;
+			else
+				return (0);
+			break;
+		case -2:
+			if (ch == '2')
+				state++;
+			else
+				return (0);
+			break;
+		case -1:
+			if (ch == '9')
+				state++;
+			else
+				return (0);
+			break;
+
+		case 0:
+			if (ch == '(')
+				state++;
+			break;
+		case 1:
+			delim = ch;
+			state++;
+			break;
+		case 2:
+		case 3:
+			if (ch == delim)
+				state++;
+			else
+				return (0);
+			break;
+		case 4:
+			if (isdigit(ch)) {
+				port = ch - '0';
+				state++;
+			} else
+				return (0);
+			break;
+		case 5:
+			if (isdigit(ch))
+				port = 10 * port + ch - '0';
+			else if (ch == delim)
+				state++;
+			else
+				return (0);
+			break;
+		case 6:
+			if (ch == ')')
+				state++;
+			else
+				return (0);
+			break;
+		}
+	}
+
+	if (state == 7) {
+		*oport = port;
+		return (1);
+	} else
+		return (0);
+}
+
+static void
+NewFtpMessage(struct pf_pdesc *pd, struct pf_state *s, struct mbuf *m,
+    int *delta, int off, u_int16_t alias_port, int ftp_message_type)
+{
+	/* Create new FTP message. */
+	char stemp[MAX_MESSAGE_SIZE + 1];
+	struct ip *ip = mtod(m, struct ip *);
+	struct tcphdr *th;
+	struct pf_addr *a;
+	int hlen, slen;
+	int p1, p2;
+	u_char *ptr;
+	u_int16_t olen;
+
+	th = (struct tcphdr *)(ip + 1);
+	hlen = pd->tot_len - pd->p_len;
+
+	switch (ftp_message_type) {
+		case FTP_PORT_COMMAND:
+		case FTP_227_REPLY:
+			/* Decompose alias port into pair format. */
+			alias_port = htons(alias_port);
+			ptr = (char *)&alias_port;
+			p1 = *ptr++;
+			p2 = *ptr;
+
+			if (ftp_message_type == FTP_PORT_COMMAND) {
+				a = &s->gwy.addr;
+				/* Generate PORT command string. */
+				sprintf(stemp, "PORT %d,%d,%d,%d,%d,%d\r\n",
+				    a->addr8[0],
+					a->addr8[1],
+					a->addr8[2],
+					a->addr8[3], p1, p2);
+			} else {
+				if (s->direction == PF_OUT || s->nat_rule.ptr->action != PF_NAT)
+					a = &s->gwy.addr;
+				else
+					a = &s->ext.addr;
+				/* Generate 227 reply string. */
+				sprintf(stemp,
+				    "227 Entering Passive Mode (%d,%d,%d,%d,%d,%d)\r\n",
+					a->addr8[0],
+                                        a->addr8[1],
+                                        a->addr8[2],
+                                        a->addr8[3], p1, p2);
+			}
+			break;
+		case FTP_EPRT_COMMAND:
+			a = &s->gwy.addr;
+			/* Generate EPRT command string. */
+			sprintf(stemp, "EPRT |1|%d.%d.%d.%d|%d|\r\n",
+				a->addr8[0], a->addr8[1], a->addr8[2], a->addr8[3],
+				alias_port);
+			break;
+		case FTP_229_REPLY:
+			return;
+			/* 
+			 * XXXermal: I do not think this needs intervention. 
+			 * Generate 229 reply string. 
+			 */
+			sprintf(stemp, "229 Entering Extended Passive Mode (|||%d|)\r\n",
+			    alias_port);
+			break;
+	}
+	/* Save string length for IP header modification */
+	slen = strlen(stemp);
+
+	/* Save information regarding modified seq and ack numbers */
+	*delta = slen - pd->p_len;
+	olen = ip->ip_len;
+	ip->ip_len = ntohs(ip->ip_len);
+	if (*delta) {
+		if (*delta > 0) 
+			s->src.seqdiffoneway += *delta;
+		else {
+			s->src.seqdiffoneway += -*delta;
+			s->src.seqflags |= SEQ_DIFF_NEGATIVE;
+		}
+		pd->p_len += *delta;
+		pd->tot_len = pd->tot_len + *delta;
+		ip->ip_len += *delta;
+		m->m_len = m->m_pkthdr.len = ip->ip_len;
+	}
+	th->th_x2 = 0;
+	th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr, 
+    			htons(ip->ip_p + ip->ip_len - off));
+	m_copyback(m, hlen, slen, (caddr_t)stemp);
+	m->m_pkthdr.csum_data = offsetof(struct tcphdr, th_sum);
+	in_delayed_cksum(m);
+	m->m_pkthdr.csum_flags &= ~CSUM_DELAY_DATA;
+
+	/* Revise IP header */
+	ip->ip_len = htons(ip->ip_len);
+	if (*delta)
+		ip->ip_sum = pf_cksum_fixup(ip->ip_sum,
+			olen, ip->ip_len, 0);		
+
+	return;
+}
Index: sys/contrib/pf/net/pfvar.h
===================================================================
RCS file: /home/ermal/tmprepo/RELENG_7/sys/contrib/pf/net/pfvar.h,v
retrieving revision 1.4
diff -u -r1.4 pfvar.h
--- sys/contrib/pf/net/pfvar.h	14 Mar 2009 11:37:24 -0000	1.4
+++ sys/contrib/pf/net/pfvar.h	14 Mar 2009 12:43:10 -0000
@@ -801,7 +801,10 @@
 	u_int16_t	mss;		/* Maximum segment size option	*/
 	u_int8_t	tcp_est;	/* Did we reach TCPS_ESTABLISHED */
 	struct pf_state_scrub	*scrub;	/* state is scrubbed		*/
-	u_int8_t	pad[3];
+        u_int8_t        seqdiffoneway;  /* used on ftp modulation of sequencies for now */
+#define SEQ_DIFF_NEGATIVE       0x01
+        u_int8_t        seqflags;       /* Since we use unsigned types ... */
+	u_int8_t	pad[1];
 };
 
 TAILQ_HEAD(pf_state_queue, pf_state);
@@ -1897,6 +1900,9 @@
 /* The fingerprint functions can be linked into userland programs (tcpdump) */
 int	pf_osfp_add(struct pf_osfp_ioctl *);
 #ifdef _KERNEL
+void	pf_handle_ftp(struct pf_pdesc *, struct mbuf *, struct pf_state *, int, int);
+void	pf_set_rt_ifp(struct pf_state *, struct pf_addr *);
+
 struct pf_osfp_enlist *
 	pf_osfp_fingerprint(struct pf_pdesc *, struct mbuf *, int,
 	    const struct tcphdr *);
Index: sys/modules/pf/Makefile
===================================================================
RCS file: /home/ermal/tmprepo/RELENG_7/sys/modules/pf/Makefile,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 Makefile
--- sys/modules/pf/Makefile	11 Feb 2009 23:18:51 -0000	1.1.1.1
+++ sys/modules/pf/Makefile	14 Mar 2009 12:44:25 -0000
@@ -7,7 +7,7 @@
 
 KMOD=	pf
 SRCS = 	pf.c pf_if.c pf_subr.c pf_osfp.c pf_ioctl.c pf_norm.c pf_table.c \
-	pf_ruleset.c \
+	pf_ruleset.c pf_ftp.c \
 	in4_cksum.c \
 	opt_pf.h opt_inet.h opt_inet6.h opt_bpf.h opt_mac.h
 
