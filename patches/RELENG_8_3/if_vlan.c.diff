diff --git a/sys/net/if_vlan.c b/sys/net/if_vlan.c
index 8008f8b..0701702 100644
--- a/sys/net/if_vlan.c
+++ b/sys/net/if_vlan.c
@@ -34,12 +34,13 @@
  * we need to pretend to be enough of an Ethernet implementation
  * to make arp work.  The way we do this is by telling everyone
  * that we are an Ethernet, and then catch the packets that
- * ether_output() sends to us via if_transmit(), rewrite them for
- * use by the real outgoing interface, and ask it to send them.
+ * ether_output() left on our output queue when it calls
+ * if_start(), rewrite them for use by the real outgoing interface,
+ * and ask it to send them.
  */
 
 #include <sys/cdefs.h>
-__FBSDID("$FreeBSD: src/sys/net/if_vlan.c,v 1.139.2.12.2.1 2012/03/03 06:15:13 kensmith Exp $");
+__FBSDID("$FreeBSD: src/sys/net/if_vlan.c,v 1.139.2.9.2.1 2010/06/14 02:09:06 kensmith Exp $");
 
 #include "opt_vlan.h"
 
@@ -178,15 +179,14 @@ static __inline struct ifvlan * vlan_gethash(struct ifvlantrunk *trunk,
 #endif
 static	void trunk_destroy(struct ifvlantrunk *trunk);
 
+static	void vlan_start(struct ifnet *ifp);
 static	void vlan_init(void *foo);
 static	void vlan_input(struct ifnet *ifp, struct mbuf *m);
 static	int vlan_ioctl(struct ifnet *ifp, u_long cmd, caddr_t addr);
-static	void vlan_qflush(struct ifnet *ifp);
 static	int vlan_setflag(struct ifnet *ifp, int flag, int status,
     int (*func)(struct ifnet *, int));
 static	int vlan_setflags(struct ifnet *ifp, int status);
 static	int vlan_setmulti(struct ifnet *ifp);
-static	int vlan_transmit(struct ifnet *ifp, struct mbuf *m);
 static	void vlan_unconfig(struct ifnet *ifp);
 static	void vlan_unconfig_locked(struct ifnet *ifp);
 static	int vlan_config(struct ifvlan *ifv, struct ifnet *p, uint16_t tag);
@@ -206,11 +206,6 @@ static  void vlan_iflladdr(void *arg, struct ifnet *ifp);
 static	struct if_clone vlan_cloner = IFC_CLONE_INITIALIZER(VLANNAME, NULL,
     IF_MAXUNIT, NULL, vlan_clone_match, vlan_clone_create, vlan_clone_destroy);
 
-#ifdef VIMAGE
-static VNET_DEFINE(struct if_clone, vlan_cloner);
-#define	V_vlan_cloner	VNET(vlan_cloner)
-#endif
-
 #ifndef VLAN_ARRAY
 #define HASH(n, m)	((((n) >> 8) ^ ((n) >> 4) ^ (n)) & (m))
 
@@ -593,9 +588,7 @@ vlan_modevent(module_t mod, int type, void *data)
 		vlan_input_p = vlan_input;
 		vlan_link_state_p = vlan_link_state;
 		vlan_trunk_cap_p = vlan_trunk_capabilities;
-#ifndef VIMAGE
 		if_clone_attach(&vlan_cloner);
-#endif
 		if (bootverbose)
 			printf("vlan: initialized, using "
 #ifdef VLAN_ARRAY
@@ -607,9 +600,7 @@ vlan_modevent(module_t mod, int type, void *data)
 			       "\n");
 		break;
 	case MOD_UNLOAD:
-#ifndef VIMAGE
 		if_clone_detach(&vlan_cloner);
-#endif
 		EVENTHANDLER_DEREGISTER(ifnet_departure_event, ifdetach_tag);
 		EVENTHANDLER_DEREGISTER(iflladdr_event, iflladdr_tag);
 		vlan_input_p = NULL;
@@ -634,27 +625,6 @@ static moduledata_t vlan_mod = {
 DECLARE_MODULE(if_vlan, vlan_mod, SI_SUB_PSEUDO, SI_ORDER_ANY);
 MODULE_VERSION(if_vlan, 3);
 
-#ifdef VIMAGE
-static void
-vnet_vlan_init(const void *unused __unused)
-{
-
-	V_vlan_cloner = vlan_cloner;
-	if_clone_attach(&V_vlan_cloner);
-}
-VNET_SYSINIT(vnet_vlan_init, SI_SUB_PROTO_IFATTACHDOMAIN, SI_ORDER_ANY,
-    vnet_vlan_init, NULL);
-
-static void
-vnet_vlan_uninit(const void *unused __unused)
-{
-
-	if_clone_detach(&V_vlan_cloner);
-}
-VNET_SYSUNINIT(vnet_vlan_uninit, SI_SUB_PROTO_IFATTACHDOMAIN, SI_ORDER_FIRST,
-    vnet_vlan_uninit, NULL);
-#endif
-
 static struct ifnet *
 vlan_clone_match_ethertag(struct if_clone *ifc, const char *name, int *tag)
 {
@@ -807,9 +777,14 @@ vlan_clone_create(struct if_clone *ifc, char *name, size_t len, caddr_t params)
 	/* NB: mtu is not set here */
 
 	ifp->if_init = vlan_init;
-	ifp->if_transmit = vlan_transmit;
-	ifp->if_qflush = vlan_qflush;
+	ifp->if_start = vlan_start;
 	ifp->if_ioctl = vlan_ioctl;
+
+//	ifp->if_snd.ifq_maxlen = ifqmaxlen;
+        IFQ_SET_MAXLEN(&ifp->if_snd, ifqmaxlen);
+        ifp->if_snd.ifq_drv_maxlen = 0;
+        IFQ_SET_READY(&ifp->if_snd);
+
 	ifp->if_flags = VLAN_IFFLAGS;
 	ether_ifattach(ifp, eaddr);
 	/* Now undo some of the damage... */
@@ -846,6 +821,11 @@ vlan_clone_destroy(struct if_clone *ifc, struct ifnet *ifp)
 {
 	struct ifvlan *ifv = ifp->if_softc;
 	int unit = ifp->if_dunit;
+	int s;
+
+        s = splimp();
+        IFQ_PURGE(&ifp->if_snd);
+        splx(s);
 
 	ether_ifdetach(ifp);	/* first, remove it from system-wide lists */
 	vlan_unconfig(ifp);	/* now it can be unconfigured and freed */
@@ -865,99 +845,110 @@ vlan_init(void *foo __unused)
 }
 
 /*
- * The if_transmit method for vlan(4) interface.
+ * The if_start method for vlan(4) interface. It doesn't
+ * raises the IFF_DRV_OACTIVE flag, since it is called
+ * only from IFQ_HANDOFF() macro in ether_output_frame().
+ * If the interface queue is full, and vlan_start() is
+ * not called, the queue would never get emptied and
+ * interface would stall forever.
  */
-static int
-vlan_transmit(struct ifnet *ifp, struct mbuf *m)
+static void
+vlan_start(struct ifnet *ifp)
 {
 	struct ifvlan *ifv;
 	struct ifnet *p;
-	int error, len, mcast;
-
-	ifv = ifp->if_softc;
-	p = PARENT(ifv);
-	len = m->m_pkthdr.len;
-	mcast = (m->m_flags & (M_MCAST | M_BCAST)) ? 1 : 0;
-
-	BPF_MTAP(ifp, m);
+	struct mbuf *m;
+	int error;
 
-	/*
-	 * Do not run parent's if_transmit() if the parent is not up,
-	 * or parent's driver will cause a system crash.
-	 */
-	if (!UP_AND_RUNNING(p)) {
-		m_freem(m);
-		ifp->if_oerrors++;
-		return (0);
+	if (ALTQ_IS_ENABLED(&ifp->if_snd)) {
+		IFQ_LOCK(&ifp->if_snd);
+		IFQ_POLL_NOLOCK(&ifp->if_snd, m);
+		if (m == NULL ) {
+			IFQ_UNLOCK(&ifp->if_snd);
+			return;
+		}
+		IFQ_UNLOCK(&ifp->if_snd);
 	}
 
-	/*
-	 * Pad the frame to the minimum size allowed if told to.
-	 * This option is in accord with IEEE Std 802.1Q, 2003 Ed.,
-	 * paragraph C.4.4.3.b.  It can help to work around buggy
-	 * bridges that violate paragraph C.4.4.3.a from the same
-	 * document, i.e., fail to pad short frames after untagging.
-	 * E.g., a tagged frame 66 bytes long (incl. FCS) is OK, but
-	 * untagging it will produce a 62-byte frame, which is a runt
-	 * and requires padding.  There are VLAN-enabled network
-	 * devices that just discard such runts instead or mishandle
-	 * them somehow.
-	 */
-	if (soft_pad) {
-		static char pad[8];	/* just zeros */
-		int n;
+	ifv = ifp->if_softc;
+	p = PARENT(ifv);
 
-		for (n = ETHERMIN + ETHER_HDR_LEN - m->m_pkthdr.len;
-		     n > 0; n -= sizeof(pad))
-			if (!m_append(m, min(n, sizeof(pad)), pad))
-				break;
+	for (;;) {
+		//IF_DEQUEUE(&ifp->if_snd, m);
+		IFQ_DEQUEUE(&ifp->if_snd, m);
+		if (m == NULL)
+			break;
+		BPF_MTAP(ifp, m);
 
-		if (n > 0) {
-			if_printf(ifp, "cannot pad short frame\n");
-			ifp->if_oerrors++;
+		/*
+		 * Do not run parent's if_start() if the parent is not up,
+		 * or parent's driver will cause a system crash.
+		 */
+		if (!UP_AND_RUNNING(p)) {
 			m_freem(m);
-			return (0);
+			ifp->if_collisions++;
+			continue;
 		}
-	}
 
-	/*
-	 * If underlying interface can do VLAN tag insertion itself,
-	 * just pass the packet along. However, we need some way to
-	 * tell the interface where the packet came from so that it
-	 * knows how to find the VLAN tag to use, so we attach a
-	 * packet tag that holds it.
-	 */
-	if (p->if_capenable & IFCAP_VLAN_HWTAGGING) {
-		m->m_pkthdr.ether_vtag = ifv->ifv_tag;
-		m->m_flags |= M_VLANTAG;
-	} else {
-		m = ether_vlanencap(m, ifv->ifv_tag);
-		if (m == NULL) {
-			if_printf(ifp, "unable to prepend VLAN header\n");
-			ifp->if_oerrors++;
-			return (0);
+		/*
+		 * Pad the frame to the minimum size allowed if told to.
+		 * This option is in accord with IEEE Std 802.1Q, 2003 Ed.,
+		 * paragraph C.4.4.3.b.  It can help to work around buggy
+		 * bridges that violate paragraph C.4.4.3.a from the same
+		 * document, i.e., fail to pad short frames after untagging.
+		 * E.g., a tagged frame 66 bytes long (incl. FCS) is OK, but
+		 * untagging it will produce a 62-byte frame, which is a runt
+		 * and requires padding.  There are VLAN-enabled network
+		 * devices that just discard such runts instead or mishandle
+		 * them somehow.
+		 */
+		if (soft_pad) {
+			static char pad[8];	/* just zeros */
+			int n;
+
+			for (n = ETHERMIN + ETHER_HDR_LEN - m->m_pkthdr.len;
+			     n > 0; n -= sizeof(pad))
+				if (!m_append(m, min(n, sizeof(pad)), pad))
+					break;
+
+			if (n > 0) {
+				if_printf(ifp, "cannot pad short frame\n");
+				ifp->if_oerrors++;
+				m_freem(m);
+				continue;
+			}
 		}
-	}
 
-	/*
-	 * Send it, precisely as ether_output() would have.
-	 */
-	error = (p->if_transmit)(p, m);
-	if (!error) {
-		ifp->if_opackets++;
-		ifp->if_omcasts += mcast;
-		ifp->if_obytes += len;
-	} else
-		ifp->if_oerrors++;
-	return (error);
-}
+		/*
+		 * If underlying interface can do VLAN tag insertion itself,
+		 * just pass the packet along. However, we need some way to
+		 * tell the interface where the packet came from so that it
+		 * knows how to find the VLAN tag to use, so we attach a
+		 * packet tag that holds it.
+		 */
+		if (p->if_capenable & IFCAP_VLAN_HWTAGGING) {
+			m->m_pkthdr.ether_vtag = ifv->ifv_tag;
+			m->m_flags |= M_VLANTAG;
+		} else {
+			m = ether_vlanencap(m, ifv->ifv_tag);
+			if (m == NULL) {
+				if_printf(ifp,
+				    "unable to prepend VLAN header\n");
+				ifp->if_oerrors++;
+				continue;
+			}
+		}
 
-/*
- * The ifp->if_qflush entry point for vlan(4) is a no-op.
- */
-static void
-vlan_qflush(struct ifnet *ifp __unused)
-{
+		/*
+		 * Send it, precisely as ether_output() would have.
+		 * We are already running at splimp.
+		 */
+		error = (p->if_transmit)(p, m);
+		if (!error)
+			ifp->if_opackets++;
+		else
+			ifp->if_oerrors++;
+	}
 }
 
 static void
@@ -1045,7 +1036,7 @@ vlan_config(struct ifvlan *ifv, struct ifnet *p, uint16_t tag)
 	/* VID numbers 0x0 and 0xFFF are reserved */
 	if (tag == 0 || tag == 0xFFF)
 		return (EINVAL);
-	if (p->if_type != IFT_ETHER)
+	if (p->if_type != IFT_ETHER && p->if_type != IFT_BRIDGE)
 		return (EPROTONOSUPPORT);
 	if ((p->if_flags & VLAN_IFFLAGS) != VLAN_IFFLAGS)
 		return (EPROTONOSUPPORT);
@@ -1457,12 +1448,6 @@ vlan_ioctl(struct ifnet *ifp, u_long cmd, caddr_t data)
 		break;
 
 	case SIOCSETVLAN:
-#ifdef VIMAGE
-		if (ifp->if_vnet != ifp->if_home_vnet) {
-			error = EPERM;
-			break;
-		}
-#endif
 		error = copyin(ifr->ifr_data, &vlr, sizeof(vlr));
 		if (error)
 			break;
@@ -1492,12 +1477,6 @@ vlan_ioctl(struct ifnet *ifp, u_long cmd, caddr_t data)
 		break;
 
 	case SIOCGETVLAN:
-#ifdef VIMAGE
-		if (ifp->if_vnet != ifp->if_home_vnet) {
-			error = EPERM;
-			break;
-		}
-#endif
 		bzero(&vlr, sizeof(vlr));
 		VLAN_LOCK();
 		if (TRUNK(ifv) != NULL) {
