--- sys/contrib/pf/net/pf.c.orig	2010-05-25 20:44:00.338831732 +0000
+++ sys/contrib/pf/net/pf.c	2010-05-25 23:14:03.954253504 +0000
@@ -227,6 +227,10 @@
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t *);
+#ifdef __FreeBSD__
+int			 pf_divert(struct mbuf **, struct pf_rule *,
+			    struct pf_state *, int, int);
+#endif
 int			 pf_test_tcp(struct pf_rule **, struct pf_state **,
 			    int, struct pfi_kif *, struct mbuf *, int,
 			    void *, struct pf_pdesc *, struct pf_rule **,
@@ -329,7 +333,12 @@
 
 #define STATE_LOOKUP()							\
 	do {								\
-		if (direction == PF_IN)					\
+		if (pd->flags & PFDESC_SEEN) {				\
+			PF_ACPY(&key.lan.addr, &key.gwy.addr, key.af);	\
+			key.lan.port = key.gwy.port;			\
+			*state = pf_find_state_recurse(			\
+			    kif, &key, PF_LAN_EXT);			\
+		} else  if (direction == PF_IN)				\
 			*state = pf_find_state_recurse(			\
 			    kif, &key, PF_EXT_GWY);			\
 		else							\
@@ -379,10 +388,27 @@
 #define PF_DUMMYNET() 								\
 	do {									\
 		r = (*state)->rule.ptr;						\
-        	if (r->dnpipe && !(pd->pf_mtag->flags & PF_DN_TAG_PRESENT))	\
-                	return (PF_PASS);					\
-		else if (r->divert && !(pd->pf_mtag->flags & PF_DIVERT_TAG_PRESENT)) \
+		if (r->dnpipe && !(pd->pf_mtag->flags & PF_DN_TAG_PRESENT))	\
+			return (PF_PASS);					\
+	} while (0)
+
+#define	PF_DIVERT_BYPASS_DIR	PF_IN
+#define PF_DIVERT_BYPASS()							\
+	do {									\
+		if (r->divert && direction != PF_DIVERT_BYPASS_DIR &&		\
+		    !(pd->pf_mtag->flags & PF_DIVERT_TAG_PRESENT))		\
 			return (PF_PASS);					\
+		if (r->divert && pd->flags & PFDESC_SEEN)			\
+			return (PF_PASS);					\
+	} while (0)
+#define PF_STATE_DIVERT_BYPASS()						\
+	do {									\
+		r = (*state)->rule.ptr;						\
+		if (r->spare1 && ((*state) &&					\
+		    (*state)->packets[direction == PF_OUT] > r->spare1))	\
+			/* fake that divert already happened */			\
+			pd->pf_mtag->flags |= PF_DIVERT_TAG_PRESENT;		\
+		PF_DIVERT_BYPASS();						\
 	} while (0)
 
 struct pf_src_tree tree_src_tracking;
@@ -2985,6 +3011,51 @@
 	return (r);
 }
 
+#ifdef __FreeBSD__
+int
+pf_divert(struct mbuf **m0, struct pf_rule *r, struct pf_state *s, int dir,
+    int flags)
+{
+	struct mbuf *m = *m0;
+	struct m_tag *dn_tag;
+	struct divert_tag *dt;
+#if 0
+	struct ip *ip;
+	int hlen;
+#endif
+
+	dn_tag = m_tag_get(PACKET_TAG_DIVERT, sizeof(struct divert_tag),
+	    M_NOWAIT);
+	if (dn_tag == NULL)
+		return (0);
+
+	dt = (struct divert_tag *)(dn_tag+1);
+	dt->cookie = flags;
+	dt->info = r->divert;
+	m_tag_prepend(m, dn_tag);
+	PF_UNLOCK();
+
+#if 0
+	ip = mtod(m, struct ip *);
+	hlen = ip->ip_hl << 2;
+	if (!(m->m_pkthdr.csum_flags & CSUM_IP_CHECKED)) {
+		ip->ip_sum = 0;
+		if (hlen == sizeof(struct ip))
+			ip->ip_sum = in_cksum_hdr(ip);
+		else
+			ip->ip_sum = in_cksum(m, hlen);
+		m->m_pkthdr.csum_flags = CSUM_IP_CHECKED | CSUM_IP_VALID |
+			CSUM_DATA_VALID | CSUM_PSEUDO_HDR;
+	}
+#endif
+
+	ip_divert_ptr(m, dir ==  PF_IN ? DIV_DIR_IN : DIV_DIR_OUT);
+
+	*m0 = NULL;
+	return (1);
+}
+#endif
+
 int
 #ifdef __FreeBSD__
 pf_socket_lookup(int direction, struct pf_pdesc *pd, struct inpcb *inp_arg)
@@ -3448,6 +3519,8 @@
 
 	REASON_SET(&reason, PFRES_MATCH);
 
+	PF_DIVERT_BYPASS();
+
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
 		if (rewrite)
 #ifdef __FreeBSD__
@@ -3870,6 +3943,8 @@
 
 	REASON_SET(&reason, PFRES_MATCH);
 
+	PF_DIVERT_BYPASS();
+
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
 		if (rewrite)
 #ifdef __FreeBSD__
@@ -4210,6 +4285,8 @@
 
 	REASON_SET(&reason, PFRES_MATCH);
 
+	PF_DIVERT_BYPASS();
+
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
 #ifdef INET6
 		if (rewrite)
@@ -4472,6 +4549,8 @@
 
 	REASON_SET(&reason, PFRES_MATCH);
 
+	PF_DIVERT_BYPASS();
+
 	if (r->log || (nr != NULL && nr->natpass && nr->log))
 		PFLOG_PACKET(kif, h, m, af, direction, reason, r->log ? r : nr,
 		    a, ruleset, pd);
@@ -4741,6 +4820,7 @@
 	STATE_LOOKUP();
 
 	PF_DUMMYNET();
+	PF_STATE_DIVERT_BYPASS();
 
 	if (direction == (*state)->direction) {
 		src = &(*state)->src;
@@ -4802,11 +4882,10 @@
          * First state is created by the rules checking code and if we reloop
          * the first packet that hit the rule pf will not like it.
          */
-        if ((th->th_flags & TH_SYN) && src->state == TCPS_SYN_SENT &&
-		dst->state == TCPS_CLOSED) {
-		if ((pd->pf_mtag->flags & PF_DN_TAG_PRESENT) ||
-			(pd->pf_mtag->flags & PF_DIVERT_TAG_PRESENT))
-                	return (PF_PASS);
+	if ((th->th_flags & TH_SYN) && src->state == TCPS_SYN_SENT &&
+	    dst->state == TCPS_CLOSED &&
+	    (pd->pf_mtag->flags & PF_DN_TAG_PRESENT)) {
+			return (PF_PASS);
 	}
 
 	if ((*state)->src.state == PF_TCPS_PROXY_SRC) {
@@ -5348,6 +5427,7 @@
 	STATE_LOOKUP();
 
 	PF_DUMMYNET();
+	PF_STATE_DIVERT_BYPASS();
 
 	if (direction == (*state)->direction) {
 		src = &(*state)->src;
@@ -5451,6 +5531,7 @@
 		STATE_LOOKUP();
 
 		PF_DUMMYNET();
+		PF_STATE_DIVERT_BYPASS();
 
 		(*state)->expire = time_second;
 		(*state)->timeout = PFTM_ICMP_ERROR_REPLY;
@@ -6003,6 +6084,7 @@
 	STATE_LOOKUP();
 
 	PF_DUMMYNET();
+	PF_STATE_DIVERT_BYPASS();
 
 	if (direction == (*state)->direction) {
 		src = &(*state)->src;
@@ -7066,6 +7148,10 @@
 		divflags = (u_int8_t)(divertcookie >> 8);
 		divertcookie &= ~PFSTATE_DIVERT_MASK;
 		m_tag_delete(m, dn_tag);
+
+		if (dir == PF_DIVERT_BYPASS_DIR)
+			pd.flags |= PFDESC_SEEN;
+		goto nonormalize;
 	}
 
 	/* We do IP header normalization and packet reassembly here */
@@ -7147,6 +7233,8 @@
 			action = pf_test_tcp(&r, &s, dir, kif,
 			    m, off, h, &pd, &a, &ruleset, &ipintrq);
 #endif
+		if (pd.flags & PFDESC_SEEN)
+			break;
 		if (action == PF_PASS && s != NULL && s->nat_rule.ptr != NULL) {
 			if (ntohs(th.th_dport) == 21 || ntohs(th.th_sport) == 21)
 				pf_handle_ftp(&pd, m, s, off, dir);
@@ -7274,6 +7362,14 @@
 	}
 
 #ifdef __FreeBSD__
+        if (r->divert && ip_divert_ptr != NULL && dir != PF_DIVERT_BYPASS_DIR &&
+	    !(pd.pf_mtag->flags & PF_DIVERT_TAG_PRESENT)) {
+		if (pf_divert(m0, r, s, dir, 0))	/* unlocks mutex */
+			return (action);
+		/* drop since divert failed */
+		action = PF_DROP;
+		DPFPRINTF(PF_DEBUG_MISC, ("pf: divert failed\n"));
+	}
 	if (s) {
 		if (divertcookie) {
 			s->divert_cookie = divertcookie;
@@ -7312,6 +7408,8 @@
                 pd.pf_mtag->qid = divertcookie;
         else if (divflags & PFSTATE_DIVERT_ACTION) {
                 struct pf_rule *dlr;
+                struct pf_state_cmp key;
+
                 action = PF_DROP;
                 REASON_SET(&reason, PFRES_DIVERT);
                 log = 1;
@@ -7320,34 +7418,37 @@
                 dlr = r;
                 PFLOG_PACKET(kif, h, m, AF_INET, dir, reason, dlr, a,
                         ruleset, &pd);
+		if (s) {
+			s->src.state = s->dst.state = TCPS_CLOSED;
+			pf_unlink_state(s);
+
+			/* Find matching ingress/egress rule */
+			key.af = s->af;
+			key.proto = s->proto;
+			/* switch src/dst */
+			PF_ACPY(&key.ext.addr, &s->lan.addr, s->af);
+			PF_ACPY(&key.gwy.addr, &s->ext.addr, s->af);
+			PF_ACPY(&key.lan.addr, &s->ext.addr, s->af);
+			key.ext.port = s->lan.port;
+			key.gwy.port = s->ext.port;
+			key.lan.port = s->ext.port;
+			if (s->direction == PF_IN)
+				s = pf_find_state_recurse(kif, &key,
+				    PF_LAN_EXT);	/* PF_OUT direction */
+			else
+				s = pf_find_state_recurse(kif, &key,
+				    PF_EXT_GWY);	/* PF_IN direction */
+			if (s) {
+				s->src.state = s->dst.state = TCPS_CLOSED;
+				pf_unlink_state(s);
+			}
+		}
+
                 PF_UNLOCK();
                 return (action);
         }
 
-        if (r->divert && ip_divert_ptr != NULL &&
-                !(pd.pf_mtag->flags & PF_DIVERT_TAG_PRESENT)) {
-                if (!r->spare1 ||
-                        (s && s->packets[dir == PF_OUT] <= r->spare1)) {
-
-                        struct divert_tag *dt;
-                        dn_tag = m_tag_get(PACKET_TAG_DIVERT,
-                                sizeof(struct divert_tag), M_NOWAIT);
-                        if (dn_tag != NULL) {
-                                dt = (struct divert_tag *)(dn_tag+1);
-                                dt->cookie = 0;
-                                dt->info = r->divert;
-                                m_tag_prepend(m, dn_tag);
-
-                                PF_UNLOCK();
-
-                                ip_divert_ptr(*m0,
-                                        dir ==  PF_IN ? DIV_DIR_IN : DIV_DIR_OUT);
-
-                                *m0 = NULL;
-                                return (action);
-                        }
-                }
-       	} else if ((r->dnpipe || (divflags & PFSTATE_DIVERT_DNCOOKIE)) && ip_dn_io_ptr != NULL &&
+	if ((r->dnpipe || (divflags & PFSTATE_DIVERT_DNCOOKIE)) && ip_dn_io_ptr != NULL &&
                 !(pd.pf_mtag->flags & PF_DN_TAG_PRESENT)) {
                         struct ip_fw dummyrule;
 
@@ -7406,6 +7507,9 @@
 	    (ntohl(pd.dst->v4.s_addr) >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET)
 		pd.pf_mtag->flags |= PF_TAG_TRANSLATE_LOCALHOST;
 
+	if (pd.flags & PFDESC_SEEN)
+		goto skipall;	/* packet already logged and counted */
+
 	if (log) {
 		struct pf_rule *lr;
 
@@ -7481,7 +7585,20 @@
 			    pd.tot_len, dir == PF_OUT, r->action == PF_PASS,
 			    tr->dst.neg);
 	}
-
+#ifdef __FreeBSD__
+        if (r->divert && ip_divert_ptr != NULL && dir == PF_DIVERT_BYPASS_DIR &&
+	    !(pd.pf_mtag->flags & PF_DIVERT_TAG_PRESENT)) {
+		int flags;
+
+		flags = action == PF_PASS ? 0 : PFSTATE_DIVERT_ACTION;
+		if (pf_divert(m0, r, s, dir, flags))	/* unlocks mutex */
+			return (action);
+		/* drop since divert failed */
+		action = PF_DROP;
+		DPFPRINTF(PF_DEBUG_MISC, ("pf: divert failed\n"));
+	}
+#endif
+skipall:
 	if (action == PF_SYNPROXY_DROP) {
 		m_freem(*m0);
 		*m0 = NULL;
--- sys/contrib/pf/net/pfvar.h.orig	2010-05-25 20:44:00.363940574 +0000
+++ sys/contrib/pf/net/pfvar.h	2010-05-25 20:44:33.426739482 +0000
@@ -1106,6 +1106,7 @@
 					 * state code. Easier than tags */
 #define PFDESC_TCP_NORM	0x0001		/* TCP shall be statefully scrubbed */
 #define PFDESC_IP_REAS	0x0002		/* IP frags would've been reassembled */
+#define PFDESC_SEEN	0x0004		/* Packet has already been evaluated */
 	sa_family_t	 af;
 	u_int8_t	 proto;
 	u_int8_t	 tos;
