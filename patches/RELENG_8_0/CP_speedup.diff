Index: sbin/ifconfig/ifconfig.c
===================================================================
RCS file: /root/freebsd/8/src/sbin/ifconfig/ifconfig.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ifconfig.c
--- sbin/ifconfig/ifconfig.c	12 Sep 2009 12:19:23 -0000	1.1.1.1
+++ sbin/ifconfig/ifconfig.c	12 Sep 2009 12:30:39 -0000
@@ -825,7 +825,7 @@
 #define	IFFBITS \
 "\020\1UP\2BROADCAST\3DEBUG\4LOOPBACK\5POINTOPOINT\6SMART\7RUNNING" \
 "\10NOARP\11PROMISC\12ALLMULTI\13OACTIVE\14SIMPLEX\15LINK0\16LINK1\17LINK2" \
-"\20MULTICAST\22PPROMISC\23MONITOR\24STATICARP"
+"\20MULTICAST\22PPROMISC\23MONITOR\24STATICARP\27IPFW_FILTER"
 
 #define	IFCAPBITS \
 "\020\1RXCSUM\2TXCSUM\3NETCONS\4VLAN_MTU\5VLAN_HWTAGGING\6JUMBO_MTU\7POLLING" \
@@ -1066,6 +1066,8 @@
 	DEF_CMD("-monitor",	-IFF_MONITOR,	setifflags),
 	DEF_CMD("staticarp",	IFF_STATICARP,	setifflags),
 	DEF_CMD("-staticarp",	-IFF_STATICARP,	setifflags),
+	DEF_CMD("ipfwfilter",	IFF_IPFW_FILTER,	setifflags),
+	DEF_CMD("-ipfwfilter",	-IFF_IPFW_FILTER,	setifflags),
 	DEF_CMD("rxcsum",	IFCAP_RXCSUM,	setifcap),
 	DEF_CMD("-rxcsum",	-IFCAP_RXCSUM,	setifcap),
 	DEF_CMD("txcsum",	IFCAP_TXCSUM,	setifcap),
Index: sbin/ipfw/ipfw2.c
===================================================================
RCS file: /root/freebsd/8/src/sbin/ipfw/ipfw2.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ipfw2.c
--- sbin/ipfw/ipfw2.c	12 Sep 2009 12:19:23 -0000	1.1.1.1
+++ sbin/ipfw/ipfw2.c	12 Sep 2009 12:30:39 -0000
@@ -362,7 +362,9 @@
 	    optname == IP_FW_ADD || optname == IP_FW_TABLE_LIST ||
 	    optname == IP_FW_TABLE_GETSIZE || 
 	    optname == IP_FW_NAT_GET_CONFIG || 
-	    optname == IP_FW_NAT_GET_LOG)
+	    optname == IP_FW_NAT_GET_LOG ||
+	    optname == IP_FW_TABLE_GET_ENTRY ||
+	    optname == IP_FW_TABLE_ZERO_ENTRY_STATS)
 		i = getsockopt(s, IPPROTO_IP, optname, optval,
 			(socklen_t *)optlen);
 	else
@@ -3665,6 +3667,7 @@
 
 
 static void table_list(ipfw_table_entry ent, int need_header);
+static void table_list_entry(ipfw_table_entry ent);
 
 /*
  * This one handles all table-related commands
@@ -3775,11 +3778,61 @@
 		do {
 			table_list(ent, is_all);
 		} while (++ent.tbl < a);
+	} else if (_substrcmp(*av, "entrystats") == 0) {
+		ac--; av++;
+                if (!ac)
+                        errx(EX_USAGE, "IP address required");
+                p = strchr(*av, '/');
+                if (p) {
+                        *p++ = '\0';
+                        ent.masklen = atoi(p);
+                        if (ent.masklen > 32)
+                                errx(EX_DATAERR, "bad width ``%s''", p);
+                } else
+                        ent.masklen = 32;
+                if (lookup_host(*av, (struct in_addr *)&ent.addr) != 0)
+                        errx(EX_NOHOST, "hostname ``%s'' unknown", *av);
+                ac--; av++;
+		ent.value = 0;
+		table_list_entry(ent);	
+	} else if (_substrcmp(*av, "entryzerostats") == 0) {
+		ac--; av++;
+                if (!ac)
+                        errx(EX_USAGE, "IP address required");
+                p = strchr(*av, '/');
+                if (p) {
+                        *p++ = '\0';
+                        ent.masklen = atoi(p);
+                        if (ent.masklen > 32)
+                                errx(EX_DATAERR, "bad width ``%s''", p);
+                } else
+                        ent.masklen = 32;
+                if (lookup_host(*av, (struct in_addr *)&ent.addr) != 0)
+                        errx(EX_NOHOST, "hostname ``%s'' unknown", *av);
+                ac--; av++;
+                ent.value = 0;
+		if (do_cmd(IP_FW_TABLE_ZERO_ENTRY_STATS, &ent, sizeof(ent)) < 0)
+                	err(EX_OSERR, "getsockopt(IP_FW_TABLE_ZERO_ENTRY_STATS)");
 	} else
 		errx(EX_USAGE, "invalid table command %s", *av);
 }
 
 static void
+table_list_entry(ipfw_table_entry ent) {
+        socklen_t l;
+	char tbuf[128];
+
+        l = sizeof(ent);
+        if (do_cmd(IP_FW_TABLE_GET_ENTRY, &ent, (uintptr_t)&l) < 0)
+                err(EX_OSERR, "getsockopt(IP_FW_TABLE_GET_ENTRY)");
+
+	strncpy(tbuf, inet_ntoa(*(struct in_addr *)
+		&ent.addr), 127);
+	printf("%s/%u %u %llu %llu %u\n", tbuf, ent.masklen,
+		ent.value, ent.packets, ent.bytes, ent.timestamp);
+}
+
+static void
 table_list(ipfw_table_entry ent, int need_header)
 {
 	ipfw_table *tbl;
Index: sys/net/if.h
===================================================================
RCS file: /root/freebsd/8/src/sys/net/if.h,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 if.h
--- sys/net/if.h	12 Sep 2009 12:19:25 -0000	1.1.1.1
+++ sys/net/if.h	12 Sep 2009 12:30:39 -0000
@@ -150,6 +150,7 @@
 #define	IFF_MONITOR	0x40000		/* (n) user-requested monitor mode */
 #define	IFF_STATICARP	0x80000		/* (n) static ARP */
 #define	IFF_DYING	0x200000	/* (n) interface is winding down */
+#define	IFF_IPFW_FILTER	0x400000	/* pfSense hack for CP speeding up */
 
 /*
  * Old names for driver flags so that user space tools can continue to use
Index: sys/netinet/in.h
===================================================================
RCS file: /root/freebsd/8/src/sys/netinet/in.h,v
retrieving revision 1.2
diff -u -r1.2 in.h
--- sys/netinet/in.h	12 Sep 2009 12:30:31 -0000	1.2
+++ sys/netinet/in.h	12 Sep 2009 12:30:39 -0000
@@ -448,6 +448,8 @@
 #define	IP_FW_TABLE_FLUSH	42   /* flush table */
 #define	IP_FW_TABLE_GETSIZE	43   /* get table size */
 #define	IP_FW_TABLE_LIST	44   /* list table contents */
+#define	IP_FW_TABLE_GET_ENTRY	45   /* get statistics about a table entry */
+#define IP_FW_TABLE_ZERO_ENTRY_STATS	46	/* zero table entry stats */
 
 #define	IP_FW_ADD		50   /* add a firewall rule to chain */
 #define	IP_FW_DEL		51   /* delete a firewall rule from chain */
Index: sys/netinet/ip_fw.h
===================================================================
RCS file: /root/freebsd/8/src/sys/netinet/ip_fw.h,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_fw.h
--- sys/netinet/ip_fw.h	12 Sep 2009 12:19:23 -0000	1.1.1.1
+++ sys/netinet/ip_fw.h	12 Sep 2009 12:30:39 -0000
@@ -562,6 +562,9 @@
 	u_int32_t	value;		/* value			*/
 	u_int16_t	tbl;		/* table number			*/
 	u_int8_t	masklen;	/* mask length			*/
+        u_int64_t               bytes;
+        u_int64_t               packets;
+        u_int32_t               timestamp;
 } ipfw_table_entry;
 
 typedef struct	_ipfw_table {
Index: sys/netinet/raw_ip.c
===================================================================
RCS file: /root/freebsd/8/src/sys/netinet/raw_ip.c,v
retrieving revision 1.2
diff -u -r1.2 raw_ip.c
--- sys/netinet/raw_ip.c	12 Sep 2009 12:25:54 -0000	1.2
+++ sys/netinet/raw_ip.c	12 Sep 2009 12:30:39 -0000
@@ -521,6 +521,8 @@
 		case IP_FW_GET:
 		case IP_FW_TABLE_GETSIZE:
 		case IP_FW_TABLE_LIST:
+		case IP_FW_TABLE_GET_ENTRY:
+		case IP_FW_TABLE_ZERO_ENTRY_STATS:
 		case IP_FW_NAT_GET_CONFIG:
 		case IP_FW_NAT_GET_LOG:
 			if (ip_fw_ctl_ptr != NULL)
Index: sys/netinet/ipfw/ip_fw2.c
===================================================================
RCS file: /root/freebsd/8/src/sys/netinet/ipfw/ip_fw2.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_fw2.c
--- sys/netinet/ipfw/ip_fw2.c	12 Sep 2009 12:19:24 -0000	1.1.1.1
+++ sys/netinet/ipfw/ip_fw2.c	12 Sep 2009 12:30:39 -0000
@@ -149,6 +149,9 @@
 	struct radix_node	rn[2];
 	struct sockaddr_in	addr, mask;
 	u_int32_t		value;
+	u_int64_t		bytes;
+	u_int64_t		packets;
+	u_int32_t		timestamp;
 };
 
 static VNET_DEFINE(int, autoinc_step);
@@ -1932,7 +1935,7 @@
 
 static int
 lookup_table(struct ip_fw_chain *ch, uint16_t tbl, in_addr_t addr,
-    uint32_t *val)
+    uint32_t *val, int pktlen)
 {
 	struct radix_node_head *rnh;
 	struct table_entry *ent;
@@ -1946,11 +1949,55 @@
 	ent = (struct table_entry *)(rnh->rnh_lookup(&sa, NULL, rnh));
 	if (ent != NULL) {
 		*val = ent->value;
+		ent->packets++;
+		ent->bytes += pktlen;
+		ent->timestamp = time_uptime;
 		return (1);
 	}
 	return (0);
 }
 
+static struct table_entry *
+lookup_table_entry(struct ip_fw_chain *ch, uint16_t tbl, in_addr_t addr,
+    int pktlen)
+{
+        struct radix_node_head *rnh;
+        struct table_entry *ent;
+        struct sockaddr_in sa;
+
+        if (tbl >= IPFW_TABLES_MAX)
+                return (NULL);
+        rnh = ch->tables[tbl];
+        sa.sin_len = 8;
+        sa.sin_addr.s_addr = addr;
+        ent = (struct table_entry *)(rnh->rnh_lookup(&sa, NULL, rnh));
+        if (ent != NULL) {
+                return (ent);
+        }
+        return (NULL);
+}
+
+static int
+zero_table_entry_stats(struct ip_fw_chain *ch, uint16_t tbl, in_addr_t addr) {
+	struct radix_node_head *rnh;
+        struct table_entry *ent;
+        struct sockaddr_in sa;
+
+        if (tbl >= IPFW_TABLES_MAX)
+                return (EINVAL);
+        rnh = ch->tables[tbl];
+        sa.sin_len = 8;
+        sa.sin_addr.s_addr = addr;
+        ent = (struct table_entry *)(rnh->rnh_lookup(&sa, NULL, rnh));
+        if (ent != NULL) {
+                ent->packets = 0;
+                ent->bytes = 0;
+                ent->timestamp = time_uptime;
+                return (0);
+        }
+        return (EINVAL);
+}
+
 static int
 count_table_entry(struct radix_node *rn, void *arg)
 {
@@ -2706,7 +2753,7 @@
 				    uint32_t v = 0;
 
 				    match = lookup_table(chain, cmd->arg1, a,
-					&v);
+					&v, pktlen);
 				    if (!match)
 					break;
 				    if (cmdlen == F_INSN_SIZE(ipfw_insn_u32))
@@ -4439,6 +4486,42 @@
 		}
 		break;
 
+	case IP_FW_TABLE_GET_ENTRY:
+		{
+			ipfw_table_entry ent;
+			struct table_entry *eent;
+			time_t boot_seconds;
+
+			boot_seconds = boottime.tv_sec;
+			error = sooptcopyin(sopt, &ent,
+                            sizeof(ent), sizeof(ent));
+                        if (error)
+                                break;
+                        eent = lookup_table_entry(&V_layer3_chain, ent.tbl,
+                            ent.addr, ent.masklen);
+			if (eent != NULL) {
+				ent.bytes = eent->bytes;
+				ent.packets = eent->packets;
+				ent.timestamp = eent->timestamp + boot_seconds;
+				ent.value = eent->value;
+				error = sooptcopyout(sopt, &ent, sizeof(ent));
+			}
+		}
+		break;
+
+	case IP_FW_TABLE_ZERO_ENTRY_STATS:
+		{
+			ipfw_table_entry ent;
+
+                        error = sooptcopyin(sopt, &ent,
+                            sizeof(ent), sizeof(ent));
+                        if (error)
+                                break;
+                        error = zero_table_entry_stats(&V_layer3_chain, ent.tbl,
+                            ent.addr);
+		}
+		break;
+
 	case IP_FW_TABLE_LIST:
 		{
 			ipfw_table *tbl;
Index: sys/netinet/ipfw/ip_fw_pfil.c
===================================================================
RCS file: /root/freebsd/8/src/sys/netinet/ipfw/ip_fw_pfil.c,v
retrieving revision 1.4
diff -u -r1.4 ip_fw_pfil.c
--- sys/netinet/ipfw/ip_fw_pfil.c	12 Sep 2009 12:29:49 -0000	1.4
+++ sys/netinet/ipfw/ip_fw_pfil.c	12 Sep 2009 12:30:58 -0000
@@ -85,7 +85,9 @@
     struct inpcb *inp)
 {
 	struct ip_fw_args args;
+#if 0
 	struct ng_ipfw_tag *ng_tag;
+#endif
 	struct m_tag *dn_tag;
 	int ipfw = 0;
 	int divert;
@@ -96,6 +98,9 @@
 
 	KASSERT(dir == PFIL_IN, ("ipfw_check_in wrong direction!"));
 
+	if (!(ifp->if_flags & IFF_IPFW_FILTER))
+		goto pass;
+
 	bzero(&args, sizeof(args));
 
 #if 0
@@ -223,7 +228,9 @@
     struct inpcb *inp)
 {
 	struct ip_fw_args args;
+#if 0
 	struct ng_ipfw_tag *ng_tag;
+#endif
 	struct m_tag *dn_tag;
 	int ipfw = 0;
 	int divert;
@@ -234,6 +241,9 @@
 
 	KASSERT(dir == PFIL_OUT, ("ipfw_check_out wrong direction!"));
 
+	if (!(ifp->if_flags & IFF_IPFW_FILTER))
+                goto pass;
+
 	bzero(&args, sizeof(args));
 
 #if 0
