Index: sys/contrib/pf/net/pf.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/contrib/pf/net/pf.c,v
retrieving revision 1.4
diff -u -r1.4 pf.c
--- sys/contrib/pf/net/pf.c	16 Aug 2009 19:06:59 -0000	1.4
+++ sys/contrib/pf/net/pf.c	16 Aug 2009 19:07:01 -0000
@@ -6450,7 +6450,7 @@
 	 * If deferred crypto processing is needed, check that the
 	 * interface supports it.
 	 */
-	if ((mtag = m_tag_find(m0, PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED, NULL))
+	if (V_ipipsec_in_use && (mtag = m_tag_find(m0, PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED, NULL))
 	    != NULL && (ifp->if_capabilities & IFCAP_IPSEC) == 0) {
 		/* Notify IPsec to do its own crypto. */
 		ipsp_skipcrypto_unmark((struct tdb_ident *)(mtag + 1));
Index: sys/netinet/in.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/in.h,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 in.h
--- sys/netinet/in.h	16 Aug 2009 19:06:00 -0000	1.1.1.1
+++ sys/netinet/in.h	16 Aug 2009 19:07:01 -0000
@@ -703,7 +703,8 @@
 #define	IPCTL_FASTFORWARDING	14	/* use fast IP forwarding code */
 #define	IPCTL_KEEPFAITH		15	/* FAITH IPv4->IPv6 translater ctl */
 #define	IPCTL_GIF_TTL		16	/* default TTL for gif encap packet */
-#define	IPCTL_MAXID		17
+#define	IPCTL_IPSEC_INUSE	17
+#define	IPCTL_MAXID		18
 
 #define	IPCTL_NAMES { \
 	{ 0, 0 }, \
@@ -721,6 +722,7 @@
 	{ "stats", CTLTYPE_STRUCT }, \
 	{ "accept_sourceroute", CTLTYPE_INT }, \
 	{ "fastforwarding", CTLTYPE_INT }, \
+	{ "ipsec-in-use", CTLTPE_INT }, \
 }
 
 #endif /* __BSD_VISIBLE */
Index: sys/netinet/ip_input.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_input.c,v
retrieving revision 1.3
diff -u -r1.3 ip_input.c
--- sys/netinet/ip_input.c	16 Aug 2009 19:06:59 -0000	1.3
+++ sys/netinet/ip_input.c	16 Aug 2009 19:07:01 -0000
@@ -124,6 +124,10 @@
 #define	V_maxnipq		VNET(maxnipq)
 #define	V_maxfragsperpacket	VNET(maxfragsperpacket)
 #define	V_nipq			VNET(nipq)
+#ifdef IPSEC
+VNET_DEFINE(int, ipipsec_in_use);
+#endif
+
 
 VNET_DEFINE(int, ipstealth);
 
@@ -137,6 +141,12 @@
     &VNET_NAME(ipforwarding), 0,
     "Enable IP forwarding between interfaces");
 
+#ifdef IPSEC
+SYSCTL_VNET_INT(_net_inet_ip, IPCTL_IPSEC_INUSE, ipsec_in_use, CTLFLAG_RW,
+	&VNET_NAME(ipipsec_in_use), 0,
+	"Enable IPSec processing of packets");
+#endif
+
 SYSCTL_VNET_INT(_net_inet_ip, IPCTL_SENDREDIRECTS, redirect, CTLFLAG_RW,
     &VNET_NAME(ipsendredirects), 0,
     "Enable sending IP redirects");
@@ -504,7 +514,7 @@
 	/*
 	 * Bypass packet filtering for packets from a tunnel (gif).
 	 */
-	if (ip_ipsec_filtertunnel(m))
+	if (V_ipipsec_in_use && ip_ipsec_filtertunnel(m))
 		goto passin;
 #endif /* IPSEC */
 
@@ -718,7 +728,7 @@
 		m_freem(m);
 	} else {
 #ifdef IPSEC
-		if (ip_ipsec_fwd(m))
+		if (V_ipipsec_in_use && ip_ipsec_fwd(m))
 			goto bad;
 #endif /* IPSEC */
 		ip_forward(m, dchg);
@@ -770,7 +780,7 @@
 	 * note that we do not visit this with protocols with pcb layer
 	 * code - like udp/tcp/raw ip.
 	 */
-	if (ip_ipsec_input(m))
+	if (V_ipipsec_in_use && ip_ipsec_input(m))
 		goto bad;
 #endif /* IPSEC */
 
@@ -1559,7 +1569,8 @@
 		 * If IPsec is configured for this path,
 		 * override any possibly mtu value set by ip_output.
 		 */ 
-		mtu = ip_ipsec_mtu(m, mtu);
+		if (V_ipipsec_in_use)
+			mtu = ip_ipsec_mtu(m, mtu);
 #endif /* IPSEC */
 		/*
 		 * If the MTU was set before make sure we are below the
Index: sys/netinet/ip_output.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_output.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 ip_output.c
--- sys/netinet/ip_output.c	16 Aug 2009 19:06:01 -0000	1.1.1.1
+++ sys/netinet/ip_output.c	16 Aug 2009 19:07:05 -0000
@@ -468,26 +468,28 @@
 
 sendit:
 #ifdef IPSEC
-	switch(ip_ipsec_output(&m, inp, &flags, &error, &ifp)) {
-	case 1:
-		goto bad;
-	case -1:
-		goto done;
-	case 0:
-	default:
-		break;	/* Continue with packet processing. */
-	}
-	/*
-	 * Check if there was a route for this packet; return error if not.
-	 */
-	if (no_route_but_check_spd) {
-		IPSTAT_INC(ips_noroute);
-		error = EHOSTUNREACH;
-		goto bad;
+	if (V_ipipsec_in_use) {
+		switch(ip_ipsec_output(&m, inp, &flags, &error, &ifp)) {
+		case 1:
+			goto bad;
+		case -1:
+			goto done;
+		case 0:
+		default:
+			break;	/* Continue with packet processing. */
+		}
+		/*
+	 	 * Check if there was a route for this packet; return error if not.
+	 	 */
+		if (no_route_but_check_spd) {
+			IPSTAT_INC(ips_noroute);
+			error = EHOSTUNREACH;
+			goto bad;
+		}
+		/* Update variables that are affected by ipsec4_output(). */
+		ip = mtod(m, struct ip *);
+		hlen = ip->ip_hl << 2;
 	}
-	/* Update variables that are affected by ipsec4_output(). */
-	ip = mtod(m, struct ip *);
-	hlen = ip->ip_hl << 2;
 #endif /* IPSEC */
 
 	/* Jump over all PFIL processing if hooks are not active. */
@@ -1070,7 +1072,7 @@
 		{
 			caddr_t req;
 			struct mbuf *m;
-
+			
 			if ((error = soopt_getm(sopt, &m)) != 0) /* XXX */
 				break;
 			if ((error = soopt_mcopyin(sopt, m)) != 0) /* XXX */
@@ -1192,7 +1194,7 @@
 			struct mbuf *m = NULL;
 			caddr_t req = NULL;
 			size_t len = 0;
-
+			
 			if (m != 0) {
 				req = mtod(m, caddr_t);
 				len = m->m_len;
Index: sys/netinet/ip_var.h
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_var.h,v
retrieving revision 1.2
diff -u -r1.2 ip_var.h
--- sys/netinet/ip_var.h	16 Aug 2009 19:06:30 -0000	1.2
+++ sys/netinet/ip_var.h	16 Aug 2009 19:07:01 -0000
@@ -184,11 +184,16 @@
 VNET_DECLARE(int, rsvp_on);
 VNET_DECLARE(struct socket *, ip_rsvpd);	/* reservation protocol daemon*/
 VNET_DECLARE(struct socket *, ip_mrouter);	/* multicast routing daemon */
+#ifdef IPSEC
+VNET_DECLARE(int, ipipsec_in_use);
+#endif
 
 #define	V_ipstat		VNET(ipstat)
 #define	V_ip_id			VNET(ip_id)
 #define	V_ip_defttl		VNET(ip_defttl)
 #define	V_ipforwarding		VNET(ipforwarding)
+#define V_ipipsec_in_use	VNET(ipipsec_in_use)
+
 #ifdef IPSTEALTH
 #define	V_ipstealth		VNET(ipstealth)
 #endif
