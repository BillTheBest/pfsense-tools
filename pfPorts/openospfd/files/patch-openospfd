diff -ur ospfd_old/carp.c ospfd/carp.c
--- ospfd_old/carp.c	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/carp.c	2010-04-01 14:18:46.000000000 +0000
@@ -102,6 +102,7 @@
 int
 carp_demote_get(char *group)
 {
+#if !defined(__FreeBSD__)
 	int			s;
 	struct ifgroupreq	ifgr;
 
@@ -124,6 +125,9 @@
 
 	close(s);
 	return ((int)ifgr.ifgr_attrib.ifg_carp_demoted);
+#else
+	return 0;
+#endif
 }
 
 int
@@ -156,6 +160,7 @@
 int
 carp_demote_ioctl(char *group, int demote)
 {
+#if !defined(__FreeBSD__)
 	int			s, res;
 	struct ifgroupreq	ifgr;
 
@@ -178,4 +183,6 @@
 
 	close(s);
 	return (res);
+#endif
+	return 0;
 }
diff -ur ospfd_old/interface.c ospfd/interface.c
--- ospfd_old/interface.c	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/interface.c	2010-04-01 14:19:12.000000000 +0000
@@ -251,6 +251,7 @@
 
 	iface->fd = xconf->ospf_socket;
 
+#if !defined(__FreeBSD__)
 	strlcpy(ifr.ifr_name, iface->name, sizeof(ifr.ifr_name));
 	if (ioctl(iface->fd, SIOCGIFRTABLEID, (caddr_t)&ifr) == -1)
 		rdomain = 0;
@@ -262,6 +263,7 @@
 	}
 	if (rdomain != xconf->rdomain)
 		fatalx("interface rdomain mismatch");
+#endif
 
 	ospfe_demote_iface(iface, 0);
 }
@@ -697,6 +699,7 @@
 	struct in_addr			addr;
 	unsigned int			ifindex;
 	int				count;
+	char				name[IF_NAMESIZE];
 };
 
 LIST_HEAD(,if_group_count) ifglist = LIST_HEAD_INITIALIZER(ifglist);
@@ -704,38 +707,74 @@
 int
 if_join_group(struct iface *iface, struct in_addr *addr)
 {
+#if __FreeBSD_version > 800000
+	struct sockaddr_in	*si;
+	struct group_req	greq;
+#else
 	struct ip_mreq		 mreq;
+#endif
+
 	struct if_group_count	*ifg;
+	int			 refound = 0;
 
 	switch (iface->type) {
 	case IF_TYPE_POINTOPOINT:
 	case IF_TYPE_BROADCAST:
-		LIST_FOREACH(ifg, &ifglist, entry)
+		LIST_FOREACH(ifg, &ifglist, entry) {
 			if (iface->ifindex == ifg->ifindex &&
-			    addr->s_addr == ifg->addr.s_addr)
+			    addr->s_addr == ifg->addr.s_addr) {
+				refound = 1;
+				break;
+			}
+			if (!strcmp(iface->name, ifg->name) &&
+			    addr->s_addr == ifg->addr.s_addr) {
+				refound = 1;
 				break;
+			}
+		}
 		if (ifg == NULL) {
 			if ((ifg = calloc(1, sizeof(*ifg))) == NULL)
 				fatal("if_join_group");
 			ifg->addr.s_addr = addr->s_addr;
 			ifg->ifindex = iface->ifindex;
+			strlcpy(ifg->name, iface->name, sizeof(ifg->name));
 			LIST_INSERT_HEAD(&ifglist, ifg, entry);
 		}
 
-		if (ifg->count++ != 0)
+		if (ifg->count++ > 0)
 			/* already joined */
 			return (0);
 
+#if __FreeBSD_version > 800000
+		greq.gr_interface = iface->ifindex;
+		si = (struct sockaddr_in *)&greq.gr_group;
+		si->sin_family = AF_INET;
+		si->sin_len = sizeof(*si);
+		si->sin_addr.s_addr = addr->s_addr;
+
+		if (setsockopt(iface->fd, IPPROTO_IP, MCAST_JOIN_GROUP,
+		    (void *)&greq, sizeof(greq)) < 0) {
+			log_warn("if_join_group: error MCAST_JOINT_GROUP, "
+                    	    "interface %s address %s", iface->name,
+		       	    inet_ntoa(*addr));
+			return (-1);
+		}
+#else
 		mreq.imr_multiaddr.s_addr = addr->s_addr;
 		mreq.imr_interface.s_addr = iface->addr.s_addr;
 
 		if (setsockopt(iface->fd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 		    (void *)&mreq, sizeof(mreq)) < 0) {
-			log_warn("if_join_group: error IP_ADD_MEMBERSHIP, "
-			    "interface %s address %s", iface->name,
-			    inet_ntoa(*addr));
-			return (-1);
+			if_leave_group(iface, addr);
+			if (setsockopt(iface->fd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
+		    	    (void *)&mreq, sizeof(mreq)) < 0 && !refound) {
+				log_warn("if_join_group: error IP_ADD_MEMBERSHIP, "
+                	    	    "interface %s address %s", iface->name,
+		    	    	    inet_ntoa(*addr));
+				return (-1);
+			}
 		}
+#endif
 		break;
 	case IF_TYPE_POINTOMULTIPOINT:
 	case IF_TYPE_VIRTUALLINK:
@@ -753,7 +792,12 @@
 int
 if_leave_group(struct iface *iface, struct in_addr *addr)
 {
+#if __FreeBSD_version > 800000
+        struct sockaddr_in      *si;
+        struct group_req        greq;
+#else
 	struct ip_mreq		 mreq;
+#endif
 	struct if_group_count	*ifg;
 
 	switch (iface->type) {
@@ -765,10 +809,27 @@
 				break;
 
 		/* if interface is not found just try to drop membership */
-		if (ifg && --ifg->count != 0)
+		if (ifg->count > 0)
+			--ifg->count;
+		if (ifg && ifg->count > 0)
 			/* others still joined */
 			return (0);
 
+#if __FreeBSD_version > 800000
+                greq.gr_interface = iface->ifindex;
+                si = (struct sockaddr_in *)&greq.gr_group;
+                si->sin_family = AF_INET;
+                si->sin_len = sizeof(*si);
+                si->sin_addr.s_addr = addr->s_addr;
+
+                if (setsockopt(iface->fd, IPPROTO_IP, MCAST_LEAVE_GROUP,
+                    (void *)&greq, sizeof(greq)) < 0) {
+                        log_warn("if_leave_group: error MCAST_LEAVE_GROUP, "
+                            "interface %s address %s", iface->name,
+                            inet_ntoa(*addr));
+                        return (-1);
+                }
+#else
 		mreq.imr_multiaddr.s_addr = addr->s_addr;
 		mreq.imr_interface.s_addr = iface->addr.s_addr;
 
@@ -779,6 +840,7 @@
 			    inet_ntoa(*addr));
 			return (-1);
 		}
+#endif
 
 		if (ifg) {
 			LIST_REMOVE(ifg, entry);
@@ -801,11 +863,14 @@
 int
 if_set_mcast(struct iface *iface)
 {
+	struct ip_mreqn          mreqn;
+
 	switch (iface->type) {
 	case IF_TYPE_POINTOPOINT:
 	case IF_TYPE_BROADCAST:
+		mreqn.imr_ifindex = iface->ifindex;
 		if (setsockopt(iface->fd, IPPROTO_IP, IP_MULTICAST_IF,
-		    &iface->addr.s_addr, sizeof(iface->addr.s_addr)) < 0) {
+		    &mreqn, sizeof(mreqn)) < 0) {
 			log_debug("if_set_mcast: error setting "
 			    "IP_MULTICAST_IF, interface %s", iface->name);
 			return (-1);
diff -ur ospfd_old/kroute.c ospfd/kroute.c
--- ospfd_old/kroute.c	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/kroute.c	2010-04-01 14:18:46.000000000 +0000
@@ -27,6 +27,7 @@
 #include <arpa/inet.h>
 #include <net/if.h>
 #include <net/if_dl.h>
+#include <net/if_mib.h>
 #include <net/if_types.h>
 #include <net/route.h>
 #include <err.h>
@@ -799,8 +800,31 @@
     struct sockaddr_dl *sdl)
 {
 	struct kif_node		*kif;
-
-	if ((kif = kif_find(ifindex)) == NULL) {
+	struct ifmibdata	 ifmd;
+        struct in_addr           addr;
+        size_t			 len = sizeof ifmd;
+        int			 name[6];
+
+	kif = kif_find(ifindex);
+	if (kif == NULL) {
+                bzero(&addr, sizeof addr);
+        	name[0] = CTL_NET;
+        	name[1] = PF_LINK;
+        	name[2] = NETLINK_GENERIC;
+        	name[3] = IFMIB_IFDATA;
+        	name[4] = ifindex;
+        	name[5] = IFDATA_GENERAL;
+        	if (!sysctl(name, 6, &ifmd, &len, 0, 0)) {
+			struct kif_node *tkif;
+			RB_FOREACH(tkif, kif_tree, &kit) {
+				if (!strcmp(ifmd.ifmd_name, tkif->k.ifname)) {
+					kif = tkif;
+					break;
+				}
+			}
+		}
+	}
+	if (kif == NULL) {
 		if ((kif = kif_insert(ifindex)) == NULL)
 			return (NULL);
 		kif->k.nh_reachable = (flags & IFF_UP) &&
@@ -809,6 +833,7 @@
 		    ifd->ifi_type != IFT_CARP));
 	}
 
+	kif->k.ifindex = ifindex;
 	kif->k.flags = flags;
 	kif->k.link_state = ifd->ifi_link_state;
 	kif->k.media_type = ifd->ifi_type;
@@ -1032,9 +1057,11 @@
 	struct sockaddr_in	prefix;
 	struct sockaddr_in	nexthop;
 	struct sockaddr_in	mask;
+#if !defined(__FreeBSD__)
 	struct sockaddr_rtlabel	sa_rl;
-	int			iovcnt = 0;
 	const char		*label;
+#endif
+	int			iovcnt = 0;
 
 	if (kr_state.fib_sync == 0)
 		return (0);
@@ -1043,12 +1070,17 @@
 	bzero(&hdr, sizeof(hdr));
 	hdr.rtm_version = RTM_VERSION;
 	hdr.rtm_type = action;
+#if !defined(__FreeBSD__)
 	hdr.rtm_priority = RTP_OSPF;
 	hdr.rtm_tableid = kr_state.rdomain;	/* rtableid */
+#endif
 	if (action == RTM_CHANGE)
 		hdr.rtm_fmask = RTF_REJECT|RTF_BLACKHOLE;
+#if !defined(__FreeBSD__)
 	else
 		hdr.rtm_flags = RTF_MPATH;
+#endif
+
 	hdr.rtm_seq = kr_state.rtseq++;	/* overflow doesn't matter */
 	hdr.rtm_msglen = sizeof(hdr);
 	/* adjust iovec */
@@ -1091,6 +1123,7 @@
 	iov[iovcnt].iov_base = &mask;
 	iov[iovcnt++].iov_len = sizeof(mask);
 
+#if !defined(__FreeBSD__)
 	if (kroute->rtlabel != 0) {
 		sa_rl.sr_len = sizeof(sa_rl);
 		sa_rl.sr_family = AF_UNSPEC;
@@ -1107,7 +1140,7 @@
 		iov[iovcnt].iov_base = &sa_rl;
 		iov[iovcnt++].iov_len = sizeof(sa_rl);
 	}
-
+#endif
 
 retry:
 	if (writev(fd, iov, iovcnt) == -1) {
@@ -1149,7 +1182,9 @@
 	struct rt_msghdr	*rtm;
 	struct sockaddr		*sa, *rti_info[RTAX_MAX];
 	struct sockaddr_in	*sa_in;
+#if !defined(__FreeBSD__)
 	struct sockaddr_rtlabel	*label;
+#endif
 	struct kroute_node	*kr;
 
 	mib[0] = CTL_NET;
@@ -1158,9 +1193,13 @@
 	mib[3] = AF_INET;
 	mib[4] = NET_RT_DUMP;
 	mib[5] = 0;
+#if !defined(__FreeBSD__)
 	mib[6] = kr_state.rdomain;	/* rtableid */
 
 	if (sysctl(mib, 7, NULL, &len, NULL, 0) == -1) {
+#else
+	if (sysctl(mib, 6, NULL, &len, NULL, 0) == -1) {
+#endif
 		log_warn("sysctl");
 		return (-1);
 	}
@@ -1168,7 +1207,11 @@
 		log_warn("fetchtable");
 		return (-1);
 	}
+#if !defined(__FreeBSD__)
 	if (sysctl(mib, 7, buf, &len, NULL, 0) == -1) {
+#else
+	if (sysctl(mib, 6, buf, &len, NULL, 0) == -1) {
+#endif
 		log_warn("sysctl");
 		free(buf);
 		return (-1);
@@ -1179,14 +1222,20 @@
 		rtm = (struct rt_msghdr *)next;
 		if (rtm->rtm_version != RTM_VERSION)
 			continue;
+#ifdef __FreeBSD__
+		sa = (struct sockaddr *)(rtm + 1);
+#else
 		sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
+#endif
 		get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
 
 		if ((sa = rti_info[RTAX_DST]) == NULL)
 			continue;
 
+#if defined(RTF_LLINFO)
 		if (rtm->rtm_flags & RTF_LLINFO)	/* arp cache */
 			continue;
+#endif
 
 		if ((kr = calloc(1, sizeof(struct kroute_node))) == NULL) {
 			log_warn("fetchtable");
@@ -1195,7 +1244,9 @@
 		}
 
 		kr->r.flags = F_KERNEL;
+#if !defined(__FreeBSD__)
 		kr->r.priority = rtm->rtm_priority;
+#endif
 
 		switch (sa->sa_family) {
 		case AF_INET:
@@ -1238,6 +1289,7 @@
 				break;
 			}
 
+#if !defined(__FreeBSD__)
 		if (rtm->rtm_priority == RTP_OSPF)  {
 			send_rtmsg(kr_state.fd, RTM_DELETE, &kr->r);
 			free(kr);
@@ -1249,8 +1301,11 @@
 				kr->r.ext_tag =
 				    rtlabel_id2tag(kr->r.rtlabel);
 			}
+#endif
 			kroute_insert(kr);
+#if !defined(__FreeBSD__)
 		}
+#endif
 
 	}
 	free(buf);
@@ -1297,7 +1352,11 @@
 		switch (rtm->rtm_type) {
 		case RTM_IFINFO:
 			memcpy(&ifm, next, sizeof(ifm));
+#ifdef __FreeBSD__
+			sa = (struct sockaddr *)(next + sizeof(ifm));
+#else
 			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
+#endif
 			get_rtaddrs(ifm.ifm_addrs, sa, rti_info);
 			if_change(ifm.ifm_index, ifm.ifm_flags, &ifm.ifm_data,
 			    (struct sockaddr_dl *)rti_info[RTAX_IFP]);
@@ -1332,7 +1391,9 @@
 	struct ifa_msghdr	*ifam;
 	struct sockaddr		*sa, *rti_info[RTAX_MAX];
 	struct sockaddr_in	*sa_in;
+#if !defined(__FreeBSD__)
 	struct sockaddr_rtlabel	*label;
+#endif
 	struct kroute_node	*kr, *okr;
 	struct in_addr		 prefix, nexthop;
 	u_int8_t		 prefixlen, prio;
@@ -1364,11 +1425,17 @@
 
 		if (rtm->rtm_type == RTM_ADD || rtm->rtm_type == RTM_CHANGE ||
 		    rtm->rtm_type == RTM_DELETE) {
+#ifdef __FreeBSD__
+			sa = (struct sockaddr *)(rtm + 1);
+#else
 			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
+#endif
 			get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
 
+#if !defined(__FreeBSD__)
 			if (rtm->rtm_tableid != kr_state.rdomain)
 				continue;
+#endif
 
 			if (rtm->rtm_pid == kr_state.pid) /* caused by us */
 				continue;
@@ -1376,14 +1443,18 @@
 			if (rtm->rtm_errno)		/* failed attempts... */
 				continue;
 
+#if defined(RTF_LLINFO)
 			if (rtm->rtm_flags & RTF_LLINFO)	/* arp cache */
 				continue;
+#endif
 
 #ifdef RTF_MPATH
 			if (rtm->rtm_flags & RTF_MPATH)
 				mpath = 1;
 #endif
+#if !defined(__FreeBSD__)
 			prio = rtm->rtm_priority;
+#endif
 
 			switch (sa->sa_family) {
 			case AF_INET:
@@ -1460,6 +1531,7 @@
 				rtlabel_unref(kr->r.rtlabel);
 				kr->r.rtlabel = 0;
 				kr->r.ext_tag = 0;
+#if !defined(__FreeBSD__)
 				if ((label = (struct sockaddr_rtlabel *)
 				    rti_info[RTAX_LABEL]) != NULL) {
 					kr->r.rtlabel =
@@ -1467,6 +1539,7 @@
 					kr->r.ext_tag =
 					    rtlabel_id2tag(kr->r.rtlabel);
 				}
+#endif
 
 				if (kif_validate(kr->r.ifindex))
 					kr->r.flags &= ~F_DOWN;
@@ -1489,6 +1562,7 @@
 				kr->r.ifindex = ifindex;
 				kr->r.priority = prio;
 
+#if !defined(__FreeBSD__)
 				if ((label = (struct sockaddr_rtlabel *)
 				    rti_info[RTAX_LABEL]) != NULL) {
 					kr->r.rtlabel =
@@ -1496,6 +1570,7 @@
 					kr->r.ext_tag =
 					    rtlabel_id2tag(kr->r.rtlabel);
 				}
+#endif
 
 				kroute_insert(kr);
 			}
@@ -1519,7 +1594,11 @@
 			break;
 		case RTM_IFINFO:
 			memcpy(&ifm, next, sizeof(ifm));
+#ifdef __FreeBSD__
+			sa = (struct sockaddr *)(rtm + sizeof(ifm));
+#else
 			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
+#endif
 			get_rtaddrs(ifm.ifm_addrs, sa, rti_info);
 			if_change(ifm.ifm_index, ifm.ifm_flags, &ifm.ifm_data,
 			    (struct sockaddr_dl *)rti_info[RTAX_IFP]);
diff -ur ospfd_old/ospfd.c ospfd/ospfd.c
--- ospfd_old/ospfd.c	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/ospfd.c	2010-04-01 14:18:47.000000000 +0000
@@ -319,7 +319,9 @@
 
 	control_cleanup(ospfd_conf->csock);
 	kr_shutdown();
+#if !defined(__FreeBSD__)
 	carp_demote_shutdown();
+#endif
 
 	do {
 		if ((pid = wait(NULL)) == -1 &&
@@ -415,10 +417,14 @@
 				log_warnx("IFINFO request with wrong len");
 			break;
 		case IMSG_DEMOTE:
+#if !defined(__FreeBSD__)
 			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(dmsg))
 				fatalx("invalid size of OE request");
 			memcpy(&dmsg, imsg.data, sizeof(dmsg));
 			carp_demote_set(dmsg.demote_group, dmsg.level);
+#else
+			log_debug("main_dispatch_ospfe: no carp demotion support for FreeBSD");
+#endif
 			break;
 		default:
 			log_debug("main_dispatch_ospfe: error handling imsg %d",
diff -ur ospfd_old/ospfd.h ospfd/ospfd.h
--- ospfd_old/ospfd.h	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/ospfd.h	2010-04-01 14:18:46.000000000 +0000
@@ -32,10 +32,15 @@
 #include <imsg.h>
 #include "ospf.h"
 
-#define CONF_FILE		"/etc/ospfd.conf"
+#define CONF_FILE		"/usr/local/etc/ospfd.conf"
 #define	OSPFD_SOCKET		"/var/run/ospfd.sock"
 #define OSPFD_USER		"_ospfd"
 
+#ifdef __FreeBSD__
+#define RTP_OSPF        16      /* OSPF routes */
+#define RTP_ANY         64      /* any of the above */
+#endif
+
 #define NBR_HASHSIZE		128
 #define LSA_HASHSIZE		512
 
@@ -297,6 +302,10 @@
 TAILQ_HEAD(lsa_head, lsa_entry);
 TAILQ_HEAD(auth_md_head, auth_md);
 
+#if defined(__FreeBSD__) /* FreeBSD has no LINK_STATE_IS_UP macro. */
+#define LINK_STATE_IS_UP(_s)   ((_s) >= LINK_STATE_UP)
+#endif /* defined(__FreeBSD__) */
+
 struct iface {
 	LIST_ENTRY(iface)	 entry;
 	struct event		 hello_timer;
diff -ur ospfd_old/packet.c ospfd/packet.c
--- ospfd_old/packet.c	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/packet.c	2010-04-01 14:18:47.000000000 +0000
@@ -36,7 +36,7 @@
 #include "log.h"
 #include "ospfe.h"
 
-int		 ip_hdr_sanity_check(const struct ip *, u_int16_t);
+int		 ip_hdr_sanity_check(struct ip *, u_int16_t);
 int		 ospf_hdr_sanity_check(const struct ip *,
 		    struct ospf_hdr *, u_int16_t, const struct iface *);
 struct iface	*find_iface(struct ospfd_conf *, unsigned int, struct in_addr);
@@ -70,7 +70,11 @@
 	ip_hdr.ip_v = IPVERSION;
 	ip_hdr.ip_hl = sizeof(ip_hdr) >> 2;
 	ip_hdr.ip_tos = IPTOS_PREC_INTERNETCONTROL;
+#if defined(__FreeBSD__) || defined(__NetBSD__)
+	ip_hdr.ip_len = buf_size(buf) + sizeof(ip_hdr);
+#else
 	ip_hdr.ip_len = htons(buf_size(buf) + sizeof(ip_hdr));
+#endif
 	ip_hdr.ip_id = 0;  /* 0 means kernel set appropriate value */
 	ip_hdr.ip_off = 0;
 	ip_hdr.ip_ttl = iface->type != IF_TYPE_VIRTUALLINK ?
@@ -251,8 +255,11 @@
 }
 
 int
-ip_hdr_sanity_check(const struct ip *ip_hdr, u_int16_t len)
+ip_hdr_sanity_check(struct ip *ip_hdr, u_int16_t len)
 {
+#if defined(__NetBSD__) || defined(__FreeBSD__)
+	ip_hdr->ip_len = htons(ip_hdr->ip_len + (ip_hdr->ip_hl << 2));
+#endif
 	if (ntohs(ip_hdr->ip_len) != len) {
 		log_debug("recv_packet: invalid IP packet length %u",
 		    ntohs(ip_hdr->ip_len));
diff -ur ospfd_old/parse.y ospfd/parse.y
--- ospfd_old/parse.y	2010-04-01 14:18:14.000000000 +0000
+++ ospfd/parse.y	2010-04-01 14:18:47.000000000 +0000
@@ -200,11 +200,15 @@
 			free($2);
 		}
 		| RDOMAIN NUMBER {
+#ifdef __FreeBSD__
+			YYERROR;
+#else
 			if ($2 < 0 || $2 > RT_TABLEID_MAX) {
 				yyerror("invalid rdomain");
 				YYERROR;
 			}
 			conf->rdomain = $2;
+#endif
 		}
 		| RFC1583COMPAT yesno {
 			conf->rfc1583compat = $2;
@@ -505,6 +509,11 @@
 
 areaoptsl	: interface
 		| DEMOTE STRING	demotecount {
+#ifdef __FreeBSD__ /* XXX: FreeBSD has no carp demotion support. */
+			yyerror("FreeBSD has no CARP demotion support");
+			free($2);
+			YYERROR;
+#else
 			if ($3 < 1 || $3 > 255) {
 				yyerror("demote count out of range (1-255)");
 				free($2);
@@ -525,6 +534,7 @@
 				    area->demote_group);
 				YYERROR;
 			}
+#endif
 		}
 		| defaults
 		| STUB 			{ area->stub = 1; }
@@ -581,6 +591,7 @@
 				YYERROR;
 			iface->area = area;
 			LIST_INSERT_HEAD(&area->iface_list, iface, entry);
+				log_info("%s has index %d", iface->name, iface->ifindex);
 
 			memcpy(&ifacedefs, defs, sizeof(ifacedefs));
 			md_list_copy(&ifacedefs.md_list, &defs->md_list);
@@ -615,6 +626,11 @@
 
 interfaceoptsl	: PASSIVE		{ iface->passive = 1; }
 		| DEMOTE STRING		{
+#ifdef __FreeBSD__ /* XXX: FreeBSD has no carp demotion support. */
+                        yyerror("FreeBSD has no CARP demotion support");
+                        free($2);
+                        YYERROR;
+#else
 			if (strlcpy(iface->demote_group, $2,
 			    sizeof(iface->demote_group)) >=
 			    sizeof(iface->demote_group)) {
@@ -629,6 +645,7 @@
 				    iface->demote_group);
 				YYERROR;
 			}
+#endif
 		}
 		| defaults
 		;
