diff -urN ospfd/kroute.c ospfd/kroute.c
--- ospfd/kroute.c	2012-01-18 13:51:36.127310627 +1300
+++ ospfd/kroute.c	2012-01-17 14:55:09.515348667 +1300
@@ -1,4 +1,4 @@
-/*	$OpenBSD: kroute.c,v 1.71 2009/06/05 22:40:24 chris Exp $ */
+/*	$OpenBSD: kroute.c,v 1.55 2007/10/17 20:52:42 claudio Exp $ */
 
 /*
  * Copyright (c) 2004 Esben Norby <norby@openbsd.org>
@@ -27,7 +27,6 @@
 #include <arpa/inet.h>
 #include <net/if.h>
 #include <net/if_dl.h>
-#include <net/if_mib.h>
 #include <net/if_types.h>
 #include <net/route.h>
 #include <err.h>
@@ -47,7 +46,6 @@
 	int			fib_sync;
 	int			fd;
 	struct event		ev;
-	u_int			rdomain;
 } kr_state;
 
 struct kroute_node {
@@ -70,7 +68,7 @@
 int	kr_change_fib(struct kroute_node *, struct kroute *, int, int);
 int	kr_delete_fib(struct kroute_node *);
 
-struct kroute_node	*kroute_find(in_addr_t, u_int8_t, u_int8_t);
+struct kroute_node	*kroute_find(in_addr_t, u_int8_t);
 struct kroute_node	*kroute_matchgw(struct kroute_node *, struct in_addr);
 int			 kroute_insert(struct kroute_node *);
 int			 kroute_remove(struct kroute_node *);
@@ -89,7 +87,7 @@
 int		protect_lo(void);
 u_int8_t	prefixlen_classful(in_addr_t);
 void		get_rtaddrs(int, struct sockaddr *, struct sockaddr **);
-void		if_change(u_short, int, struct if_data *, struct sockaddr_dl *);
+void		if_change(u_short, int, struct if_data *);
 void		if_newaddr(u_short, struct sockaddr_in *, struct sockaddr_in *,
 		    struct sockaddr_in *);
 void		if_announce(void *);
@@ -111,9 +109,6 @@
 kif_init(void)
 {
 	RB_INIT(&kit);
-	/* init also krt tree so that we can call kr_shutdown() */
-	RB_INIT(&krt);
-	kr_state.fib_sync = 0;	/* decoupled */
 
 	if (fetchifs(0) == -1)
 		return (-1);
@@ -122,13 +117,12 @@
 }
 
 int
-kr_init(int fs, u_int rdomain)
+kr_init(int fs, u_int unused)
 {
 	int		opt = 0, rcvbuf, default_rcvbuf;
 	socklen_t	optlen;
 
 	kr_state.fib_sync = fs;
-	kr_state.rdomain = rdomain;
 
 	if ((kr_state.fd = socket(AF_ROUTE, SOCK_RAW, 0)) == -1) {
 		log_warn("kr_init: socket");
@@ -156,6 +150,8 @@
 	kr_state.pid = getpid();
 	kr_state.rtseq = 1;
 
+	RB_INIT(&krt);
+
 	if (fetchtable() == -1)
 		return (-1);
 
@@ -190,17 +186,13 @@
 					break;
 			}
 			nkn = kn->next;
-			if (i == krcount) {
+			if (i == krcount)
 				/* stale route */
 				if (kr_delete_fib(kn) == -1)
 					log_warnx("kr_delete_fib failed");
-				/*
-				 * if head element was removed we need to adjust
-				 * the head
-				 */
-				if (kr == kn)
-					kr = nkn;
-			}
+			log_debug("kr_update_fib: before: %s%s",
+			    inet_ntoa(kn->r.nexthop),
+			    i == krcount ? " (deleted)" : "");
 		}
 	}
 
@@ -220,6 +212,10 @@
 					break;
 			}
 
+			log_debug("kr_update_fib: after : %s%s",
+			     inet_ntoa(kroute[i].nexthop),
+			     kn == NULL ? " (added)" : "");
+
 			if (kn != NULL)
 				/* nexthop already present, skip it */
 				continue;
@@ -240,7 +236,6 @@
 		kn->r.prefixlen = kroute[i].prefixlen;
 		kn->r.nexthop.s_addr = kroute[i].nexthop.s_addr;
 		kn->r.flags = kroute[i].flags | F_OSPFD_INSERTED;
-		kn->r.priority = RTP_OSPF;
 		kn->r.ext_tag = kroute[i].ext_tag;
 		rtlabel_unref(kn->r.rtlabel);	/* for RTM_CHANGE */
 		kn->r.rtlabel = kroute[i].rtlabel;
@@ -264,10 +259,32 @@
 
 	kroute->rtlabel = rtlabel_tag2id(kroute->ext_tag);
 
-	kr = kroute_find(kroute->prefix.s_addr, kroute->prefixlen, RTP_OSPF);
-	if (kr != NULL && kr->next == NULL && krcount == 1)
-		/* single path OSPF route */
-		action = RTM_CHANGE;
+	kr = kroute_find(kroute->prefix.s_addr, kroute->prefixlen);
+
+	if (kr != NULL) {
+		if (kr->r.flags & F_KERNEL) {
+			/* a non-ospf route already exists. not a problem */
+			if (!(kr->r.flags & F_BGPD_INSERTED)) {
+				do {
+					kr->r.flags |= F_OSPFD_INSERTED;
+					kr = kr->next;
+				} while (kr);
+				return (0);
+			}
+			/*
+			 * XXX as long as there is no multipath support in
+			 * bgpd this is safe else we end up in a bad situation.
+			 */
+			/*
+			 * ospf route has higher pref
+			 * - reset flags to the ospf ones
+			 * - use RTM_CHANGE
+			 * - zero out ifindex (this is no longer relevant)
+			 */
+			action = RTM_CHANGE;
+		} else if (kr->next == NULL)	/* single path OSPF route */
+			action = RTM_CHANGE;
+	}
 
 	return (kr_change_fib(kr, kroute, krcount, action));
 }
@@ -275,9 +292,14 @@
 int
 kr_delete_fib(struct kroute_node *kr)
 {
-	if (kr->r.priority != RTP_OSPF)
-		log_warn("kr_delete_fib: %s/%d has wrong priority %d",
-		    inet_ntoa(kr->r.prefix), kr->r.prefixlen, kr->r.priority);
+	if (!(kr->r.flags & F_OSPFD_INSERTED))
+		return (0);
+
+	if (kr->r.flags & F_KERNEL) {
+		/* remove F_OSPFD_INSERTED flag, route still exists in kernel */
+		kr->r.flags &= ~F_OSPFD_INSERTED;
+		return (0);
+	}
 
 	if (send_rtmsg(kr_state.fd, RTM_DELETE, &kr->r) == -1)
 		return (-1);
@@ -293,8 +315,8 @@
 {
 	struct kroute_node	*kr, *nkr;
 
-	if ((kr = kroute_find(kroute->prefix.s_addr, kroute->prefixlen,
-	    RTP_OSPF)) == NULL)
+	if ((kr = kroute_find(kroute->prefix.s_addr, kroute->prefixlen)) ==
+	    NULL)
 		return (0);
 
 	while (kr != NULL) {
@@ -326,9 +348,10 @@
 	kr_state.fib_sync = 1;
 
 	RB_FOREACH(kr, kroute_tree, &krt)
-		if (kr->r.priority == RTP_OSPF)
-			for (kn = kr; kn != NULL; kn = kn->next)
+		if (!(kr->r.flags & F_KERNEL))
+			for (kn = kr; kn != NULL; kn = kn->next) {
 				send_rtmsg(kr_state.fd, RTM_ADD, &kn->r);
+			}
 
 	log_info("kernel routing table coupled");
 }
@@ -342,10 +365,12 @@
 	if (kr_state.fib_sync == 0)	/* already decoupled */
 		return;
 
-	RB_FOREACH(kr, kroute_tree, &krt)
-		if (kr->r.priority == RTP_OSPF)
-			for (kn = kr; kn != NULL; kn = kn->next)
+	RB_FOREACH(kr, kroute_tree, &krt) {
+		if (!(kr->r.flags & F_KERNEL))
+			for (kn = kr; kn != NULL; kn = kn->next) {
 				send_rtmsg(kr_state.fd, RTM_DELETE, &kn->r);
+			}
+	}
 
 	kr_state.fib_sync = 0;
 
@@ -356,7 +381,6 @@
 void
 kr_dispatch_msg(int fd, short event, void *bula)
 {
-	/* XXX this is stupid */
 	dispatch_rtmsg();
 }
 
@@ -470,14 +494,12 @@
 	    (a >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET)
 		goto dont_redistribute;
 	/*
-	 * Consider networks with nexthop loopback as not redistributable
-	 * unless it is a reject or blackhole route.
+	 * Consider networks with nexthop loopback as not redistributable.
 	 */
-	if (kr->nexthop.s_addr == htonl(INADDR_LOOPBACK) &&
-	    !(kr->flags & (F_BLACKHOLE|F_REJECT)))
+	if (kr->nexthop.s_addr == htonl(INADDR_LOOPBACK))
 		goto dont_redistribute;
 
-	/* Should we redistribute this route? */
+	/* Should we redistrubute this route? */
 	if (!ospf_redistribute(kr, &metric))
 		goto dont_redistribute;
 
@@ -509,10 +531,6 @@
 	struct rroute		 rr;
 	int			 redistribute = 0;
 
-	/* only the highest prio route can be redistributed */
-	if (kroute_find(kh->r.prefix.s_addr, kh->r.prefixlen, RTP_ANY) != kh)
-		return;
-
 	bzero(&rr, sizeof(rr));
 	rr.metric = UINT_MAX;
 	for (kn = kh; kn; kn = kn->next)
@@ -572,14 +590,6 @@
 		return (-1);
 	if (a->r.prefixlen > b->r.prefixlen)
 		return (1);
-
-	/* if the priority is RTP_ANY finish on the first address hit */
-	if (a->r.priority == RTP_ANY || b->r.priority == RTP_ANY)
-		return (0);
-	if (a->r.priority < b->r.priority)
-		return (-1);
-	if (a->r.priority > b->r.priority)
-		return (1);
 	return (0);
 }
 
@@ -591,27 +601,14 @@
 
 /* tree management */
 struct kroute_node *
-kroute_find(in_addr_t prefix, u_int8_t prefixlen, u_int8_t prio)
+kroute_find(in_addr_t prefix, u_int8_t prefixlen)
 {
 	struct kroute_node	s;
-	struct kroute_node	*kn, *tmp;
 
 	s.r.prefix.s_addr = prefix;
 	s.r.prefixlen = prefixlen;
-	s.r.priority = prio;
 
-	kn = RB_FIND(kroute_tree, &krt, &s);
-	if (kn && prio == RTP_ANY) {
-		tmp = RB_PREV(kroute_tree, &krt, kn);
-		while (tmp) {
-			if (kroute_compare(&s, tmp) == 0)
-				kn = tmp;
-			else 
-				break;
-			tmp = RB_PREV(kroute_tree, &krt, kn);
-		}
-	}
-	return (kn);
+	return (RB_FIND(kroute_tree, &krt, &s));
 }
 
 struct kroute_node *
@@ -641,6 +638,7 @@
 		 * Multipath route, add at end of list and clone the
 		 * ospfd inserted flag.
 		 */
+		kr->r.flags |= krm->r.flags & F_OSPFD_INSERTED;
 		while (krm->next != NULL)
 			krm = krm->next;
 		krm->next = kr;
@@ -800,21 +798,11 @@
     struct sockaddr_dl *sdl)
 {
 	struct kif_node		*kif;
-	struct ifmibdata	 ifmd;
-        struct in_addr           addr;
-        size_t			 len = sizeof ifmd;
-        int			 name[6];
 
-	if ((kif = kif_find(ifindex)) == NULL) {
+	if ((kif = kif_find(ifindex)) == NULL)
 		if ((kif = kif_insert(ifindex)) == NULL)
 			return (NULL);
-		kif->k.nh_reachable = (flags & IFF_UP) &&
-		    (LINK_STATE_IS_UP(ifd->ifi_link_state) ||
-		    (ifd->ifi_link_state == LINK_STATE_UNKNOWN &&
-		    ifd->ifi_type != IFT_CARP));
-	}
 
-	kif->k.ifindex = ifindex;
 	kif->k.flags = flags;
 	kif->k.link_state = ifd->ifi_link_state;
 	kif->k.media_type = ifd->ifi_type;
@@ -855,12 +843,11 @@
 
 	/* we will never match the default route */
 	for (i = 32; i > 0; i--)
-		if ((kr = kroute_find(key & prefixlen2mask(i), i,
-		    RTP_ANY)) != NULL)
+		if ((kr = kroute_find(key & prefixlen2mask(i), i)) != NULL)
 			return (kr);
 
 	/* if we don't have a match yet, try to find a default route */
-	if ((kr = kroute_find(0, 0, RTP_ANY)) != NULL)
+	if ((kr = kroute_find(0, 0)) != NULL)
 			return (kr);
 
 	return (NULL);
@@ -922,8 +909,8 @@
 	return (htonl(0xffffffff << (32 - prefixlen)));
 }
 
-#define	ROUNDUP(a)	\
-    (((a) & (sizeof(long) - 1)) ? (1 + ((a) | (sizeof(long) - 1))) : (a))
+#define	ROUNDUP(a, size)	\
+    (((a) & ((size) - 1)) ? (1 + ((a) | ((size) - 1))) : (a))
 
 void
 get_rtaddrs(int addrs, struct sockaddr *sa, struct sockaddr **rti_info)
@@ -934,21 +921,20 @@
 		if (addrs & (1 << i)) {
 			rti_info[i] = sa;
 			sa = (struct sockaddr *)((char *)(sa) +
-			    ROUNDUP(sa->sa_len));
+			    ROUNDUP(sa->sa_len, sizeof(long)));
 		} else
 			rti_info[i] = NULL;
 	}
 }
 
 void
-if_change(u_short ifindex, int flags, struct if_data *ifd,
-    struct sockaddr_dl *sdl)
+if_change(u_short ifindex, int flags, struct if_data *ifd)
 {
 	struct kroute_node	*kr, *tkr;
 	struct kif		*kif;
 	u_int8_t		 reachable;
 
-	if ((kif = kif_update(ifindex, flags, ifd, sdl)) == NULL) {
+	if ((kif = kif_update(ifindex, flags, ifd, NULL)) == NULL) {
 		log_warn("if_change:  kif_update(%u)", ifindex);
 		return;
 	}
@@ -1041,7 +1027,7 @@
 #if !defined(__FreeBSD__)
 	struct sockaddr_rtlabel	sa_rl;
 	const char		*label;
-#endif
+#endif /* !defined(__FreeBSD__) */
 	int			iovcnt = 0;
 
 	if (kr_state.fib_sync == 0)
@@ -1052,16 +1038,13 @@
 	hdr.rtm_version = RTM_VERSION;
 	hdr.rtm_type = action;
 #if !defined(__FreeBSD__)
-	hdr.rtm_priority = RTP_OSPF;
-	hdr.rtm_tableid = kr_state.rdomain;	/* rtableid */
-#endif
-	if (action == RTM_CHANGE)
-		hdr.rtm_fmask = RTF_REJECT|RTF_BLACKHOLE;
-#if !defined(__FreeBSD__)
-	else
-		hdr.rtm_flags = RTF_MPATH;
-#endif
-
+	hdr.rtm_flags = RTF_PROTO2|RTF_MPATH;
+#else
+	/* No multipath routing in FreeBSD yet */
+	hdr.rtm_flags = RTF_PROTO2;
+#endif /* !defined(__FreeBSD__) */
+	if (action == RTM_CHANGE)	/* force PROTO2 reset the other flags */
+		hdr.rtm_fmask = RTF_PROTO2|RTF_PROTO1|RTF_REJECT|RTF_BLACKHOLE;
 	hdr.rtm_seq = kr_state.rtseq++;	/* overflow doesn't matter */
 	hdr.rtm_msglen = sizeof(hdr);
 	/* adjust iovec */
@@ -1104,7 +1087,7 @@
 	iov[iovcnt].iov_base = &mask;
 	iov[iovcnt++].iov_len = sizeof(mask);
 
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) /* FreeBSD has no route labeling. */
 	if (kroute->rtlabel != 0) {
 		sa_rl.sr_len = sizeof(sa_rl);
 		sa_rl.sr_family = AF_UNSPEC;
@@ -1121,7 +1104,8 @@
 		iov[iovcnt].iov_base = &sa_rl;
 		iov[iovcnt++].iov_len = sizeof(sa_rl);
 	}
-#endif
+#endif /* !defined(__FreeBSD__) */
+
 
 retry:
 	if (writev(fd, iov, iovcnt) == -1) {
@@ -1174,13 +1158,13 @@
 	mib[3] = AF_INET;
 	mib[4] = NET_RT_DUMP;
 	mib[5] = 0;
-#if !defined(__FreeBSD__)
-	mib[6] = kr_state.rdomain;	/* rtableid */
+#if !defined(__FreeBSD__) /* FreeBSD has no multiple routing tables */
+	mib[6] = 0;	/* rtableid */
 
 	if (sysctl(mib, 7, NULL, &len, NULL, 0) == -1) {
 #else
 	if (sysctl(mib, 6, NULL, &len, NULL, 0) == -1) {
-#endif
+#endif /* !defined(__FreeBSD__) */
 		log_warn("sysctl");
 		return (-1);
 	}
@@ -1188,11 +1172,11 @@
 		log_warn("fetchtable");
 		return (-1);
 	}
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) /* FreeBSD has no multiple routing tables */
 	if (sysctl(mib, 7, buf, &len, NULL, 0) == -1) {
 #else
 	if (sysctl(mib, 6, buf, &len, NULL, 0) == -1) {
-#endif
+#endif /* !defined(__FreeBSD__) */
 		log_warn("sysctl");
 		free(buf);
 		return (-1);
@@ -1203,20 +1187,16 @@
 		rtm = (struct rt_msghdr *)next;
 		if (rtm->rtm_version != RTM_VERSION)
 			continue;
-#ifdef __FreeBSD__
 		sa = (struct sockaddr *)(rtm + 1);
-#else
-		sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
-#endif
 		get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
 
 		if ((sa = rti_info[RTAX_DST]) == NULL)
 			continue;
 
-#if defined(RTF_LLINFO)
+#if defined(RTF_LLINFO) /* FreeBSD dropped RTF_LLINFO after ARP-v2 rework */
 		if (rtm->rtm_flags & RTF_LLINFO)	/* arp cache */
 			continue;
-#endif
+#endif /* defined(RTF_LLINFO) */
 
 		if ((kr = calloc(1, sizeof(struct kroute_node))) == NULL) {
 			log_warn("fetchtable");
@@ -1225,9 +1205,6 @@
 		}
 
 		kr->r.flags = F_KERNEL;
-#if !defined(__FreeBSD__)
-		kr->r.priority = rtm->rtm_priority;
-#endif
 
 		switch (sa->sa_family) {
 		case AF_INET:
@@ -1236,12 +1213,10 @@
 			sa_in = (struct sockaddr_in *)rti_info[RTAX_NETMASK];
 			if (rtm->rtm_flags & RTF_STATIC)
 				kr->r.flags |= F_STATIC;
-			if (rtm->rtm_flags & RTF_BLACKHOLE)
-				kr->r.flags |= F_BLACKHOLE;
-			if (rtm->rtm_flags & RTF_REJECT)
-				kr->r.flags |= F_REJECT;
 			if (rtm->rtm_flags & RTF_DYNAMIC)
 				kr->r.flags |= F_DYNAMIC;
+			if (rtm->rtm_flags & RTF_PROTO1)
+				kr->r.flags |= F_BGPD_INSERTED;
 			if (sa_in != NULL) {
 				if (sa_in->sin_len == 0)
 					break;
@@ -1270,11 +1245,11 @@
 				break;
 			}
 
-#if !defined(__FreeBSD__)
-		if (rtm->rtm_priority == RTP_OSPF)  {
+		if (rtm->rtm_flags & RTF_PROTO2)  {
 			send_rtmsg(kr_state.fd, RTM_DELETE, &kr->r);
 			free(kr);
 		} else {
+#if !defined(__FreeBSD__) /* FreeBSD has no route labeling. */
 			if ((label = (struct sockaddr_rtlabel *)
 			    rti_info[RTAX_LABEL]) != NULL) {
 				kr->r.rtlabel =
@@ -1282,11 +1257,9 @@
 				kr->r.ext_tag =
 				    rtlabel_id2tag(kr->r.rtlabel);
 			}
-#endif
+#endif /* !defined(__FreeBSD__) */
 			kroute_insert(kr);
-#if !defined(__FreeBSD__)
 		}
-#endif
 
 	}
 	free(buf);
@@ -1302,6 +1275,7 @@
 	struct rt_msghdr	*rtm;
 	struct if_msghdr	 ifm;
 	struct ifa_msghdr	*ifam;
+	struct kif		*kif = NULL;
 	struct sockaddr		*sa, *rti_info[RTAX_MAX];
 
 	mib[0] = CTL_NET;
@@ -1332,15 +1306,20 @@
 			continue;
 		switch (rtm->rtm_type) {
 		case RTM_IFINFO:
-			memcpy(&ifm, next, sizeof(ifm));
-#ifdef __FreeBSD__
+			bcopy(rtm, &ifm, sizeof ifm);
 			sa = (struct sockaddr *)(next + sizeof(ifm));
-#else
-			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
-#endif
 			get_rtaddrs(ifm.ifm_addrs, sa, rti_info);
-			if_change(ifm.ifm_index, ifm.ifm_flags, &ifm.ifm_data,
-			    (struct sockaddr_dl *)rti_info[RTAX_IFP]);
+
+			if ((kif = kif_update(ifm.ifm_index,
+			    ifm.ifm_flags, &ifm.ifm_data,
+			    (struct sockaddr_dl *)rti_info[RTAX_IFP])) == NULL)
+				fatal("fetchifs");
+
+			kif->nh_reachable = (kif->flags & IFF_UP) &&
+			    (LINK_STATE_IS_UP(ifm.ifm_data.ifi_link_state) ||
+			    (ifm.ifm_data.ifi_link_state ==
+			    LINK_STATE_UNKNOWN &&
+			    ifm.ifm_data.ifi_type != IFT_CARP));
 			break;
 		case RTM_NEWADDR:
 			ifam = (struct ifa_msghdr *)rtm;
@@ -1374,10 +1353,10 @@
 	struct sockaddr_in	*sa_in;
 #if !defined(__FreeBSD__)
 	struct sockaddr_rtlabel	*label;
-#endif
+#endif /* !defined(__FreeBSD__) */
 	struct kroute_node	*kr, *okr;
 	struct in_addr		 prefix, nexthop;
-	u_int8_t		 prefixlen, prio;
+	u_int8_t		 prefixlen;
 	int			 flags, mpath;
 	u_short			 ifindex = 0;
 
@@ -1402,19 +1381,14 @@
 		flags = F_KERNEL;
 		nexthop.s_addr = 0;
 		mpath = 0;
-		prio = 0;
 
 		if (rtm->rtm_type == RTM_ADD || rtm->rtm_type == RTM_CHANGE ||
 		    rtm->rtm_type == RTM_DELETE) {
-#ifdef __FreeBSD__
 			sa = (struct sockaddr *)(rtm + 1);
-#else
-			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
-#endif
 			get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
 
-#if !defined(__FreeBSD__)
-			if (rtm->rtm_tableid != kr_state.rdomain)
+#if !defined(__FreeBSD__) /* XXX: FreeBSD has no multiple routing tables */
+			if (rtm->rtm_tableid != 0)
 				continue;
 #endif
 
@@ -1424,19 +1398,15 @@
 			if (rtm->rtm_errno)		/* failed attempts... */
 				continue;
 
-#if defined(RTF_LLINFO)
+#if defined(RTF_LLINFO) /* FreeBSD dropped RTF_LLINFO after ARP-v2 rework */
 			if (rtm->rtm_flags & RTF_LLINFO)	/* arp cache */
 				continue;
-#endif
+#endif /* defined(RTF_LLINFO) */
 
 #ifdef RTF_MPATH
 			if (rtm->rtm_flags & RTF_MPATH)
 				mpath = 1;
 #endif
-#if !defined(__FreeBSD__)
-			prio = rtm->rtm_priority;
-#endif
-
 			switch (sa->sa_family) {
 			case AF_INET:
 				prefix.s_addr =
@@ -1454,12 +1424,10 @@
 					    prefixlen_classful(prefix.s_addr);
 				if (rtm->rtm_flags & RTF_STATIC)
 					flags |= F_STATIC;
-				if (rtm->rtm_flags & RTF_BLACKHOLE)
-					flags |= F_BLACKHOLE;
-				if (rtm->rtm_flags & RTF_REJECT)
-					flags |= F_REJECT;
 				if (rtm->rtm_flags & RTF_DYNAMIC)
 					flags |= F_DYNAMIC;
+				if (rtm->rtm_flags & RTF_PROTO1)
+					flags |= F_BGPD_INSERTED;
 				break;
 			default:
 				continue;
@@ -1488,8 +1456,8 @@
 				continue;
 			}
 
-			if ((okr = kroute_find(prefix.s_addr, prefixlen, prio))
-			    != NULL) {
+			if ((okr = kroute_find(prefix.s_addr, prefixlen)) !=
+			    NULL) {
 				/* just add new multipath routes */
 				if (mpath && rtm->rtm_type == RTM_ADD)
 					goto add;
@@ -1503,6 +1471,13 @@
 					goto add;
 				}
 
+				/*
+				 * ospf route overridden by kernel. Preference
+				 * of the route is not checked because this is
+				 * forced -- most probably by a user.
+				 */
+				if (kr->r.flags & F_OSPFD_INSERTED)
+					flags |= F_OSPFD_INSERTED;
 				if (kr->r.flags & F_REDISTRIBUTED)
 					flags |= F_REDISTRIBUTED;
 				kr->r.nexthop.s_addr = nexthop.s_addr;
@@ -1512,7 +1487,7 @@
 				rtlabel_unref(kr->r.rtlabel);
 				kr->r.rtlabel = 0;
 				kr->r.ext_tag = 0;
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) /* FreeBSD has no route labeling. */
 				if ((label = (struct sockaddr_rtlabel *)
 				    rti_info[RTAX_LABEL]) != NULL) {
 					kr->r.rtlabel =
@@ -1520,7 +1495,7 @@
 					kr->r.ext_tag =
 					    rtlabel_id2tag(kr->r.rtlabel);
 				}
-#endif
+#endif /* !defined(__FreeBSD__) */
 
 				if (kif_validate(kr->r.ifindex))
 					kr->r.flags &= ~F_DOWN;
@@ -1541,9 +1516,8 @@
 				kr->r.nexthop.s_addr = nexthop.s_addr;
 				kr->r.flags = flags;
 				kr->r.ifindex = ifindex;
-				kr->r.priority = prio;
 
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) /* FreeBSD has no route labeling */
 				if ((label = (struct sockaddr_rtlabel *)
 				    rti_info[RTAX_LABEL]) != NULL) {
 					kr->r.rtlabel =
@@ -1551,14 +1525,14 @@
 					kr->r.ext_tag =
 					    rtlabel_id2tag(kr->r.rtlabel);
 				}
-#endif
+#endif /* !defined(__FreeBSD__) */
 
 				kroute_insert(kr);
 			}
 			break;
 		case RTM_DELETE:
-			if ((kr = kroute_find(prefix.s_addr, prefixlen, prio))
-			    == NULL)
+			if ((kr = kroute_find(prefix.s_addr, prefixlen)) ==
+			    NULL)
 				continue;
 			if (!(kr->r.flags & F_KERNEL))
 				continue;
@@ -1575,14 +1549,8 @@
 			break;
 		case RTM_IFINFO:
 			memcpy(&ifm, next, sizeof(ifm));
-#ifdef __FreeBSD__
-			sa = (struct sockaddr *)(rtm + sizeof(ifm));
-#else
-			sa = (struct sockaddr *)(next + rtm->rtm_hdrlen);
-#endif
-			get_rtaddrs(ifm.ifm_addrs, sa, rti_info);
-			if_change(ifm.ifm_index, ifm.ifm_flags, &ifm.ifm_data,
-			    (struct sockaddr_dl *)rti_info[RTAX_IFP]);
+			if_change(ifm.ifm_index, ifm.ifm_flags,
+			    &ifm.ifm_data);
 			break;
 		case RTM_NEWADDR:
 			ifam = (struct ifa_msghdr *)rtm;
diff -urN ospfd/ospfd.h ospfd/ospfd.h
--- ospfd/ospfd.h	2012-01-18 13:51:36.131355257 +1300
+++ ospfd/ospfd.h	2012-01-17 14:55:09.516363090 +1300
@@ -64,6 +64,7 @@
 #define	F_REJECT		0x0040
 #define	F_BLACKHOLE		0x0080
 #define	F_REDISTRIBUTED		0x0100
+#define	F_BGPD_INSERTED		0x0200
 
 struct imsgev {
 	struct imsgbuf		 ibuf;
