--- classifyd.c.old	2009-11-09 18:28:40.000000000 +0000
+++ classifyd.c	2009-11-09 18:29:38.000000000 +0000
@@ -28,13 +28,17 @@
 
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/ioctl.h>
+#include <sys/time.h>
 
+#include <net/if.h>
 #include <arpa/inet.h>
 #include <netinet/in.h>
 #include <netinet/in_systm.h>
 #include <netinet/ip.h>
 #include <netinet/tcp.h>
 #include <netinet/udp.h>
+#include <net/pfvar.h>
 
 #include <assert.h>
 #include <err.h>
@@ -53,15 +57,21 @@
 #include <unistd.h>
 
 #include "hashtable.h"
+#include "hashtable_private.h"
 #include "pathnames.h"
 #include "protocols.h"
 
 #define IC_DPORT	7777
 #define IC_HASHSZ	4096
-#define IC_PKTMAXMATCH	5
+static int IC_PKTMAXMATCH = 5;
 #define IC_PKTSZ	1500
 #define IC_QMAXSZ	256
 
+#define DIVERT_ALTQ 0x1000
+#define DIVERT_DNCOOKIE 0x2000
+#define DIVERT_ACTION 0x4000
+#define DIVERT_TAG 0x8000
+
 /*
  * Internal representation of a packet.
  */
@@ -94,6 +104,7 @@
 	uint32_t if_datalen;	/* length in bytes of if_data */
 	uint16_t if_pktcount;	/* number of packets concatenated */
 	uint16_t if_fwrule;	/* ipfw(4) rule associated with flow */
+	time_t	 expire;	/* flow expire time */
 };
 
 /*
@@ -126,7 +137,7 @@
 static struct ic_queue outQ;
 
 /* divert(4) socket */
-static int dvtS;
+static int dvtS = 0;
 
 /* config file path */
 static const char *conf = IC_CONFIG_PATH;
@@ -137,12 +148,25 @@
 /* List of protocols available to the system */
 struct ic_protocols *fp;
 
+/* Our hashtables */
+struct hashtable 
+		*th = NULL, 
+		*uh = NULL;
+
+/* signaled to kick garbage collector */
+static pthread_cond_t  gq_condvar;     
+
+/* number of packets before kicking garbage collector */
+static unsigned int npackets = 250; 
+
+static time_t time_expire = 40; /* 40 seconds */
 /*
  * Forward function declarations.
  */
 void		*classify_pthread(void *);
 void		*read_pthread(void *);
 void		*write_pthread(void *);
+void		*garbage_pthread(void *);
 static int	equalkeys(void *, void *);
 static unsigned int hashfromkey(void *);
 static void	test_re(void);
@@ -155,7 +179,7 @@
 {
 	struct sockaddr_in addr;
 	struct sigaction sa;
-	pthread_t  classifytd, readtd, writetd;
+	pthread_t  classifytd, readtd, writetd, garbagectd;
 	const char *errstr;
 	long long  num;
 	uint16_t   port, qmaxsz;
@@ -164,13 +188,28 @@
 	tflag = 0;
 	port = IC_DPORT;
 	qmaxsz = IC_QMAXSZ;
-	while ((ch = getopt(argc, argv, "htc:P:p:q:")) != -1) {
+	while ((ch = getopt(argc, argv, "n:e:htc:P:p:q:")) != -1) {
 		switch(ch) {
 		case 'c':
 			conf = strdup(optarg);
 			if (conf == NULL)
 				err(EX_TEMPFAIL, "config file path");
 			break;
+		case 'e':
+			num = strtonum((const char *)optarg, 1, 400, &errstr);
+			if (num == 0 && errstr != NULL) {
+				errx(EX_USAGE, "invalud expire seconds: %s", errstr);	
+			}
+			time_expire = (time_t)num;
+			break;
+		case 'n':
+                        num = strtonum((const char *)optarg, 1, 65535, &errstr);
+                        if (num == 0 && errstr != NULL) {
+                                errx(EX_USAGE, "invalid number for packets: %s", errstr);
+                        }
+                        npackets = (unsigned int)num;
+			IC_PKTMAXMATCH = num;
+			break;
 		case 'P':
 			protoDir = strdup(optarg);
 			if (protoDir == NULL)
@@ -230,6 +269,9 @@
 	error = pthread_cond_init(&outQ.fq_condvar, NULL);
 	if (error != 0)
 		err(EX_OSERR, "unable to initialize output queue condvar");
+        error = pthread_cond_init(&gq_condvar, NULL);
+        if (error != 0)
+                err(EX_OSERR, "unable to initialize garbage collector condvar");
 
 	/*
 	 * Create and bind the divert(4) socket.
@@ -276,32 +318,68 @@
 	if (error == -1)
 		err(EX_OSERR, "unable to set signal handler");
 
+        /*
+         * There are 2 tables: udp and tcp.
+         */
+        th = create_hashtable(IC_HASHSZ, hashfromkey, equalkeys);
+        if (th == NULL) {
+                syslog(LOG_ERR, "unable to create TCP tracking table");
+		error = EX_SOFTWARE;
+                goto cleanup;
+        }
+        uh = create_hashtable(IC_HASHSZ, hashfromkey, equalkeys);
+        if (uh == NULL) {
+                syslog(LOG_ERR, "unable to create UDP tracking table");
+		error = EX_SOFTWARE;
+                goto cleanup;
+        }
+
 	/*
 	 * Create the various threads.
 	 */
 	error = pthread_create(&readtd, NULL, read_pthread, NULL);
-	if (error != 0)
-		err(EX_OSERR, "unable to create reader thread");
+	if (error != 0) {
+		syslog(LOG_ERR, "unable to create reader thread");
+		error = EX_OSERR;
+		goto cleanup;
+	}
 	error = pthread_create(&classifytd, NULL, classify_pthread, NULL);
-	if (error != 0)
-		err(EX_OSERR, "unable to create classifier thread");
+	if (error != 0) { 
+		syslog(LOG_ERR, "unable to create classifier thread");
+		error = EX_OSERR;
+		goto cleanup;
+	}
 	error = pthread_create(&writetd, NULL, write_pthread, NULL);
-	if (error != 0)
-		err(EX_OSERR, "unable to create writer thread");
-
+	if (error != 0) {
+		syslog(LOG_ERR, "unable to create writer thread");
+		error = EX_OSERR;
+		goto cleanup;
+	}
+        error = pthread_create(&garbagectd, NULL, garbage_pthread, NULL);
+        if (error != 0) {
+                syslog(LOG_ERR, "unable to create garbage collect thread");
+		error = EX_OSERR;
+		goto cleanup;
+	}
 	/*
 	 * Wait for our threads to exit.
 	 */
 	pthread_join(readtd, NULL);
 	pthread_join(classifytd, NULL);
 	pthread_join(writetd, NULL);
-
+	pthread_join(garbagectd, NULL);
 	/*
 	 * Cleanup
 	 */
-	close(dvtS);
+cleanup:
+	if (dvtS > 0)
+		close(dvtS);
+	if (th != NULL)
+		hashtable_destroy(th, 1);
+	if (uh != NULL)
+		hashtable_destroy(uh, 1);
 	
-	return (0);
+	return (error);
 }
 
 void *
@@ -310,6 +388,7 @@
 	struct ic_pkt	   *pkt;
 	struct ip *ipp;
 	int	  len;
+	unsigned int pcktcnt = 0;
 
 	while (1) {
 		pkt = (struct ic_pkt *)malloc(sizeof(struct ic_pkt));
@@ -353,7 +432,11 @@
 		STAILQ_INSERT_HEAD(&inQ.fq_pkthead, pkt, fp_link);
 		inQ.fq_size++;
 		pthread_mutex_unlock(&inQ.fq_mtx);
-		pthread_cond_signal(&inQ.fq_condvar);
+		if (++pcktcnt > npackets) {
+			pcktcnt = 0;
+			pthread_cond_signal(&gq_condvar);
+		} else
+			pthread_cond_signal(&inQ.fq_condvar);
 	}
 
 	/* NOTREACHED */
@@ -398,6 +481,10 @@
                         if ((error) == 0) {                                     \
                                 (flow)->if_fwrule = (proto)->p_fwrule;          \
                                 (pkt)->fp_saddr.sin_port = (flow)->if_fwrule;   \
+				syslog(LOG_NOTICE, "Found Protocol: %s (rule %s)", \
+                    			(proto)->p_name, ((proto)->p_fwrule & DIVERT_ACTION) ? "action block": \
+                                        ((proto)->p_fwrule & DIVERT_DNCOOKIE) ? "dnpipe" : \
+                                        ((proto)->p_fwrule & DIVERT_ALTQ) ? "altq" : "tag"); \
 				break;						\
 			} else if ((error) != REG_NOMATCH) {			\
 				regerror((error), &(proto)->p_preg, (regerr), sizeof((regerr))); \
@@ -420,39 +507,19 @@
 	struct tcphdr	 *tcp;
 	struct udphdr	 *udp;
 	struct ic_pkt	 *pkt;
-	struct hashtable *sh, *th, *uh;
 	struct protocol	 *proto;
+	struct timeval	 tv;
 	regmatch_t	 pmatch;
 	u_char		 *data, *payload;
 	uint16_t	 trycount;
 	int		 datalen, error;
 
-	/*
-	 * There are 3 tables: udp, tcp, and tcp syn.
-	 * The tcp syn table tracks connections for which a
-	 * SYN packet has been sent but no reply has been returned
-	 * yet. Once the SYN ACK reply is detected it is moved to
-	 * the regular tcp connection tracking table.
-	 */
-	sh = create_hashtable(IC_HASHSZ, hashfromkey, equalkeys);
-	if (sh == NULL) {
-		syslog(LOG_ERR, "unable to create TCP (SYN) tracking table");
-		exit(EX_SOFTWARE);
-	}
-	th = create_hashtable(IC_HASHSZ, hashfromkey, equalkeys);
-	if (th == NULL) {
-		syslog(LOG_ERR, "unable to create TCP tracking table");
-		exit(EX_SOFTWARE);
-	}
-	uh = create_hashtable(IC_HASHSZ, hashfromkey, equalkeys);
-	if (uh == NULL) {
-		syslog(LOG_ERR, "unable to create UDP tracking table");
-		exit(EX_SOFTWARE);
-	}
-
 	flow = NULL;
 	key = NULL;
 	while(1) {
+		while(gettimeofday(&tv, NULL) != 0)
+			;
+
 		pthread_mutex_lock(&inQ.fq_mtx);
 		pkt = STAILQ_LAST(&inQ.fq_pkthead, ic_pkt, fp_link);
 		while (pkt == NULL) {
@@ -490,154 +557,76 @@
 			}
 
 			/*
-			 * Handle session initiation.
-			 */
-			if ((tcp->th_flags & TH_FLAGS) ==  TH_SYN) {
-				/*
-				 * Assume any pre-existing records are stale.
-				 */
-				flow = hashtable_search(sh, (void *)key);
-				if (flow != NULL) {
-					flow = hashtable_remove(sh, (void *)key);
-					free(flow->if_data);
-					free(flow);
-					flow = NULL;
-				}
-
-				flow = (struct ip_flow *)
-				    malloc(sizeof(struct ip_flow));
-				if (flow == NULL) {
-					syslog(LOG_WARNING, "packet dropped: %m");
-					free(key);
-					free(pkt->fp_pkt);
-					free(pkt);
-					continue;
-				}
-				flow->if_data = NULL;
-				flow->if_datalen = 0;
-				/* Don't count TCP handshake packets */
-				flow->if_pktcount = 0;
-				flow->if_fwrule = 0;
-				if (hashtable_insert(sh, (void *)key,
-				    (void *)flow) == 0) {
-					syslog(LOG_NOTICE,
-					    "packet dropped: unable to insert into table");
-					free(flow);
-					free(key);
-					free(pkt->fp_pkt);
-					free(pkt);
-					continue;
-				}
-				goto enqueue;
-			/*
-			 * Handle session tear-down.
-			 * XXX - Not sure what other flags are not allowed with FIN.
-			 */
-			} else if (((tcp->th_flags & TH_FIN) != 0) &&
-			    (tcp->th_flags & (TH_RST|TH_SYN)) == 0) {
-				/* XXX - Should we look in SYN table also? */
-				flow = hashtable_search(th, (void *)key);
-				if (flow != NULL) {
-					flow = hashtable_remove(th, (void *)key);
-					if (flow->if_data != NULL)
-						free(flow->if_data);
-					free(flow);
-					flow = NULL;
-				}
-				free(key);
-				goto enqueue;
-			}
-
-			/*
-			 * Skip anything that's not an ACK or PSH/ACK
-			 */
-			if ((tcp->th_flags & TH_FLAGS) !=  TH_ACK &&
-			    (tcp->th_flags & TH_FLAGS) !=  (TH_PUSH|TH_ACK))
-				goto enqueue;
-
-			/*
 			 * Look in the regular table first since most
 			 * packets will belong to an already established
 			 * session.
 			 */
 			flow = hashtable_search(th, (void *)key);
-			if (flow != NULL) {
-				if (datalen > 0 && flow->if_pktcount < IC_PKTMAXMATCH) {
-					data = (char *)realloc((void *)flow->if_data,
-					    flow->if_datalen + datalen);
-					if (data == NULL) {
-						syslog(LOG_WARNING, "packet dropped: %m");
-						free(key);
-						free(pkt->fp_pkt);
-						free(pkt);
-						continue;
-					}
-					memcpy((void *)(data + flow->if_datalen),
-					    (void *)payload, datalen);
-					flow->if_data = data;
-					flow->if_datalen += datalen;
-					flow->if_pktcount++;
-
-				/*
-				 * If we haven't been able to classify this flow after
-				 * collecting IC_PKTMAXMATCH packets, just pass it through.
-				 */
-				} else if (flow->if_pktcount >= IC_PKTMAXMATCH &&
-				    flow->if_fwrule == 0)
-					goto enqueue;
-				goto classify;
-			}
-
-			flow = hashtable_search(sh, (void *)key);
-			if (flow != NULL) {
-				if (datalen > 0) {
-					data = (char *)malloc(datalen);
-					if (data == NULL) {
-						syslog(LOG_WARNING, "packet dropped: %m");
-						free(key);
-						free(pkt->fp_pkt);
-						free(pkt);
-						continue;
-					}
-					memcpy((void *)data, (void *)payload,
-					    datalen);
-				} else
-					data = NULL;
-
-				flow->if_data = data;
-				flow->if_datalen = datalen;
-
-				/*
-				 * If we're still in the SYN table then this is probably
-				 * the last ACK of the handshake. Don't count it against
-				 * the packet count for this flow if there is no data.
-				 */
-				flow->if_pktcount = (flow->if_data == NULL) ? 0 : 1;
-
-				/*
-				 * Remove it from the SYN table and insert into the
-				 * regular tcp flow tracking table.
-				 */
-				hashtable_remove(sh, (void *)key);
-				if (hashtable_insert(th, (void *)key, (void *)flow) == 0) {
-					syslog(LOG_WARNING,
-					    "packet dropped: unable to insert into table");
-					if (data != NULL)
-						free(data);
-					free(flow);
+			if (flow == NULL) {
+				flow = (struct ip_flow *)malloc(sizeof(struct ip_flow));
+                                if (flow == NULL) {
+                                        syslog(LOG_WARNING, "packet dropped: %m");
+                                        free(key);
+                                        free(pkt->fp_pkt);
+                                        free(pkt);
+                                        continue;
+                                }
+                                         
+                                if (datalen > 0) {
+                                        data = (char *)malloc(datalen);
+                                        if (data == NULL) {
+                                                syslog(LOG_WARNING, "packet dropped: %m");
+                                                free(flow);
+                                                free(key);
+                                                free(pkt->fp_pkt);
+                                                free(pkt);
+                                                continue;
+                                        }
+                                        memcpy((void *)data, (void *)payload,
+                                            datalen);
+                                } else
+                                        data = NULL;
+
+                                flow->if_data = data;
+                                flow->if_datalen = datalen;
+                                flow->if_pktcount = 1;
+                                flow->if_fwrule = 0;
+                                flow->expire = tv.tv_sec;
+                                if (hashtable_insert(th, (void *)key, (void *)flow) == 0) {
+                                        syslog(LOG_WARNING,
+                                            "packet dropped: unable to insert into table");
+                                        if (data != NULL)
+                                                free(data);
+                                        free(flow);
+                                        free(key);
+                                        free(pkt->fp_pkt);
+					free(pkt);
+                                        continue;
+                                }
+			} else if (datalen > 0 && flow->if_pktcount < IC_PKTMAXMATCH) {
+				data = (char *)realloc((void *)flow->if_data,
+				    flow->if_datalen + datalen);
+				if (data == NULL) {
+					syslog(LOG_WARNING, "packet dropped: %m");
 					free(key);
 					free(pkt->fp_pkt);
 					free(pkt);
 					continue;
 				}
-				goto classify;
-			}
+				memcpy((void *)(data + flow->if_datalen),
+				    (void *)payload, datalen);
+				flow->if_data = data;
+				flow->if_datalen += datalen;
+				flow->if_pktcount++;
 
 			/*
-			 * None of the Above (tm). Just pass it through.
+			 * If we haven't been able to classify this flow after
+			 * collecting IC_PKTMAXMATCH packets, just pass it through.
 			 */
-			goto enqueue;
-
+			} else {
+				flow->expire = tv.tv_sec;
+				goto enqueue;
+			}
 		} else if (hdr->ah_ip.ip_p == IPPROTO_UDP) {
 			udp = &hdr->ah_udp;
 			payload = (u_char *)((u_char *)udp + ntohs(udp->uh_ulen));
@@ -688,6 +677,7 @@
 				flow->if_datalen = datalen;
 				flow->if_pktcount = 1;
 				flow->if_fwrule = 0;
+				flow->expire = tv.tv_sec;
 				if (hashtable_insert(uh, (void *)key, (void *)flow) == 0) {
 					syslog(LOG_WARNING,
 					    "packet dropped: unable to insert into table");
@@ -715,19 +705,25 @@
 				flow->if_data = data;
 				flow->if_datalen += datalen;
 				flow->if_pktcount++;
+				flow->expire = tv.tv_sec;
 			/*
 			 * If we haven't been able to classify this flow after
 			 * collecting IC_PKTMAXMATCH packets, just pass it through.
 			 */
 			} else if (flow->if_pktcount >= IC_PKTMAXMATCH &&
-			    flow->if_fwrule == 0)
+			    flow->if_fwrule == 0) {
+				flow->expire = tv.tv_sec;
 				goto enqueue;
+			}
 		} else
 			/* Not an TCP or UDP packet. */
 			goto enqueue;
 
-classify:
-		assert(flow != NULL);
+		if (flow == NULL) {
+			syslog(LOG_ERR, "flow is null: SOFTWARE BUG!? ");
+			goto enqueue;
+		}
+		//assert(flow != NULL);
 
 		/*
 		 * Inform divert(4) what rule to send it to by
@@ -809,7 +805,7 @@
 			    "unable to write to divert socket: %m");
 		else if ((size_t)len != pkt->fp_pktlen)
 			syslog(LOG_WARNING,
-			    "complete packet not written: wrote %d of %d", len,
+			    "complete packet not written: wrote %d of %zu", len,
 			    pkt->fp_pktlen);
 	
 		/*
@@ -823,6 +819,70 @@
 	return (NULL);
 }
 
+void *
+garbage_pthread(void *arg __unused)
+{
+	char errbuf[LINE_MAX];
+	struct entry *e, *f;
+	unsigned int i, flows_expired, error; 
+	struct timeval tv;
+
+	while (1) {
+		flows_expired = 0;
+		while (gettimeofday(&tv, NULL) != 0)
+			;
+		tv.tv_sec -= time_expire;
+
+		pthread_mutex_lock(&inQ.fq_mtx);
+                error = pthread_cond_wait(&gq_condvar, &inQ.fq_mtx);
+                if (error != 0) {
+                        strerror_r(error, errbuf, sizeof(errbuf));
+                        syslog(EX_OSERR, "unable to wait on garbage collection: %s",
+                                errbuf);
+                        exit(EX_OSERR);
+                }
+
+                for (i = 0; i < th->tablelength; i++) {
+                        e = th->table[i];
+                        while (e != NULL) {
+                                f = e; e = e->next;
+                                if (f->v != NULL && ((struct ip_flow *)f->v)->expire < tv.tv_sec) {
+                                        freekey(f->k);
+                                        th->entrycount--;
+                                        if (f->v != NULL)
+                                                free(f->v);
+                                        free(f);
+					flows_expired++;
+					th->table[i] = e;
+                                }
+                        }
+                }
+                for (i = 0; i < uh->tablelength; i++) {
+                        e = uh->table[i];
+                        while (e != NULL) {
+                                f = e; e = e->next;
+                                if (f->v != NULL && ((struct ip_flow *)f->v)->expire < tv.tv_sec) {
+                                        freekey(f->k);
+                                        uh->entrycount--;
+                                        if (f->v != NULL)
+                                                free(f->v);
+                                        free(f);
+					flows_expired++;
+					uh->table[i] = e;
+                                }
+                        }
+                }
+
+		pthread_mutex_unlock(&inQ.fq_mtx);
+
+		//syslog(LOG_WARNING, "expired %u flows", flows_expired);
+
+		pthread_cond_signal(&inQ.fq_condvar);
+	}
+
+	return (NULL);
+}
+
 /*
  * NOTE: The protocol list (plist) passed as an argument is a global
  *	 variable. It is accessed from 3 functions: classify_pthread,
@@ -840,12 +900,21 @@
 static int
 read_config(const char *file, struct ic_protocols *plist)
 {
+	enum { bufsize = 2048 };
 	struct protocol *proto;
 	properties	props;
-	const char	*errmsg, *name, *value;
-	int		fd;
+	const char	*errmsg, *name;
+	char		*value;
+	int		fd, fdpf;
 	uint16_t	rule;
+	struct pfioc_ruleset trule;
+	char **ap, *argv[bufsize];
 
+	fdpf = open("/dev/pf", O_RDONLY);
+	if (fdpf == -1) {
+		syslog(LOG_ERR, "unable to open /dev/pf");
+		return (EX_OSERR);
+	}
 	fd = open(file, O_RDONLY);
 	if (fd == -1) {
 		syslog(LOG_ERR, "unable to open configuration file");
@@ -863,17 +932,66 @@
 		/* Do not match traffic against this pattern */
 		if (value == NULL)
 			continue;
-		rule = strtonum(value, 1, 65535, &errmsg);
-		if (rule == 0) {
+		for (ap = argv; (*ap = strsep(&value, " \t")) != NULL;)
+ 	       		if (**ap != '\0')
+        	     		if (++ap >= &argv[bufsize])
+                			break;
+		if (!strncmp(argv[0], "queue", strlen("queue"))) {
+			bzero(&trule, sizeof(trule));
+			strlcpy(trule.name, argv[1], sizeof(trule.name));
+			if (ioctl(fdpf, DIOCGETNAMEDALTQ, &trule)) {
+				syslog(LOG_WARNING, 
+					"could not get ALTQ translation for"
+					" queue %s", argv[1]);
+				continue;
+			}
+			if (trule.nr == 0) {
+				syslog(LOG_WARNING,
+					"queue %s does not exists!", argv[1]);
+				continue;
+			}
+			trule.nr |= DIVERT_ALTQ;
+			rule = trule.nr;
+		} else if (!strncmp(argv[0], "dnqueue", strlen("dnqueue"))) {
+			rule = strtonum(argv[1], 1, 65535, &errmsg);
+			rule |= DIVERT_DNCOOKIE;
+		} else if (!strncmp(argv[0], "dnpipe", strlen("dnpipe"))) {
+			rule = strtonum(argv[1], 1, 65535, &errmsg);
+			rule |= DIVERT_DNCOOKIE;
+		} else if (!strncmp(argv[0], "tag", strlen("tag"))) {
+                        if (ioctl(fdpf, DIOCGETNAMEDTAG, &rule)) {
+                                syslog(LOG_WARNING,
+                                        "could not get tag translation for"
+                                        " queue %s", argv[1]);
+                                continue;
+                        }
+                        if (rule == 0) {
+                                syslog(LOG_WARNING,
+                                        "tag %s does not exists!", argv[1]);
+                                continue;
+                        }
+			rule |= DIVERT_TAG;
+		} else if (!strncmp(argv[0], "action", strlen("action"))) {
+			if (strncmp(argv[1], "block", strlen("block"))) 
+				rule = PF_DROP;
+			else if (strncmp(argv[1], "allow", strlen("allow"))) 
+				rule = PF_PASS;
+			else
+				continue;
+			rule = 0;
+			rule |= DIVERT_ACTION;
+		} else {
 			syslog(LOG_WARNING,
-			    "invalid rule number for %s protocol: %s",
+			    "invalid action specified for %s protocol: %s",
 			    proto->p_name, errmsg);
 			continue;
 		}
 		proto->p_fwrule = rule;
 		plist->fp_inuse++;
-		syslog(LOG_NOTICE, "Loaded Protocol: %s (rule %d)",
-		    proto->p_name, proto->p_fwrule);
+		syslog(LOG_NOTICE, "Loaded Protocol: %s (rule %s)",
+		    proto->p_name, (rule & DIVERT_ACTION) ? "action block": 
+					(rule & DIVERT_DNCOOKIE) ? "dnpipe" : 
+					(rule & DIVERT_ALTQ) ? "altq" : "tag");
 	}
 	properties_free(props);
 	return (0);
@@ -953,10 +1071,14 @@
 static void
 usage(const char *arg0)
 {
-	printf("usage: %s [-h] [-c file] [-p port] [-P dir] [-q length]\n", basename(arg0));
+	printf("usage: %s [-h] [-c file] [-e seconds] [-n packets] "
+		"[-p port] [-P dir] [-q length]\n", basename(arg0));
 	printf("usage: %s -t -P dir\n", basename(arg0));
 	printf(	"    -c file   : path to configuration file\n"
+		"    -e secs   : number of seconds before a flow is expired\n"
 		"    -h        : this help screen\n"
+		"    -n packets: number of packets before the garbage collector"
+			" tries to expire flows\n"
 		"    -P dir    : directory containing protocol patterns\n"
 		"    -p port   : port number of divert socket\n"
 		"    -q length : max length (in packets) of in/out queues\n"
