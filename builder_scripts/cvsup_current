#!/bin/sh
#
# cvsup_current - part of the pfSense project
#  * Syncs with FreeBSD
#  * Applies pfSense specific patches
#  * Rebuilds pfSense ISO

#set -e -x

CURRENTDIR=`pwd`
[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh

if [ ! -d $BASE_DIR ]; then
	mkdir -p $BASE_DIR
fi

# Remove old builder directories used by FreeSBIE 2
echo -n Removing ${BASEDIR}
rm -rf "${CLONEDIR} "
echo -n "${CLONEDIR} "
rm -rf ${CLONEDIR}
echo "done"

if [ ! -d $BASE_DIR/freesbie2 ]; then
	echo "FreeSBIE2 doesn't exist.  We are fetching..."
	mkdir -p /home/pfsense/
	touch ~/.cvspass
	echo
	echo
	echo "*** Please hit enter on the next line.  We only need to do it once! ***"
	echo
	echo
	cvs -d :pserver:anonymous@cvs.freesbie.org:/cvs login
	(cd $BASE_DIR && cvs -z3 -d :pserver:anonymous@cvs.freesbie.org:/cvs co -P freesbie2)
fi

# Update FreeSBIE2 files from CVS
echo "Updating FreeSBIE 2"
(cd ../../freesbie2 && cvs update -d)

# These are not needed -- they should be set in pfsense_local.sh
# but just in case . . .
PATCHDIR=${PATCHDIR:-${BASE_DIR}/tools/patches/${freebsd_branch}}
SRCDIR=${SRCDIR:-/usr/src}

# Sanity check
if [ ! -d "${PATCHDIR}" ]; then
	echo "PATCHDIR=${PATCHDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ ! -d "${SRCDIR}" ]; then
	echo "SRCDIR=${SRCDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ $pfSense_version = "7" ]; then
	if [ `uname -r | cut -d"." -f1` = "6" ]; then
		echo
		echo "Warning!  You are building FreeBSD 7 on 6."
		echo "          This will most likely not work."
		echo
		echo "You should buildworld and installworld and"
		echo "upgrade your system to FreeBSD 7 before"
		echo "attempting this operation."
		echo
		sleep 5
	fi
fi

# Add cvsup
if [ ! -f "/usr/local/bin/cvsup" ]; then
	echo "Cannot find cvsup, pkg_add in progress..."
	/usr/sbin/pkg_add -r cvsup-without-gui
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/cvsup" ]; then
	echo "Cannot find cvsup, pkg_add in progress (PASSITVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r cvsup-without-gui
fi

if [ -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
# Add fastest-cvsup
if [ ! -f "/usr/local/bin/fastest_cvsup" ]; then
	echo "Cannot find fastest_cvsup, pkg_add in progress..."
	/usr/sbin/pkg_add -r fastest_cvsup
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/fastest_cvsup" ]; then
	echo "Cannot find fastest_cvsup, pkg_add in progress (PASSIVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r fastest_cvsup
fi
fi

# Add pcre
if [ ! -f "/usr/local/lib/libpcre.so.0" ]; then
	echo "Cannot find pcre, pkg_add in progress..."
	/usr/sbin/pkg_add -r pcre
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/lib/libpcre.so.0" ]; then
	echo "Cannot find pcre, pkg_add in progress (PASSITVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r pcre
fi

# Add lighttpd
if [ ! -f "/usr/local/sbin/lighttpd" ]; then
	echo "Cannot find lighttpd, pkg_add in progress..."
	/usr/sbin/pkg_add -r lighttpd
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/sbin/lighttpd" ]; then
	echo "Cannot find lighttpd, pkg_add in progress (PASSIVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r lighttpd
fi

# Add curl
if [ ! -f "/usr/local/bin/curl" ]; then
	echo "Cannot find curl, pkg_add in progress..."
	/usr/sbin/pkg_add -r curl
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/curl" ]; then
	echo "Cannot find curl, pkg_add in progress (PASSIVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r curl
fi

# Add rsync
if [ ! -f "/usr/local/bin/rsync" ]; then
	echo "Cannot find rsync, pkg_add in progress..."
	/usr/sbin/pkg_add -r rsync
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/rsync" ]; then
	echo "Cannot find rsync, pkg_add in progress (PASSITVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r rsync
fi

# Add cpdup
if [ ! -f "/usr/local/bin/cpdup" ]; then
	echo "Cannot find cpdup, pkg_add in progress..."
	/usr/sbin/pkg_add -r cpdup
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/cpdup" ]; then
	echo "Cannot find cpdup, pkg_add in progress (PASSIVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r cpdup
fi

# Add lua
if [ ! -f "/usr/local/bin/lua50c" ]; then
	echo "Cannot find lua, pkg_add in progress ..."
	/usr/sbin/pkg_add -r http://www.pfsense.com/packages/All/lua-5.0.2_1.tbz
fi
# Failed, lets try with passive mode
if [ ! -f "/usr/local/bin/lua50c" ]; then
	echo "Cannot find lua, pkg_add in progress (PASSIVE FTP)..."
	env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r http://www.pfsense.com/packages/All/lua-5.0.2_1.tbz
fi

# Add BSDInstaller
if [ -f /home/pfsense/installer/scripts/build/build.conf ]; then
	if [ ! -f "/usr/local/share/dfuibe_lua/200_install.lua" ]; then
		echo "Fetching BSDInstaller..."
		cvsup ${CURRENTDIR}/bsdinstaller-supfile
		echo "One moment, rebuilding BSDInstaller..."
		(cd /home/pfsense/installer/scripts/build && ./create_installer_tarballs.sh)
		(cd /home/pfsense/installer/scripts/build && find /home/pfsense/installer -name "270_install_bootblocks.lua" -exec rm {} \;)
		(cat /home/pfsense/installer/ports/sysutils/bsdinstaller/Makefile | grep -v "270_install_bootblocks.lua" >/tmp/MakefileTMP)
		(mv /tmp/MakefileTMP /home/pfsense/installer/ports/sysutils/bsdinstaller/Makefile)
		(cd /home/pfsense/installer/scripts/build && ./copy_ports_to_portsdir.sh)
		(cd /home/pfsense/installer/scripts/build && ./build_installer_packages.sh)
	else 
		echo "-- Found /usr/local/share/dfuibe_lua/200_install.lua --"
		echo "-- Not rebuilding BSDInstaller"
	fi
else
	if [ ! -f "/usr/local/share/dfuibe_lua/200_install.lua" ]; then
		echo "Cannot find BSDInstaller, pkg_add in progress..."
		/usr/sbin/pkg_add -r http://www.pfsense.com/packages/All/bsdinstaller-2.0.2006.0728.tbz
	fi
	# Failed, lets try with passive mode
	if [ ! -f "/usr/local/share/dfuibe_lua/200_install.lua" ]; then
		echo "Cannot find BSDInstaller, pkg_add in progress (PASSIVE FTP)..."
		env FTP_PASSIVE_MODE=yes /usr/sbin/pkg_add -r http://www.pfsense.com/packages/All/bsdinstaller-2.0.2006.0728.tbz
	fi

fi

# Loop through and remove files
for LINE in `cat ${CURRENTDIR}/patches.${freebsd_branch}`
do
	PATCH_RM=`echo $LINE | cut -d~ -f4`
	PATCH_RM_LENGTH=`echo $PATCH_RM | wc -c`
	if [ $PATCH_RM_LENGTH -gt "2" ]; then
		echo "Removing ${SRCDIR}${PATCH_RM}"
		rm -rf ${SRCDIR}${PATCH_RM}
	fi
done

# If override is in place, use it otherwise
# locate fastest cvsup host
if [ ! -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
	echo "Setting CVSUp host to ${OVERRIDE_FREEBSD_CVSUP_HOST}"
	echo $OVERRIDE_FREEBSD_CVSUP_HOST > /var/db/fastest_cvsup
else
	echo "Finding fastest CVSUp host... Please wait..."
	fastest_cvsup -c tld -q > /var/db/fastest_cvsup
fi

if [ ! -d /usr/src ]; then
	mkdir /usr/src
fi

# CVSUp freebsd version
echo "Using FreeBSD ${pfSense_version} branch ${freebsd_branch}"
cvsup -h `cat /var/db/fastest_cvsup` ./${freebsd_branch}-supfile
cvsup -h `cat /var/db/fastest_cvsup` ./ports-supfile

# clog source
echo "Applying CLOG updates..."
(cd ${SRCDIR}/usr.sbin/ && \
	tar xzf ${PATCHDIR}/clog-1.0.1.tar.gz)

echo "Removing old patch rejects..."
find /usr/src -name "*.rej" -exec rm {} \;

# Loop through and patch files
for LINE in `cat ${CURRENTDIR}/patches.${freebsd_branch}`
do
	PATCH_DEPTH=`echo $LINE | cut -d~ -f1`
	PATCH_DIRECTORY=`echo $LINE | cut -d~ -f2`
	PATCH_FILE=`echo $LINE | cut -d~ -f3`
	PATCH_FILE_LEN=`echo $PATCH_FILE | wc -c`
	MOVE_FILE=`echo $LINE | cut -d~ -f4`
	MOVE_FILE_LEN=`echo $MOVE_FILE | wc -c`
	if [ $PATCH_FILE_LEN -gt "2" ]; then
		echo "Patching ${PATCH_FILE}"
		(cd ${SRCDIR}/${PATCH_DIRECTORY} && patch -f ${PATCH_DEPTH} < ${PATCHDIR}/${PATCH_FILE})
	fi
	if [ $MOVE_FILE_LEN -gt "2" ]; then
		#cp ${SRCDIR}/${MOVE_FILE} ${SRCDIR}/${PATCH_DIRECTORY}
	fi
done

echo "Finding patch rejects..."
REJECTED_PATCHES=`find /usr/src -name "*.rej" | wc -l`
if [ $REJECTED_PATCHES -gt 0 ]; then
	echo
	echo "WARNING!  Rejected patches found!  Please fix before building!"
	echo 
	find /usr/src -name "*.rej" 
	echo
	exit -1
fi

echo -n Cleaning up previous build environment...Please wait...
(cd ${CURRENTDIR} && rm -rf /usr/obj*)
echo Done!

echo
echo 
echo "     ___"
echo " ___/ f \"
echo "/ p \___/ Sense"
echo "\___/   \"
echo "    \___/"
echo
echo "Starting pfSense build.  Sit back and have a six pack of beer (but not cheap beer)..."
echo

[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh
(cd ${CURRENTDIR} && ./build_iso.sh)

