#!/bin/sh
#
# cvsup_current - part of the pfSense project
#  * Syncs with FreeBSD
#  * Applies pfSense specific patches
#  * Rebuilds pfSense ISO

# Crank up error reporting
#set -x
#set -e

# Set CURRENTDIR
CURRENTDIR=`pwd`

[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh
[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/builder_common.sh

if [ ! -d $BASE_DIR ]; then
	mkdir -p $BASE_DIR
fi

# Remove old builder directories used by FreeSBIE 2
echo -n Removing "${BASEDIR} "
if [ -d "$CLONEDIR" ]; then
	rm -rf "${CLONEDIR}/*"
	echo -n "${CLONEDIR}/*"
	rm -rf ${CLONEDIR}/*
fi
echo -n " /tmp/kernels "
if [ -d /tmp/kernels ]; then
	chflags -R noschg /tmp/kernels
	rm -rf /tmp/kernels
fi
echo "done"

# These are not needed -- they should be set in pfsense_local.sh
# but just in case . . .
PATCHDIR=${PATCHDIR:-${BASE_DIR}/tools/patches/${freebsd_branch}}
SRCDIR=${SRCDIR:-/usr/src}

# Sanity check
if [ ! -d "${PATCHDIR}" ]; then
	echo "PATCHDIR=${PATCHDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ ! -d "${SRCDIR}" ]; then
	echo "SRCDIR=${SRCDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ $pfSense_version = "7" ]; then
	if [ `uname -r | cut -d"." -f1` = "6" ]; then
		echo
		echo "Warning!  You are building FreeBSD 7 on 6."
		echo "          This will most likely not work."
		echo
		echo "You should buildworld and installworld and"
		echo "upgrade your system to FreeBSD 7 before"
		echo "attempting this operation."
		echo
		echo "Sleeping for 15 seconds while you think this over..."
		echo
		sleep 15
	fi
fi

if [ ! -d /usr/src ]; then
	echo "Creating /usr/src ... We will need to cvsup the contents..."
	mkdir /usr/src
fi

# Ensure cdrtools are installed
if [ ! -f /usr/local/bin/mkisofs ]; then
	echo "Cannot find cvsup, building from ports..."
	(cd /usr/ports/sysutils/cdrtools && make install FORCE_PKG_REGISTER=yo BATCH=yo)	
fi

# Add cvsup
if [ ! -f "/usr/local/bin/cvsup" ]; then
	echo "Cannot find cvsup, building from ports..."
	(cd /usr/ports/net/cvsup-without-gui && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

if [ -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
	# Add fastest-cvsup
	if [ ! -f "/usr/local/bin/fastest_cvsup" ]; then
		echo "Cannot find fastest_cvsup, building from ports..."
		(cd /usr/ports/sysutils/fastest_cvsup/ && make install FORCE_PKG_REGISTER=yo BATCH=yo)
	fi
fi

# Add pcre
if [ ! -f "/usr/local/lib/libpcre.so.0" ]; then
	echo "Cannot find pcre, building from ports..."
	(cd /usr/ports/devel/pcre && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

# Add lighttpd
if [ ! -f "/usr/local/sbin/lighttpd" ]; then
	echo "Cannot find lighttpd, building from ports..."
	(cd /usr/ports/www/lighttpd && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

# Add curl
if [ ! -f "/usr/local/bin/curl" ]; then
	echo "Cannot find curl, building from ports..."
	(cd /usr/ports/ftp/curl && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

# Add rsync
if [ ! -f "/usr/local/bin/rsync" ]; then
	echo "Cannot find rsync, building from ports..."
	(cd /usr/ports/net/rsync && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

# Add cpdup
if [ ! -f "/usr/local/bin/cpdup" ]; then
	echo "Cannot find cpdup, building from ports..."
	(cd /usr/ports/sysutils/cpdup/ && make install FORCE_PKG_REGISTER=yo BATCH=yo)
fi

# Add BSDInstaller
echo "Fetching BSDInstaller..."
cvsup ${CURRENTDIR}/bsdinstaller-supfile
./cvsup_bsdinstaller
echo "Rebuilding BSDInstaller..."
(su - root -c ${CURRENTDIR}/rebuild_bsdinstaller.sh)

# If override is in place, use it otherwise
# locate fastest cvsup host
if [ ! -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
	echo "Setting CVSUp host to ${OVERRIDE_FREEBSD_CVSUP_HOST}"
	echo $OVERRIDE_FREEBSD_CVSUP_HOST > /var/db/fastest_cvsup
else
	echo "Finding fastest CVSUp host... Please wait..."
	fastest_cvsup -c tld -q > /var/db/fastest_cvsup
fi

# CVSUp freebsd version
echo "Using FreeBSD ${pfSense_version} branch ${freebsd_branch}"
cvsup -h `cat /var/db/fastest_cvsup` ./${freebsd_branch}-supfile
echo "Updating FreeBSD ports files..."
cvsup -h `cat /var/db/fastest_cvsup` ./ports-supfile
echo "Updating FreeSBIE2-pfSense edition..."
cvsup freesbie2-supfile

# Update FreeSBIE2 files from CVS
echo "Updating FreeSBIE2"
( cd ../../freesbie2 && cvs update -d )

# Loop through and remove files
echo "Removing needed files listed in ${CURRENTDIR}/patches.${freebsd_branch}"
for LINE in `cat ${CURRENTDIR}/patches.${freebsd_branch}`
do
	PATCH_RM=`echo $LINE | cut -d~ -f4`
	PATCH_RM_LENGTH=`echo $PATCH_RM | wc -c`
	if [ $PATCH_RM_LENGTH -gt "2" ]; then
		echo "Removing ${SRCDIR}${PATCH_RM}"
		rm -rf ${SRCDIR}${PATCH_RM}
	fi
done

# clog source
echo "Applying CLOG updates..."
(cd ${SRCDIR}/usr.sbin/ && \
	tar xzf ${PATCHDIR}/clog-1.0.1.tar.gz)

echo "Removing old patch rejects..."
find /usr/src -name "*.rej" -exec rm {} \;

# Loop through and patch files
echo "Applying patches from ${CURRENTDIR}/patches.${freebsd_branch}..."
for LINE in `cat ${CURRENTDIR}/patches.${freebsd_branch}`
do
	PATCH_DEPTH=`echo $LINE | cut -d~ -f1`
	PATCH_DIRECTORY=`echo $LINE | cut -d~ -f2`
	PATCH_FILE=`echo $LINE | cut -d~ -f3`
	PATCH_FILE_LEN=`echo $PATCH_FILE | wc -c`
	MOVE_FILE=`echo $LINE | cut -d~ -f4`
	MOVE_FILE_LEN=`echo $MOVE_FILE | wc -c`
	if [ $PATCH_FILE_LEN -gt "2" ]; then
		echo "Patching ${PATCH_FILE}"
		(cd ${SRCDIR}/${PATCH_DIRECTORY} && patch -f ${PATCH_DEPTH} < ${PATCHDIR}/${PATCH_FILE})
	fi
done

echo "Finding patch rejects..."
REJECTED_PATCHES=`find /usr/src -name "*.rej" | wc -l`
if [ $REJECTED_PATCHES -gt 0 ]; then
	echo
	echo "WARNING!  Rejected patches found!  Please fix before building!"
	echo 
	find /usr/src -name "*.rej" 
	echo
	exit -1
fi

echo -n "Cleaning up previous build environment...Please wait..."
if [ -d $PFSENSEBASEDIR/* ]; then 
	echo -n " . "	
	chflags -R noschg ${PFSENSEBASEDIR}
	echo -n " . "
	(cd ${CURRENTDIR} && rm -rf ${PFSENSEBASEDIR})	
fi
if [ -d $PFSENSEISODIR ]; then 
	echo -n " . "
	chflags -R noschg ${PFSENSEISODIR}
	echo -n " . "
	(cd ${CURRENTDIR} && rm -rf ${PFSENSEISODIR})	
fi
echo -n " . "
(cd ${CURRENTDIR} && rm -rf /usr/obj*)
echo "Done!"

# Recompile pfPorts
set +e
echo "Recompiling all binaries needed by pfSense (pfPorts)..."
recompile_pfPorts

print_flags

echo
echo "Starting pfSense build.  Sit back and have a six pack of beer (but not cheap beer)..."
echo

[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh
echo ">>> Executing ${CURRENTDIR}/build_iso.sh..."
(su - root -c cd ${CURRENTDIR} && ./build_iso.sh)

