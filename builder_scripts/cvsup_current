#!/bin/sh
#
# cvsup_current - part of the pfSense project
#  * Syncs with FreeBSD
#  * Applies pfSense specific patches
#  * Rebuilds pfSense ISO

# Crank up error reporting
#set -x
#set -e

if [ ! -f ./pfsense-build.conf ]; then
	echo "You must first run ./set_version.sh !"
	exit 1
fi

# No ports exist, use portsnap to bootstrap.
if [ ! -d "/usr/ports/" ]; then
	/usr/sbin/portsnap fetch
	/usr/sbin/portsnap extract
fi

# Set CURRENTDIR
CURRENTDIR=`pwd`

[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh
[ -r "${CURRENTDIR}/builder_common.sh" ] && . ${CURRENTDIR}/builder_common.sh

if [ ! -d $BASE_DIR ]; then
	mkdir -p $BASE_DIR
fi

# Remove old builder directories used by FreeSBIE 2
echo -n Removing "${BASEDIR} "
if [ -d "$CLONEDIR" ]; then
	rm -rf "${CLONEDIR}/*"
	echo -n "${CLONEDIR}/*"
	rm -rf ${CLONEDIR}/*
fi
echo -n " /tmp/kernels "
if [ -d /tmp/kernels ]; then
	chflags -R noschg /tmp/kernels
	rm -rf /tmp/kernels
fi
echo "done"

SRCDIR=${SRCDIR:-/usr/pfSensesrc}

# Sanity check
if [ ! -d "${PFSPATCHDIR}" ]; then
	echo "PFSPATCHDIR=${PFSPATCHDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ ! -d "${SRCDIR}" ]; then
	echo "SRCDIR=${SRCDIR} is not a directory -- Please fix."
	exit 1
fi

# Sanity check
if [ $pfSense_version = "7" ]; then
	if [ `uname -r | cut -d"." -f1` = "6" ]; then
		echo
		echo "Warning!  You are building FreeBSD 7 on 6."
		echo "          This will most likely not work."
		echo
		echo "You should buildworld and installworld and"
		echo "upgrade your system to FreeBSD 7 before"
		echo "attempting this operation."
		echo
		echo "Sleeping for 15 seconds while you think this over..."
		echo
		sleep 15
	fi
fi

if [ ! -d $SRCDIR ]; then
	echo "Creating $SRCDIR ... We will need to cvsup the contents..."
	mkdir $SRCDIR
fi

MAKEJ_PORTS=`cat pfsense_local.sh | grep MAKEJ_PORTS | cut -d'"' -f2`

# Ensure cdrtools are installed
if [ ! -f /usr/local/bin/mkisofs ]; then
	echo "Cannot find mkisofs, building from ports..."
	(cd /usr/ports/sysutils/cdrtools && make deinstall clean )
	(cd /usr/ports/sysutils/cdrtools && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/sysutils/cdrtools && make install FORCE_PKG_REGISTER=yo BATCH=yo)
	if [ ! -f /usr/local/bin/mkisofs ]; then
		echo "Something went wrong while attempting installation of mkisofs."
		exit 1
	fi 
fi

# Add cvsup
if [ ! -f "/usr/local/bin/cvsup" ]; then
	echo "Cannot find cvsup, building from ports..."
	(cd /usr/ports/net/cvsup-without-gui && make deinstall clean)
	(cd /usr/ports/net/cvsup-without-gui && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/net/cvsup-without-gui && make install FORCE_PKG_REGISTER=yo BATCH=yo)
	if [ ! -f "/usr/local/bin/cvsup" ]; then
		echo "Something went wrong while attempting installation of cvsup."
		exit 1
	fi
fi

if [ -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
	# Add fastest-cvsup
	if [ ! -f "/usr/local/bin/fastest_cvsup" ]; then
		echo "Cannot find fastest_cvsup, building from ports..."
		(cd /usr/ports/sysutils/fastest_cvsup/ && make deinstall clean)
		(cd /usr/ports/sysutils/fastest_cvsup/ && make ${MAKEJ_PORTS} BATCH=yo)
		(cd /usr/ports/sysutils/fastest_cvsup/ && make install FORCE_PKG_REGISTER=yo BATCH=yo)		
		if [ ! -f "/usr/local/bin/fastest_cvsup" ]; then
			echo "Something went wrong while attempting installation of fastest_cvsup."
			exit 1
		fi
	fi
fi

# Add pcre
if [ ! -f "/usr/local/lib/libpcre.so.0" ]; then
	echo "Cannot find pcre, building from ports..."
	(cd /usr/ports/devel/pcre && make deinstall clean install BATCH=yo)
	(cd /usr/ports/devel/pcre && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/devel/pcre && make install FORCE_PKG_REGISTER=yo BATCH=yo)	
	if [ ! -f "/usr/local/lib/libpcre.so.0" ]; then
		echo "Something went wrong while attempting installation of pcre."
		exit 1
	fi
fi

# Add lighttpd
if [ ! -f "/usr/local/sbin/lighttpd" ]; then
	echo "Cannot find lighttpd, building from ports..."
	(cd /usr/ports/www/lighttpd && make deinstall clean)
	(cd /usr/ports/www/lighttpd && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/www/lighttpd && make install FORCE_PKG_REGISTER=yo BATCH=yo)	
	if [ ! -f "/usr/local/sbin/lighttpd" ]; then
		echo "Something went wrong while attempting installation of lighttpd."
		exit 1
	fi
fi

# Add curl
if [ ! -f "/usr/local/bin/curl" ]; then
	echo "Cannot find curl, building from ports..."
	(cd /usr/ports/ftp/curl && make deinstall clean BATCH=yo)
	(cd /usr/ports/ftp/curl && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/ftp/curl && make  install FORCE_PKG_REGISTER=yo BATCH=yo)	
	if [ ! -f "/usr/local/bin/curl" ]; then
		echo "Something went wrong while attempting installation of curl."
		exit 1
	fi
fi

# Add rsync
if [ ! -f "/usr/local/bin/rsync" ]; then
	echo "Cannot find rsync, building from ports..."
	(cd /usr/ports/net/rsync && make deinstall clean)
	(cd /usr/ports/net/rsync && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/net/rsync && make  install FORCE_PKG_REGISTER=yo BATCH=yo)	
	if [ ! -f "/usr/local/bin/rsync" ]; then
		echo "Something went wrong while attempting installation of rsync."
		exit 1
	fi
fi

# Add cpdup
if [ ! -f "/usr/local/bin/cpdup" ]; then
	echo "Cannot find cpdup, building from ports..."
	(cd /usr/ports/sysutils/cpdup/ && make deinstall clean)
	(cd /usr/ports/sysutils/cpdup/ && make ${MAKEJ_PORTS} BATCH=yo)
	(cd /usr/ports/sysutils/cpdup/ && make  install FORCE_PKG_REGISTER=yo BATCH=yo)	
	if [ ! -f "/usr/local/bin/cpdup" ]; then
		echo "Something went wrong while attempting installation of cpdup."
		exit 1
	fi
fi

# Add git
if [ ! -f "/usr/local/bin/git" ]; then
	echo "Cannot find git, building from ports..."
	(cd /usr/ports/devel/git/ && make -DBATCH deinstall clean)
	(cd /usr/ports/devel/git/ && make ${MAKEJ_PORTS} -DBATCH -DWITHOUT_GUI)
	(cd /usr/ports/devel/git/ && make install -DWITHOUT_GUI -DFORCE_PKG_REGISTER -DBATCH)	
	if [ ! -f "/usr/local/bin/git" ]; then
		echo "Something went wrong while attempting installation of git."
		exit 1
	fi
fi

# Add BSDInstaller
if [ -z "${GIT_REPO_BSDINSTALLER:-}" ]; then
	echo "Fetching BSDInstaller using CVSUP..."
	cvsup ${CURRENTDIR}/bsdinstaller-supfile
	./cvsup_bsdinstaller
else 
	echo "Fetching BSDInstaller using GIT..."
	git checkout "${GIT_REPO_BSDINSTALLER}"
	if [ $? != 0 ]; then
		echo "Something went wrong while checking out GIT."
		exit
	fi	
fi
echo "Rebuilding BSDInstaller..."
(su - root -c ${CURRENTDIR}/rebuild_bsdinstaller.sh)

# If override is in place, use it otherwise
# locate fastest cvsup host
if [ ! -z ${OVERRIDE_FREEBSD_CVSUP_HOST:-} ]; then
	echo "Setting CVSUp host to ${OVERRIDE_FREEBSD_CVSUP_HOST}"
	echo $OVERRIDE_FREEBSD_CVSUP_HOST > /var/db/fastest_cvsup
else
	echo "Finding fastest CVSUp host... Please wait..."
	fastest_cvsup -c tld -q > /var/db/fastest_cvsup
fi

# CVSUp freebsd version
echo "Using FreeBSD ${pfSense_version} branch ${FREEBSD_BRANCH} ${PFSENSETAG} ${SUPFILE}"
cvsup -h `cat /var/db/fastest_cvsup` ${SUPFILE}

if [ -z "${GIT_REPO_FREESBIE2:-}" ]; then
	cvsup freesbie2-supfile
	# Update FreeSBIE2 files from CVS
	echo "Updating FreeSBIE2"
	if [ ! -d $CURRENTDIR/freesbie2 ]; then
		( cvs -d /home/pfsense/cvsroot co freesbie2 )
	else	
		if [ ! -f $CURRENTDIR/freesbie2/pfSense-version ]; then
			# Currently not using pfSense version, start over.
			rm -rf $CURRENTDIR/freesbie2
			( cd $CURRENTDIR/ && cvs co freesbie2 )
		else
			( cd $CURRENTDIR/freesbie2 && cvs up -d )
		fi
	fi
else 
	echo ">>> Using GIT to checkout FreeSBIE2..."
	git checkout "${GIT_REPO_FREESBIE2}"
	if [ $? != 0 ]; then
		echo "Something went wrong while checking out GIT."
		exit
	fi	
fi

# Loop through and remove files
echo "Removing needed files listed in ${PFSPATCHFILE} ${PFSENSETAG}"
for LINE in `cat ${PFSPATCHFILE}`
do
	PATCH_RM=`echo $LINE | cut -d~ -f4`
	PATCH_RM_LENGTH=`echo $PATCH_RM | wc -c`
	DIR_CREATE=`echo $LINE | cut -d~ -f5`
	if [ $PATCH_RM_LENGTH -gt "2" ]; then
		echo "Removing ${SRCDIR}${PATCH_RM}"
		rm -rf ${SRCDIR}${PATCH_RM}
	fi
	if [ "$DIR_CREATE" != "" ]; then
		echo "Creating ${SRCDIR}/${PATCH_RM}"
		mkdir -p ${SRCDIR}/${DIR_CREATE}
	fi
done

# clog source
echo "Applying CLOG updates..."
(cd ${SRCDIR}/usr.sbin/ && \
	tar xzf ${PFSPATCHDIR}/clog-1.0.1.tar.gz)

echo "Removing old patch rejects..."
find $SRCDIR -name "*.rej" -exec rm {} \;

# Loop through and patch files
for LINE in `cat ${PFSPATCHFILE}`
do
	PATCH_DEPTH=`echo $LINE | cut -d~ -f1`
	PATCH_DIRECTORY=`echo $LINE | cut -d~ -f2`
	PATCH_FILE=`echo $LINE | cut -d~ -f3`
	PATCH_FILE_LEN=`echo $PATCH_FILE | wc -c`
	MOVE_FILE=`echo $LINE | cut -d~ -f4`
	MOVE_FILE_LEN=`echo $MOVE_FILE | wc -c`
	IS_TGZ=`echo $LINE | grep -v grep | grep .tgz | wc -l`
	if [ $PATCH_FILE_LEN -gt "2" ]; then
		if [ $IS_TGZ -gt "0" ]; then 
			echo "Extracting ${PATCH_FILE} to ${PFSPATCHDIR}"
			(cd ${SRCDIR}/${PATCH_DIRECTORY} && tar xzvpf ${PFSPATCHDIR}/${PATCH_FILE})			
		else
			echo "Patching ${PATCH_FILE}"
			(cd ${SRCDIR}/${PATCH_DIRECTORY} && patch -f ${PATCH_DEPTH} < ${PFSPATCHDIR}/${PATCH_FILE})
		fi
	fi
	if [ $MOVE_FILE_LEN -gt "2" ]; then
		#cp ${SRCDIR}/${MOVE_FILE} ${SRCDIR}/${PATCH_DIRECTORY}
	fi
done

echo "Finding patch rejects..."
REJECTED_PATCHES=`find $SRCDIR -name "*.rej" | wc -l`
if [ $REJECTED_PATCHES -gt 0 ]; then
	echo
	echo "WARNING!  Rejected patches found!  Please fix before building!"
	echo 
	find $SRCDIR -name "*.rej" 
	echo
	exit -1
fi

echo -n "Cleaning up previous build environment...Please wait..."
if [ -d $PFSENSEBASEDIR ]; then 
	echo -n " . "	
	chflags -R noschg ${PFSENSEBASEDIR}
	echo -n " . "
	(cd ${CURRENTDIR} && rm -rf ${PFSENSEBASEDIR})	
fi
if [ -d $PFSENSEISODIR ]; then 
	echo -n " . "
	chflags -R noschg ${PFSENSEISODIR}
	echo -n " . "
	(cd ${CURRENTDIR} && rm -rf ${PFSENSEISODIR})	
fi
echo -n " . "
(cd ${CURRENTDIR} && rm -rf /usr/obj.pfSense/* && rm -f /usr/obj.pfSense/.*)
echo "Done!"

# Recompile pfPorts
set +e
echo "Recompiling all binaries needed by pfSense (pfPorts)..."
recompile_pfPorts

print_flags

echo
echo "Starting pfSense build.  Sit back and have a six pack of beer (but not cheap beer)..."
echo

[ -r "${CURRENTDIR}/pfsense_local.sh" ] && . ${CURRENTDIR}/pfsense_local.sh
echo ">>> Executing ${CURRENTDIR}/build_iso.sh..."
(su - root -c cd ${CURRENTDIR} && ./build_iso.sh)

