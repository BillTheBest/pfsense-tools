#!/bin/sh
#
# rc.local - part of vCloudBSD
# Copyright (c) 2010, Scott Ullrich <sullrich@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Output logo
cat /etc/vcloudbsd.txt

mount_unionfs() {
	echo
	/bin/mkdir /tmp/unionfs
	/bin/mkdir /tmp/unionfs/usr
	/bin/mkdir /tmp/unionfs/sbin
	/bin/mkdir /tmp/unionfs/bin
	/bin/mkdir /tmp/unionfs/boot
	/sbin/mount_unionfs /tmp/unionfs/bin /bin/
	/sbin/mount_unionfs /tmp/unionfs/sbin /sbin/
	/sbin/mount_unionfs /tmp/unionfs/boot /boot/
	/sbin/mount_unionfs /tmp/unionfs/usr /usr/
}

wait_keypress_nocounter() {
	old_stty_settings=$(stty -g)
	keypress=""
	stty -icanon min 0 time 20
	keypress=`dd bs=1 count=1 2>/dev/null`	
	stty "$old_stty_settings"
}

wait_keypress() {
	# Save original settings.
	old_stty_settings=$(stty -g)
	keypress=""
	COUNTER=9
	stty -icanon min 0 time 20
	/bin/echo -n "  "
	while [ "$COUNTER" -gt 0 ]; do
		/bin/echo -n "$COUNTER "
		keypress=`dd bs=1 count=1 2>/dev/null`
		COUNTER=`expr $COUNTER - 1`
		if [ "$keypress" != "" ]; then
			COUNTER=0
		fi
	done
	stty "$old_stty_settings"
} 	

first_disk() {
	disk=`/usr/sbin/pc-sysinstall/pc-sysinstall/pc-sysinstall.sh disk-list | /usr/bin/head -n1 | /usr/bin/cut -d':' -f1`
}

disk_size() {
	size=`/usr/sbin/pc-sysinstall/pc-sysinstall/pc-sysinstall.sh disk-info $disk | /usr/bin/grep size | /usr/bin/cut -d':' -f2 | /usr/bin/cut -d'=' -f2`
}

install_to_disk() {
	touch /root/.hushlogin
	disk_size
	MEM=`/sbin/dmesg -a | /usr/bin/grep MB | /usr/bin/grep real | /usr/bin/awk '{ print $5 }' | /usr/bin/cut -d'(' -f2`
	SWAPSPACE=$(/bin/expr $MEM \* 2)
	DISKSIZE=$(/bin/expr $size \- $SWAPSPACE \- 2)
	echo
	echo
	echo ">>> Setting SWAPSPACE to $SWAPSPACE"
	echo ">>> Setting / SIZE to $DISKSIZE"
	/bin/cat <<EOF >/tmp/vCloudBSD.cfg
# Sample configuration file for an installation using pc-sysinstall

installMode=fresh
installInteractive=yes
installType=FreeBSD
installMedium=LiveCD

# Set the disk parameters
disk0=$disk
partition=all
bootManager=bsd
commitDiskPart

# Setup the disk label
# All sizes are expressed in MB
# Avail FS Types, UFS, UFS+S, UFS+J, ZFS, SWAP
# Size 0 means use the rest of the slice size
disk0-part=UFS+S $DISKSIZE /
disk0-part=SWAP $SWAPSPACE none

# Do it now!
commitDiskLabel

# Set if we are installing via optical, USB, or FTP
installType=FreeBSD

packageType=cpdup

# Optional Components
cpdupPaths=boot,COPYRIGHT,bin,dev,etc,home,kernels,libexec,lib,root,sbin,usr,var,tmp

EOF
	echo ">>> Installing vCloudBSD to disk $disk"
	/bin/echo -n ">>> One moment please ..."

	# Make backup of pc-sysinstaller config file vCloudBSD.cfg
	cp /tmp/vCloudBSD.cfg /root/

	# Launch pc-sysinstaller into background
	/usr/sbin/pc-sysinstall/pc-sysinstall/pc-sysinstall.sh -c /tmp/vCloudBSD.cfg >/dev/null 2>&1 &
	
	# Wait for pc-sysinstaller to complete it's mission
	while [ `/bin/ps awux | /usr/bin/grep -v /usr/bin/grep | /usr/bin/grep pc-sysinstall | wc -l` -gt 0 ]; do
		/bin/echo -n "."
		sleep 6
	done

	# Newline after -n echo
	echo
	
	# If log file exists check it over for any obvious issues
	if [ -f /root/pc-sysinstall.log ]; then
		ERRORS=`/bin/cat /root/pc-sysinstall.log | /usr/bin/grep -i error | /usr/bin/wc -l`
		if [ "$ERRORS" -gt 0 ]; then
			echo
			echo ">>> Errors detected during installation, please review logfile: "
			/bin/cat /root/pc-sysinstall.log | more
		fi
	fi
}

first_boot() {
	mount_unionfs
	first_disk
	if [ "$disk" != "" ]; then
		echo "vCloudBSD will automatically install to the disk $disk in 9 seconds"
		echo "or press M key to begin the vCloudBSD configuration wizard."
		echo
	fi
	echo "Keys available:"
	echo "  M  Begin manual vCloudBSD/Puppet configuration wizard"
	echo "  A  Begin auto installation immediately"
	echo "  X  Exit immediately"
	echo "  ~  Invoke tcsh and then proceed with installation"
	echo "  B  Invoke the older BSD Installer"
	echo
	if [ "$disk" != "" ]; then
		/bin/echo -n "Seconds remaining before auto installation: "
		wait_keypress
	else
		wait_keypress_nocounter
	fi
	case ${keypress} in
		A)
			echo "Starting auto installation immediately."
			first_boot_setup
			exit
		;;
		B)
			echo "One moment please, launching BSDInstaller..."
			/usr/bin/env TERM=cons25 /bin/tcsh -c /scripts/freebsd_installer
			exit
		;;
		X)
			echo "Exiting"
			exit
		;;
		~)
			echo "Invoking shell. Type exit to return to vCloudBSD."
			/usr/bin/env TERM=cons25 /bin/tcsh -c /bin/tcsh
			echo "Invoking installation."
			first_boot_setup
			exit
		;;
		m)
			echo
			echo
			manual_setup
			exit
		;;
		M)
			echo
			echo
			manual_setup
			exit
		;;
	esac
	first_boot_setup
}

first_boot_setup() {
	# Remove boot marker
	rm /etc/FIRST_BOOT
	# Touch marker
	touch /etc/SECOND_BOOT
	# Install to selected disk
	install_to_disk
	echo ">>> Installation complete.  Rebooting in 5 seconds."
	sleep 5
	echo
	# Time to reboot
	/sbin/shutdown -r now
	# Prevent bootup from occuring
	sleep 265535
	exit
}

second_boot() {
	echo "puppet_enable='YES'" >> /etc/rc.conf
	echo
	echo
	# Make sure we have a hostname, if not do a reverse lookup
	if [ "`hostname`" = "" ]; then
		IP=`/sbin/ifconfig | /usr/bin/grep inet | /usr/bin/grep netmask | /usr/bin/grep -v 127 | /usr/bin/awk '{ print \$2 }'`
		if [ "$IP" != "" ]; then
			HOSTNAME=`/usr/bin/dig -x $IP | /usr/bin/grep -a1 "ANSWER SECTION" | /usr/bin/tail -n1 | /usr/bin/awk '{ print \$5 }' | /usr/bin/sed 's/[\.]*$//'`
			if [ "$HOSTNAME" != "" ]; then
				echo ">>> Found hostname $HOSTNAME for this host.  Setting."
				hostname $HOSTNAME
				echo "hostname=\"$HOSTNAME\"" >> /etc/rc.conf
			fi
		fi
	fi
	PUPPETIP=`/usr/bin/dig +search puppet | /usr/bin/grep -v CNAME | /usr/bin/grep -a1 "ANSWER SECTION" | /usr/bin/tail -n1 | /usr/bin/awk '{ print \$5 }'`
	PUPPETMASTERIP=`/usr/bin/dig +search puppetmaster | /usr/bin/grep -v CNAME | /usr/bin/grep -a1 "ANSWER SECTION" | /usr/bin/tail -n1 | /usr/bin/awk '{ print \$5 }'`
	if [ "$PUPPETIP" != "" ]; then
		PUPPET=`/usr/bin/dig -x $PUPPETIP | /usr/bin/grep -a1 "ANSWER SECTION" | /usr/bin/tail -n1 | /usr/bin/awk '{ print \$5 }' | /usr/bin/sed 's/[\.]*$//'`
		if [ "$PUPPET" != "" ]; then
			echo ">>> Found puppet at $PUPPET"
			/bin/cat <<EOF >/usr/local/etc/puppet/puppet.conf
[agent]
server = $PUPPET
client = true
EOF
		fi
	fi
	if [ "$PUPPETMASTERIP" != "" ]; then		
		PUPPETMASTER=`/usr/bin/dig -x $PUPPETMASTERIP | /usr/bin/grep -a1 "ANSWER SECTION" | /usr/bin/tail -n1 | /usr/bin/awk '{ print \$5 }' | /usr/bin/sed 's/[\.]*$//'`
		if [ "$PUPPETMASTER" != "" ]; then		
			echo ">>> Found puppetmaster at $PUPPETMASTER"
			/bin/cat <<EOF >/usr/local/etc/puppet/puppet.conf
[agent]
server = $PUPPETMASTER
client = true
daemonize = true
runinterval = 60
EOF
		fi
	fi
	echo
	echo ">>> Rebooting and activating Puppet configuration"
	echo
	# Remove boot marker
	rm /etc/SECOND_BOOT
	# Add second stage boot marker
	touch /etc/THIRD_BOOT
	# Remove installed package roster
	rm -rf /var/db/pkg/*
	# Time to reboot
	/sbin/shutdown -r now
	# Prevent bootup from occuring
	sleep 265535
	exit
}

third_boot() {
	rm /etc/THIRD_BOOT
	echo
	echo
	echo ">>> Self destructing /etc/rc.local."
	# Self destruct
	rm /etc/rc.local
	# Time to reboot
	echo 
	echo ">>> Rebooting one last time before vCloudBSD setup is complete."
	echo
	/sbin/shutdown -r now
	# Prevent bootup from occuring
	sleep 265535
	exit
}

manual_setup() {
	clear
	echo
	echo ">>> vCloudBSD Manual Setup"
	echo
	/bin/echo "Available disks: "
	echo
	/usr/sbin/pc-sysinstall/pc-sysinstall/pc-sysinstall.sh disk-list
	echo
	/bin/echo -n "Which disk would you like to install vCloudBSD to? " 
	read disk
	echo
	# Prompt which interface
	/bin/echo -n "Available networking interfaces: "
	/sbin/ifconfig -l
	echo
	/bin/echo -n "Which interface would you like to use? "
	read interface
	echo
	# Prompt to use DHCP?
	#      -> if not, prompt for IP address/subnet	
	/bin/echo -n "Would you like to use DHCP for interface ${interface} (yes/no)? "
	read usedhcp
	if [ "$usedhcp" = "no" ]; then
		echo
		echo "Enter the IP address that would you like to use for the interface ${interface}: "
		read ipaddress
		echo
		echo "Enter the netmask that would you like to use for the interface ${interface}: "
		read subnetmask
		echo
		echo "Enter the default router that would you like to use for interface ${interface}: "
		read defaultrouter
		# Install the items queried
		/bin/cat /etc/rc.conf | /usr/bin/grep -v "ifconfig_${interface}" > /tmp/rc.conf
		echo "ifconfig_${interface}=\"inet ${ipaddress} netmask ${subnetmask}\"" >> /tmp/rc.conf
		echo "defaultrouter=\"${defaultrouter}\"" >> /tmp/rc.conf
		mv /tmp/rc.conf /etc/rc.conf
	fi
	echo
	# Prompt for hostname
	/bin/echo "Enter the hostname would you like to use for this vCloudBSD installation: "
	read hostname
	if [ "$hostname" != "" ]; then
		echo "hostname=\"${hostname}\"" >> /etc/rc.conf
	fi
	echo
	# Prompt for DNS Server 1
	/bin/echo "Enter your first DNS server IP Address: "
	read firstdns
	if [ "$firstdns" != "" ]; then
		echo "nameserver ${firstdns}" > /etc/resolv.conf
	fi
	echo
	# Prompt for DNS Server 2
	/bin/echo "Enter your second DNS server IP Address: "
	read seconddns
	if [ "$seconddns" != "" ]; then
		echo "nameserver ${seconddns}" >> /etc/resolv.conf
	fi
	echo
	# Prompt for searchdomain
	/bin/echo "Enter the DHCP search domain: "
	read searchdomain
	if [ "$searchdomain" != "" ]; then
		echo "searchdomain ${searchdomain}" >> /etc/resolv.conf
	fi
	echo
	# Prompt for puppetmaster server hostname
	/bin/echo "Enter hostname of the Puppetmaster server: "
	read puppetmaster
	if [ "$puppetmaster" != "" ]; then
		echo "[agent]" > /usr/local/etc/puppet.conf
		echo "server = $puppetmaster" >> /usr/local/etc/puppet.conf
		echo "client = true" >> /usr/local/etc/puppet.conf
	fi
	echo
	# Install to selected disk
	install_to_disk
	echo ">>> Installation complete.  Rebooting in 5 seconds."
	sleep 5
	echo
	# Time to reboot
	/sbin/shutdown -r now
	# Prevent bootup from occuring
	sleep 265535
	exit
}

if [ -f /etc/THIRD_BOOT ]; then
	# Reboot final time
	third_boot
	exit
fi

if [ -f /etc/SECOND_BOOT ]; then
	# Setup puppet and such
	second_boot
	exit
fi

if [ -f /etc/FIRST_BOOT ]; then
	# Invoke installer
	first_boot
	exit
fi


